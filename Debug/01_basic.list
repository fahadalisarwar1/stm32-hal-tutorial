
01_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080049a0  080049a0  000149a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc4  08004dc4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dcc  08004dcc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dcc  08004dcc  00014dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200001dc  08004fb0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004fb0  00020268  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009339  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171b  00000000  00000000  00029543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b8  00000000  00000000  0002ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000500  00000000  00000000  0002b218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c9d  00000000  00000000  0002b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000080e5  00000000  00000000  000533b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8f92  00000000  00000000  0005b49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015442c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002540  00000000  00000000  00154480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001569c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  00156a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08004988 	.word	0x08004988

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08004988 	.word	0x08004988

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_write>:
#include "rcc.h"
#include "uart.h"
#include "gpio.h"

int _write(int file, char *ptr, int len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	HAL_USART_Transmit(&husart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	68b9      	ldr	r1, [r7, #8]
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <_write+0x28>)
 8000600:	f001 f864 	bl	80016cc <HAL_USART_Transmit>
	return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000208 	.word	0x20000208

08000614 <main>:

int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
    HAL_Init();
 800061a:	f000 f83b 	bl	8000694 <HAL_Init>
    rcc_systemClockConfig();
 800061e:	f001 fb93 	bl	8001d48 <rcc_systemClockConfig>

    uart_UART3_GPIO_config();
 8000622:	f001 fbdb 	bl	8001ddc <uart_UART3_GPIO_config>
    uart_UART3_config();
 8000626:	f001 fc0f 	bl	8001e48 <uart_UART3_config>
    gpio_LED_init_all();
 800062a:	f001 fb63 	bl	8001cf4 <gpio_LED_init_all>

    printf("program starting...\r\n");
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <main+0x48>)
 8000630:	f002 f95e 	bl	80028f0 <puts>
    int counter = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
    while(1)
    {
	gpio_LED_Green_Toggle();
 8000638:	f001 fb66 	bl	8001d08 <gpio_LED_Green_Toggle>
	gpio_LED_Blue_Toggle();
 800063c:	f001 fb6e 	bl	8001d1c <gpio_LED_Blue_Toggle>
	gpio_LED_Red_Toggle();
 8000640:	f001 fb76 	bl	8001d30 <gpio_LED_Red_Toggle>
	printf("counter = %d\r\n", counter);
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <main+0x4c>)
 8000648:	f002 f8cc 	bl	80027e4 <iprintf>
	counter++;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
	HAL_Delay(1000);
 8000652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000656:	f000 f891 	bl	800077c <HAL_Delay>
	gpio_LED_Green_Toggle();
 800065a:	e7ed      	b.n	8000638 <main+0x24>
 800065c:	080049a0 	.word	0x080049a0
 8000660:	080049b8 	.word	0x080049b8

08000664 <SysTick_Handler>:
#include "main.h"
#include "stm32f7xx_it.h"


void SysTick_Handler()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000668:	f000 f868 	bl	800073c <HAL_IncTick>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x20>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <SystemInit+0x20>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_Init+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <HAL_Init+0x34>)
 800069e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_Init+0x34>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_Init+0x34>)
 80006aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f939 	bl	8000928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f810 	bl	80006dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f000 f806 	bl	80006cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023c00 	.word	0x40023c00

080006cc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_InitTick+0x54>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_InitTick+0x58>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f93b 	bl	8000976 <HAL_SYSTICK_Config>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	e00e      	b.n	8000728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d80a      	bhi.n	8000726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000710:	2200      	movs	r2, #0
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	f04f 30ff 	mov.w	r0, #4294967295
 8000718:	f000 f911 	bl	800093e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <HAL_InitTick+0x5c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e000      	b.n	8000728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	20000008 	.word	0x20000008
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_IncTick+0x20>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_IncTick+0x24>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_IncTick+0x24>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000008 	.word	0x20000008
 8000760:	20000204 	.word	0x20000204

08000764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return uwTick;
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <HAL_GetTick+0x14>)
 800076a:	681b      	ldr	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000204 	.word	0x20000204

0800077c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000784:	f7ff ffee 	bl	8000764 <HAL_GetTick>
 8000788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000794:	d005      	beq.n	80007a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_Delay+0x44>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a2:	bf00      	nop
 80007a4:	f7ff ffde 	bl	8000764 <HAL_GetTick>
 80007a8:	4602      	mov	r2, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d8f7      	bhi.n	80007a4 <HAL_Delay+0x28>
  {
  }
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <__NVIC_SetPriorityGrouping+0x40>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <__NVIC_SetPriorityGrouping+0x40>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00
 8000808:	05fa0000 	.word	0x05fa0000

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f1c3 0307 	rsb	r3, r3, #7
 8000896:	2b04      	cmp	r3, #4
 8000898:	bf28      	it	cs
 800089a:	2304      	movcs	r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d902      	bls.n	80008ac <NVIC_EncodePriority+0x30>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3b03      	subs	r3, #3
 80008aa:	e000      	b.n	80008ae <NVIC_EncodePriority+0x32>
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43da      	mvns	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	401a      	ands	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43d9      	mvns	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	4313      	orrs	r3, r2
         );
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f4:	d301      	bcc.n	80008fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00f      	b.n	800091a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <SysTick_Config+0x40>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000902:	210f      	movs	r1, #15
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f7ff ff8e 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SysTick_Config+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <SysTick_Config+0x40>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff47 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000950:	f7ff ff5c 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	6978      	ldr	r0, [r7, #20]
 800095c:	f7ff ff8e 	bl	800087c <NVIC_EncodePriority>
 8000960:	4602      	mov	r2, r0
 8000962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff5d 	bl	8000828 <__NVIC_SetPriority>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffb0 	bl	80008e4 <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
 80009ae:	e175      	b.n	8000c9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80009b0:	2201      	movs	r2, #1
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	f040 8164 	bne.w	8000c96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d00b      	beq.n	80009ee <HAL_GPIO_Init+0x5e>
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d007      	beq.n	80009ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e2:	2b11      	cmp	r3, #17
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b12      	cmp	r3, #18
 80009ec:	d130      	bne.n	8000a50 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2203      	movs	r2, #3
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4013      	ands	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a24:	2201      	movs	r2, #1
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	f003 0201 	and.w	r2, r3, #1
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x100>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b12      	cmp	r3, #18
 8000a8e:	d123      	bne.n	8000ad8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	08da      	lsrs	r2, r3, #3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3208      	adds	r2, #8
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	220f      	movs	r2, #15
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	69b9      	ldr	r1, [r7, #24]
 8000ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0203 	and.w	r2, r3, #3
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 80be 	beq.w	8000c96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b66      	ldr	r3, [pc, #408]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a65      	ldr	r2, [pc, #404]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b63      	ldr	r3, [pc, #396]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000b32:	4a61      	ldr	r2, [pc, #388]	; (8000cb8 <HAL_GPIO_Init+0x328>)
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4013      	ands	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a58      	ldr	r2, [pc, #352]	; (8000cbc <HAL_GPIO_Init+0x32c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d037      	beq.n	8000bce <HAL_GPIO_Init+0x23e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a57      	ldr	r2, [pc, #348]	; (8000cc0 <HAL_GPIO_Init+0x330>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d031      	beq.n	8000bca <HAL_GPIO_Init+0x23a>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a56      	ldr	r2, [pc, #344]	; (8000cc4 <HAL_GPIO_Init+0x334>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d02b      	beq.n	8000bc6 <HAL_GPIO_Init+0x236>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a55      	ldr	r2, [pc, #340]	; (8000cc8 <HAL_GPIO_Init+0x338>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d025      	beq.n	8000bc2 <HAL_GPIO_Init+0x232>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a54      	ldr	r2, [pc, #336]	; (8000ccc <HAL_GPIO_Init+0x33c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d01f      	beq.n	8000bbe <HAL_GPIO_Init+0x22e>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a53      	ldr	r2, [pc, #332]	; (8000cd0 <HAL_GPIO_Init+0x340>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d019      	beq.n	8000bba <HAL_GPIO_Init+0x22a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a52      	ldr	r2, [pc, #328]	; (8000cd4 <HAL_GPIO_Init+0x344>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0x226>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a51      	ldr	r2, [pc, #324]	; (8000cd8 <HAL_GPIO_Init+0x348>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00d      	beq.n	8000bb2 <HAL_GPIO_Init+0x222>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a50      	ldr	r2, [pc, #320]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d007      	beq.n	8000bae <HAL_GPIO_Init+0x21e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4f      	ldr	r2, [pc, #316]	; (8000ce0 <HAL_GPIO_Init+0x350>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_GPIO_Init+0x21a>
 8000ba6:	2309      	movs	r3, #9
 8000ba8:	e012      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000baa:	230a      	movs	r3, #10
 8000bac:	e010      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bae:	2308      	movs	r3, #8
 8000bb0:	e00e      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	e00c      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	e00a      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bba:	2305      	movs	r3, #5
 8000bbc:	e008      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	e006      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e004      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	e002      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e000      	b.n	8000bd0 <HAL_GPIO_Init+0x240>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	69fa      	ldr	r2, [r7, #28]
 8000bd2:	f002 0203 	and.w	r2, r2, #3
 8000bd6:	0092      	lsls	r2, r2, #2
 8000bd8:	4093      	lsls	r3, r2
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000be0:	4935      	ldr	r1, [pc, #212]	; (8000cb8 <HAL_GPIO_Init+0x328>)
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	3302      	adds	r3, #2
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <HAL_GPIO_Init+0x354>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c12:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <HAL_GPIO_Init+0x354>)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <HAL_GPIO_Init+0x354>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c3c:	4a29      	ldr	r2, [pc, #164]	; (8000ce4 <HAL_GPIO_Init+0x354>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <HAL_GPIO_Init+0x354>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_GPIO_Init+0x354>)
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_GPIO_Init+0x354>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c90:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_GPIO_Init+0x354>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	61fb      	str	r3, [r7, #28]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	2b0f      	cmp	r3, #15
 8000ca0:	f67f ae86 	bls.w	80009b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40013800 	.word	0x40013800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40021400 	.word	0x40021400
 8000cd4:	40021800 	.word	0x40021800
 8000cd8:	40021c00 	.word	0x40021c00
 8000cdc:	40022000 	.word	0x40022000
 8000ce0:	40022400 	.word	0x40022400
 8000ce4:	40013c00 	.word	0x40013c00

08000ce8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cfa:	887a      	ldrh	r2, [r7, #2]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	041a      	lsls	r2, r3, #16
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43d9      	mvns	r1, r3
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	400b      	ands	r3, r1
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e29b      	b.n	800126a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8087 	beq.w	8000e4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d40:	4b96      	ldr	r3, [pc, #600]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f003 030c 	and.w	r3, r3, #12
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d00c      	beq.n	8000d66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d4c:	4b93      	ldr	r3, [pc, #588]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d112      	bne.n	8000d7e <HAL_RCC_OscConfig+0x62>
 8000d58:	4b90      	ldr	r3, [pc, #576]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d64:	d10b      	bne.n	8000d7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d66:	4b8d      	ldr	r3, [pc, #564]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d06c      	beq.n	8000e4c <HAL_RCC_OscConfig+0x130>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d168      	bne.n	8000e4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e275      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d86:	d106      	bne.n	8000d96 <HAL_RCC_OscConfig+0x7a>
 8000d88:	4b84      	ldr	r3, [pc, #528]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a83      	ldr	r2, [pc, #524]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e02e      	b.n	8000df4 <HAL_RCC_OscConfig+0xd8>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x9c>
 8000d9e:	4b7f      	ldr	r3, [pc, #508]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a7e      	ldr	r2, [pc, #504]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b7c      	ldr	r3, [pc, #496]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a7b      	ldr	r2, [pc, #492]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e01d      	b.n	8000df4 <HAL_RCC_OscConfig+0xd8>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0xc0>
 8000dc2:	4b76      	ldr	r3, [pc, #472]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a75      	ldr	r2, [pc, #468]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b73      	ldr	r3, [pc, #460]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a72      	ldr	r2, [pc, #456]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e00b      	b.n	8000df4 <HAL_RCC_OscConfig+0xd8>
 8000ddc:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a6e      	ldr	r2, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b6c      	ldr	r3, [pc, #432]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a6b      	ldr	r2, [pc, #428]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d013      	beq.n	8000e24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fcb2 	bl	8000764 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e04:	f7ff fcae 	bl	8000764 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b64      	cmp	r3, #100	; 0x64
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e229      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e16:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0xe8>
 8000e22:	e014      	b.n	8000e4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e24:	f7ff fc9e 	bl	8000764 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e2c:	f7ff fc9a 	bl	8000764 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	; 0x64
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e215      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3e:	4b57      	ldr	r3, [pc, #348]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x110>
 8000e4a:	e000      	b.n	8000e4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d069      	beq.n	8000f2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e5a:	4b50      	ldr	r3, [pc, #320]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00b      	beq.n	8000e7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e66:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d11c      	bne.n	8000eac <HAL_RCC_OscConfig+0x190>
 8000e72:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d116      	bne.n	8000eac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7e:	4b47      	ldr	r3, [pc, #284]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d005      	beq.n	8000e96 <HAL_RCC_OscConfig+0x17a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d001      	beq.n	8000e96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e1e9      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e96:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	493d      	ldr	r1, [pc, #244]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eaa:	e040      	b.n	8000f2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d023      	beq.n	8000efc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb4:	4b39      	ldr	r3, [pc, #228]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a38      	ldr	r2, [pc, #224]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc50 	bl	8000764 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fc4c 	bl	8000764 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e1c7      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eda:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4929      	ldr	r1, [pc, #164]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
 8000efa:	e018      	b.n	8000f2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc2c 	bl	8000764 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f10:	f7ff fc28 	bl	8000764 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e1a3      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d038      	beq.n	8000fac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d019      	beq.n	8000f76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fc09 	bl	8000764 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f56:	f7ff fc05 	bl	8000764 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e180      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f0      	beq.n	8000f56 <HAL_RCC_OscConfig+0x23a>
 8000f74:	e01a      	b.n	8000fac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_RCC_OscConfig+0x280>)
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f82:	f7ff fbef 	bl	8000764 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fbeb 	bl	8000764 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d903      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e166      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
 8000f9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa0:	4b92      	ldr	r3, [pc, #584]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8000fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ee      	bne.n	8000f8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80a4 	beq.w	8001102 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fba:	4b8c      	ldr	r3, [pc, #560]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10d      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b89      	ldr	r3, [pc, #548]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a88      	ldr	r2, [pc, #544]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b86      	ldr	r3, [pc, #536]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe2:	4b83      	ldr	r3, [pc, #524]	; (80011f0 <HAL_RCC_OscConfig+0x4d4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d118      	bne.n	8001020 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000fee:	4b80      	ldr	r3, [pc, #512]	; (80011f0 <HAL_RCC_OscConfig+0x4d4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7f      	ldr	r2, [pc, #508]	; (80011f0 <HAL_RCC_OscConfig+0x4d4>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fbb3 	bl	8000764 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001002:	f7ff fbaf 	bl	8000764 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b64      	cmp	r3, #100	; 0x64
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e12a      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001014:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <HAL_RCC_OscConfig+0x4d4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f0      	beq.n	8001002 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d106      	bne.n	8001036 <HAL_RCC_OscConfig+0x31a>
 8001028:	4b70      	ldr	r3, [pc, #448]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 800102a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800102c:	4a6f      	ldr	r2, [pc, #444]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6713      	str	r3, [r2, #112]	; 0x70
 8001034:	e02d      	b.n	8001092 <HAL_RCC_OscConfig+0x376>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x33c>
 800103e:	4b6b      	ldr	r3, [pc, #428]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001042:	4a6a      	ldr	r2, [pc, #424]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6713      	str	r3, [r2, #112]	; 0x70
 800104a:	4b68      	ldr	r3, [pc, #416]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 800104c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800104e:	4a67      	ldr	r2, [pc, #412]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	6713      	str	r3, [r2, #112]	; 0x70
 8001056:	e01c      	b.n	8001092 <HAL_RCC_OscConfig+0x376>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b05      	cmp	r3, #5
 800105e:	d10c      	bne.n	800107a <HAL_RCC_OscConfig+0x35e>
 8001060:	4b62      	ldr	r3, [pc, #392]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001064:	4a61      	ldr	r2, [pc, #388]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	6713      	str	r3, [r2, #112]	; 0x70
 800106c:	4b5f      	ldr	r3, [pc, #380]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 800106e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001070:	4a5e      	ldr	r2, [pc, #376]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6713      	str	r3, [r2, #112]	; 0x70
 8001078:	e00b      	b.n	8001092 <HAL_RCC_OscConfig+0x376>
 800107a:	4b5c      	ldr	r3, [pc, #368]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 800107c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800107e:	4a5b      	ldr	r2, [pc, #364]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6713      	str	r3, [r2, #112]	; 0x70
 8001086:	4b59      	ldr	r3, [pc, #356]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800108a:	4a58      	ldr	r2, [pc, #352]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 800108c:	f023 0304 	bic.w	r3, r3, #4
 8001090:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d015      	beq.n	80010c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109a:	f7ff fb63 	bl	8000764 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a0:	e00a      	b.n	80010b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fb5f 	bl	8000764 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e0d8      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 80010ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0ee      	beq.n	80010a2 <HAL_RCC_OscConfig+0x386>
 80010c4:	e014      	b.n	80010f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c6:	f7ff fb4d 	bl	8000764 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fb49 	bl	8000764 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e0c2      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e4:	4b41      	ldr	r3, [pc, #260]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 80010e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1ee      	bne.n	80010ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d105      	bne.n	8001102 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a3c      	ldr	r2, [pc, #240]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 80010fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80ae 	beq.w	8001268 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b08      	cmp	r3, #8
 8001116:	d06d      	beq.n	80011f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d14b      	bne.n	80011b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a31      	ldr	r2, [pc, #196]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800112a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112c:	f7ff fb1a 	bl	8000764 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001134:	f7ff fb16 	bl	8000764 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e091      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69da      	ldr	r2, [r3, #28]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	019b      	lsls	r3, r3, #6
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	3b01      	subs	r3, #1
 800116c:	041b      	lsls	r3, r3, #16
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	061b      	lsls	r3, r3, #24
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	071b      	lsls	r3, r3, #28
 800117e:	491b      	ldr	r1, [pc, #108]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 800118a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800118e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fae8 	bl	8000764 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff fae4 	bl	8000764 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e05f      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x47c>
 80011b6:	e057      	b.n	8001268 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 80011be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff face 	bl	8000764 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff faca 	bl	8000764 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e045      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011de:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_RCC_OscConfig+0x4d0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x4b0>
 80011ea:	e03d      	b.n	8001268 <HAL_RCC_OscConfig+0x54c>
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_RCC_OscConfig+0x558>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d030      	beq.n	8001264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800120c:	429a      	cmp	r2, r3
 800120e:	d129      	bne.n	8001264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	429a      	cmp	r2, r3
 800121c:	d122      	bne.n	8001264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001224:	4013      	ands	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800122a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800122c:	4293      	cmp	r3, r2
 800122e:	d119      	bne.n	8001264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	3b01      	subs	r3, #1
 800123e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001240:	429a      	cmp	r2, r3
 8001242:	d10f      	bne.n	8001264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001250:	429a      	cmp	r2, r3
 8001252:	d107      	bne.n	8001264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0d0      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d910      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 020f 	bic.w	r2, r3, #15
 80012a6:	4965      	ldr	r1, [pc, #404]	; (800143c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0b8      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 80012de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f0:	4b53      	ldr	r3, [pc, #332]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 80012f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fc:	4b50      	ldr	r3, [pc, #320]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	494d      	ldr	r1, [pc, #308]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d040      	beq.n	800139c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d115      	bne.n	800135a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e07f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e073      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e06b      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f023 0203 	bic.w	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4936      	ldr	r1, [pc, #216]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 8001368:	4313      	orrs	r3, r2
 800136a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800136c:	f7ff f9fa 	bl	8000764 <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	e00a      	b.n	800138a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001374:	f7ff f9f6 	bl	8000764 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e053      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 020c 	and.w	r2, r3, #12
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	429a      	cmp	r2, r3
 800139a:	d1eb      	bne.n	8001374 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d210      	bcs.n	80013cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 020f 	bic.w	r2, r3, #15
 80013b2:	4922      	ldr	r1, [pc, #136]	; (800143c <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e032      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4916      	ldr	r1, [pc, #88]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 8001406:	4313      	orrs	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800140a:	f000 f821 	bl	8001450 <HAL_RCC_GetSysClockFreq>
 800140e:	4602      	mov	r2, r0
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_ClockConfig+0x1c8>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	490a      	ldr	r1, [pc, #40]	; (8001444 <HAL_RCC_ClockConfig+0x1cc>)
 800141c:	5ccb      	ldrb	r3, [r1, r3]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_RCC_ClockConfig+0x1d0>)
 8001424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_ClockConfig+0x1d4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f956 	bl	80006dc <HAL_InitTick>

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00
 8001440:	40023800 	.word	0x40023800
 8001444:	080049c8 	.word	0x080049c8
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001456:	2100      	movs	r1, #0
 8001458:	6079      	str	r1, [r7, #4]
 800145a:	2100      	movs	r1, #0
 800145c:	60f9      	str	r1, [r7, #12]
 800145e:	2100      	movs	r1, #0
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001462:	2100      	movs	r1, #0
 8001464:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001466:	4952      	ldr	r1, [pc, #328]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001468:	6889      	ldr	r1, [r1, #8]
 800146a:	f001 010c 	and.w	r1, r1, #12
 800146e:	2908      	cmp	r1, #8
 8001470:	d00d      	beq.n	800148e <HAL_RCC_GetSysClockFreq+0x3e>
 8001472:	2908      	cmp	r1, #8
 8001474:	f200 8094 	bhi.w	80015a0 <HAL_RCC_GetSysClockFreq+0x150>
 8001478:	2900      	cmp	r1, #0
 800147a:	d002      	beq.n	8001482 <HAL_RCC_GetSysClockFreq+0x32>
 800147c:	2904      	cmp	r1, #4
 800147e:	d003      	beq.n	8001488 <HAL_RCC_GetSysClockFreq+0x38>
 8001480:	e08e      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001482:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001484:	60bb      	str	r3, [r7, #8]
      break;
 8001486:	e08e      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001488:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800148a:	60bb      	str	r3, [r7, #8]
      break;
 800148c:	e08b      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800148e:	4948      	ldr	r1, [pc, #288]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001490:	6849      	ldr	r1, [r1, #4]
 8001492:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001496:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001498:	4945      	ldr	r1, [pc, #276]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800149a:	6849      	ldr	r1, [r1, #4]
 800149c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80014a0:	2900      	cmp	r1, #0
 80014a2:	d024      	beq.n	80014ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a4:	4942      	ldr	r1, [pc, #264]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80014a6:	6849      	ldr	r1, [r1, #4]
 80014a8:	0989      	lsrs	r1, r1, #6
 80014aa:	4608      	mov	r0, r1
 80014ac:	f04f 0100 	mov.w	r1, #0
 80014b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80014b4:	f04f 0500 	mov.w	r5, #0
 80014b8:	ea00 0204 	and.w	r2, r0, r4
 80014bc:	ea01 0305 	and.w	r3, r1, r5
 80014c0:	493d      	ldr	r1, [pc, #244]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80014c2:	fb01 f003 	mul.w	r0, r1, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	fb01 f102 	mul.w	r1, r1, r2
 80014cc:	1844      	adds	r4, r0, r1
 80014ce:	493a      	ldr	r1, [pc, #232]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80014d0:	fba2 0101 	umull	r0, r1, r2, r1
 80014d4:	1863      	adds	r3, r4, r1
 80014d6:	4619      	mov	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	461a      	mov	r2, r3
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	f7fe ff06 	bl	80002f0 <__aeabi_uldivmod>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4613      	mov	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e04a      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	099b      	lsrs	r3, r3, #6
 80014f4:	461a      	mov	r2, r3
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	ea02 0400 	and.w	r4, r2, r0
 8001506:	ea03 0501 	and.w	r5, r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	014b      	lsls	r3, r1, #5
 8001518:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800151c:	0142      	lsls	r2, r0, #5
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	1b00      	subs	r0, r0, r4
 8001524:	eb61 0105 	sbc.w	r1, r1, r5
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	018b      	lsls	r3, r1, #6
 8001532:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001536:	0182      	lsls	r2, r0, #6
 8001538:	1a12      	subs	r2, r2, r0
 800153a:	eb63 0301 	sbc.w	r3, r3, r1
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	00d9      	lsls	r1, r3, #3
 8001548:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800154c:	00d0      	lsls	r0, r2, #3
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	1912      	adds	r2, r2, r4
 8001554:	eb45 0303 	adc.w	r3, r5, r3
 8001558:	f04f 0000 	mov.w	r0, #0
 800155c:	f04f 0100 	mov.w	r1, #0
 8001560:	0299      	lsls	r1, r3, #10
 8001562:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001566:	0290      	lsls	r0, r2, #10
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	461a      	mov	r2, r3
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	f7fe feba 	bl	80002f0 <__aeabi_uldivmod>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4613      	mov	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	3301      	adds	r3, #1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	fbb2 f3f3 	udiv	r3, r2, r3
 800159c:	60bb      	str	r3, [r7, #8]
      break;
 800159e:	e002      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80015a2:	60bb      	str	r3, [r7, #8]
      break;
 80015a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015a6:	68bb      	ldr	r3, [r7, #8]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	00f42400 	.word	0x00f42400
 80015b8:	017d7840 	.word	0x017d7840

080015bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000000 	.word	0x20000000

080015d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015d8:	f7ff fff0 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	0a9b      	lsrs	r3, r3, #10
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	4903      	ldr	r1, [pc, #12]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	080049d8 	.word	0x080049d8

080015fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001600:	f7ff ffdc 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 8001604:	4602      	mov	r2, r0
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	0b5b      	lsrs	r3, r3, #13
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	4903      	ldr	r1, [pc, #12]	; (8001620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001612:	5ccb      	ldrb	r3, [r1, r3]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	080049d8 	.word	0x080049d8

08001624 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e03c      	b.n	80016b0 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f834 	bl	80016b8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f90f 	bl	800188c <USART_SetConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e01b      	b.n	80016b0 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001686:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001696:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fa71 	bl	8001b90 <USART_CheckIdleState>
 80016ae:	4603      	mov	r3, r0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_USART_MspInit>:
  * @brief Initialize the USART MSP.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_MspInit can be implemented in the user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	f040 8095 	bne.w	8001814 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_USART_Transmit+0x2a>
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e08d      	b.n	8001816 <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_USART_Transmit+0x3c>
 8001704:	2302      	movs	r3, #2
 8001706:	e086      	b.n	8001816 <HAL_USART_Transmit+0x14a>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2212      	movs	r2, #18
 800171a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800171e:	f7ff f821 	bl	8000764 <HAL_GetTick>
 8001722:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001738:	d108      	bne.n	800174c <HAL_USART_Transmit+0x80>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d104      	bne.n	800174c <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	e003      	b.n	8001754 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8001754:	e02a      	b.n	80017ac <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f85c 	bl	800181e <USART_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e052      	b.n	8001816 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10b      	bne.n	800178e <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	3302      	adds	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	e007      	b.n	800179e <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3301      	adds	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1cf      	bne.n	8001756 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2200      	movs	r2, #0
 80017be:	2140      	movs	r1, #64	; 0x40
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f82c 	bl	800181e <USART_WaitOnFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e022      	b.n	8001816 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2208      	movs	r2, #8
 80017de:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0208 	orr.w	r2, r2, #8
 80017ee:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0210 	orr.w	r2, r2, #16
 80017fe:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e000      	b.n	8001816 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001814:	2302      	movs	r3, #2
  }
}
 8001816:	4618      	mov	r0, r3
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	4613      	mov	r3, r2
 800182c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800182e:	e018      	b.n	8001862 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001836:	d014      	beq.n	8001862 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001838:	f7fe ff94 	bl	8000764 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	429a      	cmp	r2, r3
 8001846:	d302      	bcc.n	800184e <USART_WaitOnFlagUntilTimeout+0x30>
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e00f      	b.n	8001882 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69da      	ldr	r2, [r3, #28]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4013      	ands	r3, r2
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	429a      	cmp	r2, r3
 800187e:	d0d7      	beq.n	8001830 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4bae      	ldr	r3, [pc, #696]	; (8001b74 <USART_SetConfig+0x2e8>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	6979      	ldr	r1, [r7, #20]
 80018c2:	430b      	orrs	r3, r1
 80018c4:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80018c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ca:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4313      	orrs	r3, r2
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	430a      	orrs	r2, r1
 8001902:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a9b      	ldr	r2, [pc, #620]	; (8001b78 <USART_SetConfig+0x2ec>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d121      	bne.n	8001952 <USART_SetConfig+0xc6>
 800190e:	4b9b      	ldr	r3, [pc, #620]	; (8001b7c <USART_SetConfig+0x2f0>)
 8001910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b03      	cmp	r3, #3
 800191a:	d817      	bhi.n	800194c <USART_SetConfig+0xc0>
 800191c:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <USART_SetConfig+0x98>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	08001935 	.word	0x08001935
 8001928:	08001941 	.word	0x08001941
 800192c:	0800193b 	.word	0x0800193b
 8001930:	08001947 	.word	0x08001947
 8001934:	2301      	movs	r3, #1
 8001936:	77fb      	strb	r3, [r7, #31]
 8001938:	e096      	b.n	8001a68 <USART_SetConfig+0x1dc>
 800193a:	2302      	movs	r3, #2
 800193c:	77fb      	strb	r3, [r7, #31]
 800193e:	e093      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001940:	2304      	movs	r3, #4
 8001942:	77fb      	strb	r3, [r7, #31]
 8001944:	e090      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001946:	2308      	movs	r3, #8
 8001948:	77fb      	strb	r3, [r7, #31]
 800194a:	e08d      	b.n	8001a68 <USART_SetConfig+0x1dc>
 800194c:	2310      	movs	r3, #16
 800194e:	77fb      	strb	r3, [r7, #31]
 8001950:	e08a      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a8a      	ldr	r2, [pc, #552]	; (8001b80 <USART_SetConfig+0x2f4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d132      	bne.n	80019c2 <USART_SetConfig+0x136>
 800195c:	4b87      	ldr	r3, [pc, #540]	; (8001b7c <USART_SetConfig+0x2f0>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d828      	bhi.n	80019bc <USART_SetConfig+0x130>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <USART_SetConfig+0xe4>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019a5 	.word	0x080019a5
 8001974:	080019bd 	.word	0x080019bd
 8001978:	080019bd 	.word	0x080019bd
 800197c:	080019bd 	.word	0x080019bd
 8001980:	080019b1 	.word	0x080019b1
 8001984:	080019bd 	.word	0x080019bd
 8001988:	080019bd 	.word	0x080019bd
 800198c:	080019bd 	.word	0x080019bd
 8001990:	080019ab 	.word	0x080019ab
 8001994:	080019bd 	.word	0x080019bd
 8001998:	080019bd 	.word	0x080019bd
 800199c:	080019bd 	.word	0x080019bd
 80019a0:	080019b7 	.word	0x080019b7
 80019a4:	2300      	movs	r3, #0
 80019a6:	77fb      	strb	r3, [r7, #31]
 80019a8:	e05e      	b.n	8001a68 <USART_SetConfig+0x1dc>
 80019aa:	2302      	movs	r3, #2
 80019ac:	77fb      	strb	r3, [r7, #31]
 80019ae:	e05b      	b.n	8001a68 <USART_SetConfig+0x1dc>
 80019b0:	2304      	movs	r3, #4
 80019b2:	77fb      	strb	r3, [r7, #31]
 80019b4:	e058      	b.n	8001a68 <USART_SetConfig+0x1dc>
 80019b6:	2308      	movs	r3, #8
 80019b8:	77fb      	strb	r3, [r7, #31]
 80019ba:	e055      	b.n	8001a68 <USART_SetConfig+0x1dc>
 80019bc:	2310      	movs	r3, #16
 80019be:	77fb      	strb	r3, [r7, #31]
 80019c0:	e052      	b.n	8001a68 <USART_SetConfig+0x1dc>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6f      	ldr	r2, [pc, #444]	; (8001b84 <USART_SetConfig+0x2f8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d120      	bne.n	8001a0e <USART_SetConfig+0x182>
 80019cc:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <USART_SetConfig+0x2f0>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80019d6:	2b30      	cmp	r3, #48	; 0x30
 80019d8:	d013      	beq.n	8001a02 <USART_SetConfig+0x176>
 80019da:	2b30      	cmp	r3, #48	; 0x30
 80019dc:	d814      	bhi.n	8001a08 <USART_SetConfig+0x17c>
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d009      	beq.n	80019f6 <USART_SetConfig+0x16a>
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d810      	bhi.n	8001a08 <USART_SetConfig+0x17c>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <USART_SetConfig+0x164>
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d006      	beq.n	80019fc <USART_SetConfig+0x170>
 80019ee:	e00b      	b.n	8001a08 <USART_SetConfig+0x17c>
 80019f0:	2300      	movs	r3, #0
 80019f2:	77fb      	strb	r3, [r7, #31]
 80019f4:	e038      	b.n	8001a68 <USART_SetConfig+0x1dc>
 80019f6:	2302      	movs	r3, #2
 80019f8:	77fb      	strb	r3, [r7, #31]
 80019fa:	e035      	b.n	8001a68 <USART_SetConfig+0x1dc>
 80019fc:	2304      	movs	r3, #4
 80019fe:	77fb      	strb	r3, [r7, #31]
 8001a00:	e032      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001a02:	2308      	movs	r3, #8
 8001a04:	77fb      	strb	r3, [r7, #31]
 8001a06:	e02f      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001a08:	2310      	movs	r3, #16
 8001a0a:	77fb      	strb	r3, [r7, #31]
 8001a0c:	e02c      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5d      	ldr	r2, [pc, #372]	; (8001b88 <USART_SetConfig+0x2fc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d125      	bne.n	8001a64 <USART_SetConfig+0x1d8>
 8001a18:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <USART_SetConfig+0x2f0>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a26:	d017      	beq.n	8001a58 <USART_SetConfig+0x1cc>
 8001a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a2c:	d817      	bhi.n	8001a5e <USART_SetConfig+0x1d2>
 8001a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a32:	d00b      	beq.n	8001a4c <USART_SetConfig+0x1c0>
 8001a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a38:	d811      	bhi.n	8001a5e <USART_SetConfig+0x1d2>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <USART_SetConfig+0x1ba>
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a42:	d006      	beq.n	8001a52 <USART_SetConfig+0x1c6>
 8001a44:	e00b      	b.n	8001a5e <USART_SetConfig+0x1d2>
 8001a46:	2301      	movs	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]
 8001a4a:	e00d      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	77fb      	strb	r3, [r7, #31]
 8001a50:	e00a      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001a52:	2304      	movs	r3, #4
 8001a54:	77fb      	strb	r3, [r7, #31]
 8001a56:	e007      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001a58:	2308      	movs	r3, #8
 8001a5a:	77fb      	strb	r3, [r7, #31]
 8001a5c:	e004      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001a5e:	2310      	movs	r3, #16
 8001a60:	77fb      	strb	r3, [r7, #31]
 8001a62:	e001      	b.n	8001a68 <USART_SetConfig+0x1dc>
 8001a64:	2310      	movs	r3, #16
 8001a66:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8001a68:	7ffb      	ldrb	r3, [r7, #31]
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d857      	bhi.n	8001b1e <USART_SetConfig+0x292>
 8001a6e:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <USART_SetConfig+0x1e8>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a99 	.word	0x08001a99
 8001a78:	08001ab7 	.word	0x08001ab7
 8001a7c:	08001ad5 	.word	0x08001ad5
 8001a80:	08001b1f 	.word	0x08001b1f
 8001a84:	08001aeb 	.word	0x08001aeb
 8001a88:	08001b1f 	.word	0x08001b1f
 8001a8c:	08001b1f 	.word	0x08001b1f
 8001a90:	08001b1f 	.word	0x08001b1f
 8001a94:	08001b09 	.word	0x08001b09
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a98:	f7ff fd9c 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	005a      	lsls	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	441a      	add	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	61bb      	str	r3, [r7, #24]
      break;
 8001ab4:	e036      	b.n	8001b24 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ab6:	f7ff fda1 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001aba:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	005a      	lsls	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	085b      	lsrs	r3, r3, #1
 8001ac6:	441a      	add	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad0:	61bb      	str	r3, [r7, #24]
      break;
 8001ad2:	e027      	b.n	8001b24 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	085a      	lsrs	r2, r3, #1
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <USART_SetConfig+0x300>)
 8001adc:	4413      	add	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6852      	ldr	r2, [r2, #4]
 8001ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      break;
 8001ae8:	e01c      	b.n	8001b24 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8001aea:	f7ff fcb1 	bl	8001450 <HAL_RCC_GetSysClockFreq>
 8001aee:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	005a      	lsls	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	441a      	add	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	61bb      	str	r3, [r7, #24]
      break;
 8001b06:	e00d      	b.n	8001b24 <USART_SetConfig+0x298>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	61bb      	str	r3, [r7, #24]
      break;
 8001b1c:	e002      	b.n	8001b24 <USART_SetConfig+0x298>
    default:
      ret = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	77bb      	strb	r3, [r7, #30]
      break;
 8001b22:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d916      	bls.n	8001b58 <USART_SetConfig+0x2cc>
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d212      	bcs.n	8001b58 <USART_SetConfig+0x2cc>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f023 030f 	bic.w	r3, r3, #15
 8001b3a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	89fa      	ldrh	r2, [r7, #14]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	e001      	b.n	8001b5c <USART_SetConfig+0x2d0>
  }
  else
  {
    ret = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8001b68:	7fbb      	ldrb	r3, [r7, #30]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	efff69f3 	.word	0xefff69f3
 8001b78:	40011000 	.word	0x40011000
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40004400 	.word	0x40004400
 8001b84:	40004800 	.word	0x40004800
 8001b88:	40011400 	.word	0x40011400
 8001b8c:	01e84800 	.word	0x01e84800

08001b90 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001b9e:	f7fe fde1 	bl	8000764 <HAL_GetTick>
 8001ba2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d10e      	bne.n	8001bd0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fe2c 	bl	800181e <USART_WaitOnFlagUntilTimeout>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e01e      	b.n	8001c0e <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d10e      	bne.n	8001bfc <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fe16 	bl	800181e <USART_WaitOnFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e008      	b.n	8001c0e <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <gpio_LED_Green_init>:
#include "gpio.h"



void gpio_LED_Green_init()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <gpio_LED_Green_init+0x40>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <gpio_LED_Green_init+0x40>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <gpio_LED_Green_init+0x40>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef led_green_t;
    led_green_t.Pin = GREEN_LED;
 8001c36:	2301      	movs	r3, #1
 8001c38:	607b      	str	r3, [r7, #4]
    led_green_t.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
    led_green_t.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
    led_green_t.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c42:	2302      	movs	r3, #2
 8001c44:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &led_green_t);
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4804      	ldr	r0, [pc, #16]	; (8001c5c <gpio_LED_Green_init+0x44>)
 8001c4c:	f7fe fea0 	bl	8000990 <HAL_GPIO_Init>
}
 8001c50:	bf00      	nop
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <gpio_LED_Blue_init>:
void gpio_LED_Blue_init()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <gpio_LED_Blue_init+0x40>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <gpio_LED_Blue_init+0x40>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <gpio_LED_Blue_init+0x40>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef led_blue_t;
    led_blue_t.Pin = BLUE_LED;
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	607b      	str	r3, [r7, #4]
    led_blue_t.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
    led_blue_t.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
    led_blue_t.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &led_blue_t);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <gpio_LED_Blue_init+0x44>)
 8001c94:	f7fe fe7c 	bl	8000990 <HAL_GPIO_Init>
}
 8001c98:	bf00      	nop
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020400 	.word	0x40020400

08001ca8 <gpio_LED_Red_init>:
void gpio_LED_Red_init()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <gpio_LED_Red_init+0x44>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <gpio_LED_Red_init+0x44>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <gpio_LED_Red_init+0x44>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef led_red_t;
    led_red_t.Pin = RED_LED;
 8001cc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cca:	607b      	str	r3, [r7, #4]
    led_red_t.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
    led_red_t.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
    led_red_t.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &led_red_t);
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <gpio_LED_Red_init+0x48>)
 8001cde:	f7fe fe57 	bl	8000990 <HAL_GPIO_Init>

}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <gpio_LED_init_all>:

void gpio_LED_init_all()
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0

  gpio_LED_Green_init();
 8001cf8:	f7ff ff8e 	bl	8001c18 <gpio_LED_Green_init>
  gpio_LED_Blue_init();
 8001cfc:	f7ff ffb0 	bl	8001c60 <gpio_LED_Blue_init>
  gpio_LED_Red_init();
 8001d00:	f7ff ffd2 	bl	8001ca8 <gpio_LED_Red_init>
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <gpio_LED_Green_Toggle>:

void gpio_LED_Green_Toggle()
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, GREEN_LED);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4802      	ldr	r0, [pc, #8]	; (8001d18 <gpio_LED_Green_Toggle+0x10>)
 8001d10:	f7fe ffea 	bl	8000ce8 <HAL_GPIO_TogglePin>
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40020400 	.word	0x40020400

08001d1c <gpio_LED_Blue_Toggle>:

void gpio_LED_Blue_Toggle()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, BLUE_LED);
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	4802      	ldr	r0, [pc, #8]	; (8001d2c <gpio_LED_Blue_Toggle+0x10>)
 8001d24:	f7fe ffe0 	bl	8000ce8 <HAL_GPIO_TogglePin>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40020400 	.word	0x40020400

08001d30 <gpio_LED_Red_Toggle>:

void gpio_LED_Red_Toggle()
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOB, RED_LED);
 8001d34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <gpio_LED_Red_Toggle+0x14>)
 8001d3a:	f7fe ffd5 	bl	8000ce8 <HAL_GPIO_TogglePin>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40020400 	.word	0x40020400

08001d48 <rcc_systemClockConfig>:
 */

#include "rcc.h"

bool rcc_systemClockConfig()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b092      	sub	sp, #72	; 0x48
 8001d4c:	af00      	add	r7, sp, #0


  /*
   * Oscillator initialization   *
   */
    RCC_OscInitTypeDef oscInit_t = {0};
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	2234      	movs	r2, #52	; 0x34
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f8fa 	bl	8001f50 <memset>



    oscInit_t.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	617b      	str	r3, [r7, #20]
    oscInit_t.HSIState = RCC_HSI_ON;
 8001d60:	2301      	movs	r3, #1
 8001d62:	623b      	str	r3, [r7, #32]
    oscInit_t.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d64:	2310      	movs	r3, #16
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24

    oscInit_t.PLL.PLLState = RCC_PLL_ON;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    oscInit_t.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30

    oscInit_t.PLL.PLLM = 8;
 8001d70:	2308      	movs	r3, #8
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
    oscInit_t.PLL.PLLN = 216;
 8001d74:	23d8      	movs	r3, #216	; 0xd8
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
    oscInit_t.PLL.PLLP = RCC_PLLP_DIV2;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    oscInit_t.PLL.PLLQ = 2;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	643b      	str	r3, [r7, #64]	; 0x40
    oscInit_t.PLL.PLLR = 2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_RCC_OscConfig(&oscInit_t)!= HAL_OK)
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe ffc7 	bl	8000d1c <HAL_RCC_OscConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <rcc_systemClockConfig+0x50>
      {
	return false;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e01d      	b.n	8001dd4 <rcc_systemClockConfig+0x8c>

    /**
     * clock initialization
     */

    RCC_ClkInitTypeDef oscClk_t = {0};
 8001d98:	463b      	mov	r3, r7
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]
    oscClk_t.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001da6:	230f      	movs	r3, #15
 8001da8:	603b      	str	r3, [r7, #0]
    oscClk_t.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001daa:	2302      	movs	r3, #2
 8001dac:	607b      	str	r3, [r7, #4]
    oscClk_t.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
    oscClk_t.APB1CLKDivider = RCC_HCLK_DIV4;
 8001db2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001db6:	60fb      	str	r3, [r7, #12]
    oscClk_t.APB2CLKDivider = RCC_HCLK_DIV2;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&oscClk_t, FLASH_LATENCY_7) != HAL_OK){
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2107      	movs	r1, #7
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fa58 	bl	8001278 <HAL_RCC_ClockConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <rcc_systemClockConfig+0x8a>
	return false;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <rcc_systemClockConfig+0x8c>
    }
    return true;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3748      	adds	r7, #72	; 0x48
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <uart_UART3_GPIO_config>:
#include "uart.h"

USART_HandleTypeDef husart3;

void uart_UART3_GPIO_config()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
     * RX = PD9
     * 1 Enable cllock for Port D
     * 2: set GPIO_TypeDef to corresponding values
     */

     __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <uart_UART3_GPIO_config+0x64>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <uart_UART3_GPIO_config+0x64>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <uart_UART3_GPIO_config+0x64>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
     GPIO_InitTypeDef gpio_tx_t;

     gpio_tx_t.Pin = GPIO_PIN_8;
 8001dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dfe:	61fb      	str	r3, [r7, #28]
     gpio_tx_t.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	623b      	str	r3, [r7, #32]
     gpio_tx_t.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e04:	2302      	movs	r3, #2
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
     gpio_tx_t.Alternate = GPIO_AF7_USART3;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
     HAL_GPIO_Init(GPIOD, &gpio_tx_t);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	480c      	ldr	r0, [pc, #48]	; (8001e44 <uart_UART3_GPIO_config+0x68>)
 8001e14:	f7fe fdbc 	bl	8000990 <HAL_GPIO_Init>

     GPIO_InitTypeDef gpio_rx_t;

     gpio_rx_t.Pin = GPIO_PIN_9;
 8001e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1c:	60bb      	str	r3, [r7, #8]
     gpio_rx_t.Mode = GPIO_MODE_INPUT;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
     gpio_rx_t.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
     gpio_rx_t.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e26:	2302      	movs	r3, #2
 8001e28:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOD, &gpio_rx_t);
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <uart_UART3_GPIO_config+0x68>)
 8001e32:	f7fe fdad 	bl	8000990 <HAL_GPIO_Init>




}
 8001e36:	bf00      	nop
 8001e38:	3730      	adds	r7, #48	; 0x30
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020c00 	.word	0x40020c00

08001e48 <uart_UART3_config>:

bool uart_UART3_config()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <uart_UART3_config+0x60>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <uart_UART3_config+0x60>)
 8001e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <uart_UART3_config+0x60>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

    husart3.Instance = USART3;
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <uart_UART3_config+0x64>)
 8001e68:	4a11      	ldr	r2, [pc, #68]	; (8001eb0 <uart_UART3_config+0x68>)
 8001e6a:	601a      	str	r2, [r3, #0]
    husart3.Init.BaudRate = 115200;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <uart_UART3_config+0x64>)
 8001e6e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e72:	605a      	str	r2, [r3, #4]
    husart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <uart_UART3_config+0x64>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    husart3.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <uart_UART3_config+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
    husart3.Init.StopBits = UART_STOPBITS_1;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <uart_UART3_config+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
    husart3.Init.Mode= UART_MODE_TX_RX;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <uart_UART3_config+0x64>)
 8001e88:	220c      	movs	r2, #12
 8001e8a:	615a      	str	r2, [r3, #20]

    if(HAL_USART_Init(&husart3) != HAL_OK)
 8001e8c:	4807      	ldr	r0, [pc, #28]	; (8001eac <uart_UART3_config+0x64>)
 8001e8e:	f7ff fbc9 	bl	8001624 <HAL_USART_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <uart_UART3_config+0x54>
      {
	return false;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <uart_UART3_config+0x56>
      }
    return true;
 8001e9c:	2301      	movs	r3, #1

}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	20000208 	.word	0x20000208
 8001eb0:	40004800 	.word	0x40004800

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eba:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ed0:	4c0b      	ldr	r4, [pc, #44]	; (8001f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ede:	f7fe fbc7 	bl	8000670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f000 f811 	bl	8001f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7fe fb95 	bl	8000614 <main>
  bx  lr    
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ef8:	08004dd4 	.word	0x08004dd4
  ldr r2, =_sbss
 8001efc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f00:	20000268 	.word	0x20000268

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>
	...

08001f08 <__libc_init_array>:
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	4d0d      	ldr	r5, [pc, #52]	; (8001f40 <__libc_init_array+0x38>)
 8001f0c:	4c0d      	ldr	r4, [pc, #52]	; (8001f44 <__libc_init_array+0x3c>)
 8001f0e:	1b64      	subs	r4, r4, r5
 8001f10:	10a4      	asrs	r4, r4, #2
 8001f12:	2600      	movs	r6, #0
 8001f14:	42a6      	cmp	r6, r4
 8001f16:	d109      	bne.n	8001f2c <__libc_init_array+0x24>
 8001f18:	4d0b      	ldr	r5, [pc, #44]	; (8001f48 <__libc_init_array+0x40>)
 8001f1a:	4c0c      	ldr	r4, [pc, #48]	; (8001f4c <__libc_init_array+0x44>)
 8001f1c:	f002 fd34 	bl	8004988 <_init>
 8001f20:	1b64      	subs	r4, r4, r5
 8001f22:	10a4      	asrs	r4, r4, #2
 8001f24:	2600      	movs	r6, #0
 8001f26:	42a6      	cmp	r6, r4
 8001f28:	d105      	bne.n	8001f36 <__libc_init_array+0x2e>
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
 8001f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f30:	4798      	blx	r3
 8001f32:	3601      	adds	r6, #1
 8001f34:	e7ee      	b.n	8001f14 <__libc_init_array+0xc>
 8001f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f3a:	4798      	blx	r3
 8001f3c:	3601      	adds	r6, #1
 8001f3e:	e7f2      	b.n	8001f26 <__libc_init_array+0x1e>
 8001f40:	08004dcc 	.word	0x08004dcc
 8001f44:	08004dcc 	.word	0x08004dcc
 8001f48:	08004dcc 	.word	0x08004dcc
 8001f4c:	08004dd0 	.word	0x08004dd0

08001f50 <memset>:
 8001f50:	4402      	add	r2, r0
 8001f52:	4603      	mov	r3, r0
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d100      	bne.n	8001f5a <memset+0xa>
 8001f58:	4770      	bx	lr
 8001f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f5e:	e7f9      	b.n	8001f54 <memset+0x4>

08001f60 <__cvt>:
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	ed2d 8b02 	vpush	{d8}
 8001f66:	eeb0 8b40 	vmov.f64	d8, d0
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	4617      	mov	r7, r2
 8001f6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001f70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001f72:	ee18 2a90 	vmov	r2, s17
 8001f76:	f025 0520 	bic.w	r5, r5, #32
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	bfb6      	itet	lt
 8001f7e:	222d      	movlt	r2, #45	; 0x2d
 8001f80:	2200      	movge	r2, #0
 8001f82:	eeb1 8b40 	vneglt.f64	d8, d0
 8001f86:	2d46      	cmp	r5, #70	; 0x46
 8001f88:	460c      	mov	r4, r1
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	d004      	beq.n	8001f98 <__cvt+0x38>
 8001f8e:	2d45      	cmp	r5, #69	; 0x45
 8001f90:	d100      	bne.n	8001f94 <__cvt+0x34>
 8001f92:	3401      	adds	r4, #1
 8001f94:	2102      	movs	r1, #2
 8001f96:	e000      	b.n	8001f9a <__cvt+0x3a>
 8001f98:	2103      	movs	r1, #3
 8001f9a:	ab03      	add	r3, sp, #12
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	ab02      	add	r3, sp, #8
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	4633      	mov	r3, r6
 8001fa6:	eeb0 0b48 	vmov.f64	d0, d8
 8001faa:	f000 fdf5 	bl	8002b98 <_dtoa_r>
 8001fae:	2d47      	cmp	r5, #71	; 0x47
 8001fb0:	d109      	bne.n	8001fc6 <__cvt+0x66>
 8001fb2:	07fb      	lsls	r3, r7, #31
 8001fb4:	d407      	bmi.n	8001fc6 <__cvt+0x66>
 8001fb6:	9b03      	ldr	r3, [sp, #12]
 8001fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001fba:	1a1b      	subs	r3, r3, r0
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	b005      	add	sp, #20
 8001fc0:	ecbd 8b02 	vpop	{d8}
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	2d46      	cmp	r5, #70	; 0x46
 8001fc8:	eb00 0204 	add.w	r2, r0, r4
 8001fcc:	d10c      	bne.n	8001fe8 <__cvt+0x88>
 8001fce:	7803      	ldrb	r3, [r0, #0]
 8001fd0:	2b30      	cmp	r3, #48	; 0x30
 8001fd2:	d107      	bne.n	8001fe4 <__cvt+0x84>
 8001fd4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	bf1c      	itt	ne
 8001fde:	f1c4 0401 	rsbne	r4, r4, #1
 8001fe2:	6034      	strne	r4, [r6, #0]
 8001fe4:	6833      	ldr	r3, [r6, #0]
 8001fe6:	441a      	add	r2, r3
 8001fe8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	bf08      	it	eq
 8001ff2:	9203      	streq	r2, [sp, #12]
 8001ff4:	2130      	movs	r1, #48	; 0x30
 8001ff6:	9b03      	ldr	r3, [sp, #12]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d2dc      	bcs.n	8001fb6 <__cvt+0x56>
 8001ffc:	1c5c      	adds	r4, r3, #1
 8001ffe:	9403      	str	r4, [sp, #12]
 8002000:	7019      	strb	r1, [r3, #0]
 8002002:	e7f8      	b.n	8001ff6 <__cvt+0x96>

08002004 <__exponent>:
 8002004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002006:	4603      	mov	r3, r0
 8002008:	2900      	cmp	r1, #0
 800200a:	bfb8      	it	lt
 800200c:	4249      	neglt	r1, r1
 800200e:	f803 2b02 	strb.w	r2, [r3], #2
 8002012:	bfb4      	ite	lt
 8002014:	222d      	movlt	r2, #45	; 0x2d
 8002016:	222b      	movge	r2, #43	; 0x2b
 8002018:	2909      	cmp	r1, #9
 800201a:	7042      	strb	r2, [r0, #1]
 800201c:	dd2a      	ble.n	8002074 <__exponent+0x70>
 800201e:	f10d 0407 	add.w	r4, sp, #7
 8002022:	46a4      	mov	ip, r4
 8002024:	270a      	movs	r7, #10
 8002026:	46a6      	mov	lr, r4
 8002028:	460a      	mov	r2, r1
 800202a:	fb91 f6f7 	sdiv	r6, r1, r7
 800202e:	fb07 1516 	mls	r5, r7, r6, r1
 8002032:	3530      	adds	r5, #48	; 0x30
 8002034:	2a63      	cmp	r2, #99	; 0x63
 8002036:	f104 34ff 	add.w	r4, r4, #4294967295
 800203a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800203e:	4631      	mov	r1, r6
 8002040:	dcf1      	bgt.n	8002026 <__exponent+0x22>
 8002042:	3130      	adds	r1, #48	; 0x30
 8002044:	f1ae 0502 	sub.w	r5, lr, #2
 8002048:	f804 1c01 	strb.w	r1, [r4, #-1]
 800204c:	1c44      	adds	r4, r0, #1
 800204e:	4629      	mov	r1, r5
 8002050:	4561      	cmp	r1, ip
 8002052:	d30a      	bcc.n	800206a <__exponent+0x66>
 8002054:	f10d 0209 	add.w	r2, sp, #9
 8002058:	eba2 020e 	sub.w	r2, r2, lr
 800205c:	4565      	cmp	r5, ip
 800205e:	bf88      	it	hi
 8002060:	2200      	movhi	r2, #0
 8002062:	4413      	add	r3, r2
 8002064:	1a18      	subs	r0, r3, r0
 8002066:	b003      	add	sp, #12
 8002068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800206e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002072:	e7ed      	b.n	8002050 <__exponent+0x4c>
 8002074:	2330      	movs	r3, #48	; 0x30
 8002076:	3130      	adds	r1, #48	; 0x30
 8002078:	7083      	strb	r3, [r0, #2]
 800207a:	70c1      	strb	r1, [r0, #3]
 800207c:	1d03      	adds	r3, r0, #4
 800207e:	e7f1      	b.n	8002064 <__exponent+0x60>

08002080 <_printf_float>:
 8002080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002084:	b08b      	sub	sp, #44	; 0x2c
 8002086:	460c      	mov	r4, r1
 8002088:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800208c:	4616      	mov	r6, r2
 800208e:	461f      	mov	r7, r3
 8002090:	4605      	mov	r5, r0
 8002092:	f001 fcbb 	bl	8003a0c <_localeconv_r>
 8002096:	f8d0 b000 	ldr.w	fp, [r0]
 800209a:	4658      	mov	r0, fp
 800209c:	f7fe f8d0 	bl	8000240 <strlen>
 80020a0:	2300      	movs	r3, #0
 80020a2:	9308      	str	r3, [sp, #32]
 80020a4:	f8d8 3000 	ldr.w	r3, [r8]
 80020a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80020ac:	6822      	ldr	r2, [r4, #0]
 80020ae:	3307      	adds	r3, #7
 80020b0:	f023 0307 	bic.w	r3, r3, #7
 80020b4:	f103 0108 	add.w	r1, r3, #8
 80020b8:	f8c8 1000 	str.w	r1, [r8]
 80020bc:	4682      	mov	sl, r0
 80020be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80020c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8002328 <_printf_float+0x2a8>
 80020ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80020ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80020d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	dd24      	ble.n	8002126 <_printf_float+0xa6>
 80020dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	d502      	bpl.n	80020ec <_printf_float+0x6c>
 80020e6:	232d      	movs	r3, #45	; 0x2d
 80020e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020ec:	4b90      	ldr	r3, [pc, #576]	; (8002330 <_printf_float+0x2b0>)
 80020ee:	4891      	ldr	r0, [pc, #580]	; (8002334 <_printf_float+0x2b4>)
 80020f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80020f4:	bf94      	ite	ls
 80020f6:	4698      	movls	r8, r3
 80020f8:	4680      	movhi	r8, r0
 80020fa:	2303      	movs	r3, #3
 80020fc:	6123      	str	r3, [r4, #16]
 80020fe:	f022 0204 	bic.w	r2, r2, #4
 8002102:	2300      	movs	r3, #0
 8002104:	6022      	str	r2, [r4, #0]
 8002106:	9304      	str	r3, [sp, #16]
 8002108:	9700      	str	r7, [sp, #0]
 800210a:	4633      	mov	r3, r6
 800210c:	aa09      	add	r2, sp, #36	; 0x24
 800210e:	4621      	mov	r1, r4
 8002110:	4628      	mov	r0, r5
 8002112:	f000 f9d3 	bl	80024bc <_printf_common>
 8002116:	3001      	adds	r0, #1
 8002118:	f040 808a 	bne.w	8002230 <_printf_float+0x1b0>
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	b00b      	add	sp, #44	; 0x2c
 8002122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002126:	eeb4 0b40 	vcmp.f64	d0, d0
 800212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212e:	d709      	bvc.n	8002144 <_printf_float+0xc4>
 8002130:	ee10 3a90 	vmov	r3, s1
 8002134:	2b00      	cmp	r3, #0
 8002136:	bfbc      	itt	lt
 8002138:	232d      	movlt	r3, #45	; 0x2d
 800213a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800213e:	487e      	ldr	r0, [pc, #504]	; (8002338 <_printf_float+0x2b8>)
 8002140:	4b7e      	ldr	r3, [pc, #504]	; (800233c <_printf_float+0x2bc>)
 8002142:	e7d5      	b.n	80020f0 <_printf_float+0x70>
 8002144:	6863      	ldr	r3, [r4, #4]
 8002146:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800214a:	9104      	str	r1, [sp, #16]
 800214c:	1c59      	adds	r1, r3, #1
 800214e:	d13c      	bne.n	80021ca <_printf_float+0x14a>
 8002150:	2306      	movs	r3, #6
 8002152:	6063      	str	r3, [r4, #4]
 8002154:	2300      	movs	r3, #0
 8002156:	9303      	str	r3, [sp, #12]
 8002158:	ab08      	add	r3, sp, #32
 800215a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800215e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002162:	ab07      	add	r3, sp, #28
 8002164:	6861      	ldr	r1, [r4, #4]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	6022      	str	r2, [r4, #0]
 800216a:	f10d 031b 	add.w	r3, sp, #27
 800216e:	4628      	mov	r0, r5
 8002170:	f7ff fef6 	bl	8001f60 <__cvt>
 8002174:	9b04      	ldr	r3, [sp, #16]
 8002176:	9907      	ldr	r1, [sp, #28]
 8002178:	2b47      	cmp	r3, #71	; 0x47
 800217a:	4680      	mov	r8, r0
 800217c:	d108      	bne.n	8002190 <_printf_float+0x110>
 800217e:	1cc8      	adds	r0, r1, #3
 8002180:	db02      	blt.n	8002188 <_printf_float+0x108>
 8002182:	6863      	ldr	r3, [r4, #4]
 8002184:	4299      	cmp	r1, r3
 8002186:	dd41      	ble.n	800220c <_printf_float+0x18c>
 8002188:	f1a9 0902 	sub.w	r9, r9, #2
 800218c:	fa5f f989 	uxtb.w	r9, r9
 8002190:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002194:	d820      	bhi.n	80021d8 <_printf_float+0x158>
 8002196:	3901      	subs	r1, #1
 8002198:	464a      	mov	r2, r9
 800219a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800219e:	9107      	str	r1, [sp, #28]
 80021a0:	f7ff ff30 	bl	8002004 <__exponent>
 80021a4:	9a08      	ldr	r2, [sp, #32]
 80021a6:	9004      	str	r0, [sp, #16]
 80021a8:	1813      	adds	r3, r2, r0
 80021aa:	2a01      	cmp	r2, #1
 80021ac:	6123      	str	r3, [r4, #16]
 80021ae:	dc02      	bgt.n	80021b6 <_printf_float+0x136>
 80021b0:	6822      	ldr	r2, [r4, #0]
 80021b2:	07d2      	lsls	r2, r2, #31
 80021b4:	d501      	bpl.n	80021ba <_printf_float+0x13a>
 80021b6:	3301      	adds	r3, #1
 80021b8:	6123      	str	r3, [r4, #16]
 80021ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0a2      	beq.n	8002108 <_printf_float+0x88>
 80021c2:	232d      	movs	r3, #45	; 0x2d
 80021c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021c8:	e79e      	b.n	8002108 <_printf_float+0x88>
 80021ca:	9904      	ldr	r1, [sp, #16]
 80021cc:	2947      	cmp	r1, #71	; 0x47
 80021ce:	d1c1      	bne.n	8002154 <_printf_float+0xd4>
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1bf      	bne.n	8002154 <_printf_float+0xd4>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e7bc      	b.n	8002152 <_printf_float+0xd2>
 80021d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80021dc:	d118      	bne.n	8002210 <_printf_float+0x190>
 80021de:	2900      	cmp	r1, #0
 80021e0:	6863      	ldr	r3, [r4, #4]
 80021e2:	dd0b      	ble.n	80021fc <_printf_float+0x17c>
 80021e4:	6121      	str	r1, [r4, #16]
 80021e6:	b913      	cbnz	r3, 80021ee <_printf_float+0x16e>
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	07d0      	lsls	r0, r2, #31
 80021ec:	d502      	bpl.n	80021f4 <_printf_float+0x174>
 80021ee:	3301      	adds	r3, #1
 80021f0:	440b      	add	r3, r1
 80021f2:	6123      	str	r3, [r4, #16]
 80021f4:	2300      	movs	r3, #0
 80021f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80021f8:	9304      	str	r3, [sp, #16]
 80021fa:	e7de      	b.n	80021ba <_printf_float+0x13a>
 80021fc:	b913      	cbnz	r3, 8002204 <_printf_float+0x184>
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	07d2      	lsls	r2, r2, #31
 8002202:	d501      	bpl.n	8002208 <_printf_float+0x188>
 8002204:	3302      	adds	r3, #2
 8002206:	e7f4      	b.n	80021f2 <_printf_float+0x172>
 8002208:	2301      	movs	r3, #1
 800220a:	e7f2      	b.n	80021f2 <_printf_float+0x172>
 800220c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002210:	9b08      	ldr	r3, [sp, #32]
 8002212:	4299      	cmp	r1, r3
 8002214:	db05      	blt.n	8002222 <_printf_float+0x1a2>
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	6121      	str	r1, [r4, #16]
 800221a:	07d8      	lsls	r0, r3, #31
 800221c:	d5ea      	bpl.n	80021f4 <_printf_float+0x174>
 800221e:	1c4b      	adds	r3, r1, #1
 8002220:	e7e7      	b.n	80021f2 <_printf_float+0x172>
 8002222:	2900      	cmp	r1, #0
 8002224:	bfd4      	ite	le
 8002226:	f1c1 0202 	rsble	r2, r1, #2
 800222a:	2201      	movgt	r2, #1
 800222c:	4413      	add	r3, r2
 800222e:	e7e0      	b.n	80021f2 <_printf_float+0x172>
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	055a      	lsls	r2, r3, #21
 8002234:	d407      	bmi.n	8002246 <_printf_float+0x1c6>
 8002236:	6923      	ldr	r3, [r4, #16]
 8002238:	4642      	mov	r2, r8
 800223a:	4631      	mov	r1, r6
 800223c:	4628      	mov	r0, r5
 800223e:	47b8      	blx	r7
 8002240:	3001      	adds	r0, #1
 8002242:	d12a      	bne.n	800229a <_printf_float+0x21a>
 8002244:	e76a      	b.n	800211c <_printf_float+0x9c>
 8002246:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800224a:	f240 80e2 	bls.w	8002412 <_printf_float+0x392>
 800224e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002252:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	d133      	bne.n	80022c4 <_printf_float+0x244>
 800225c:	4a38      	ldr	r2, [pc, #224]	; (8002340 <_printf_float+0x2c0>)
 800225e:	2301      	movs	r3, #1
 8002260:	4631      	mov	r1, r6
 8002262:	4628      	mov	r0, r5
 8002264:	47b8      	blx	r7
 8002266:	3001      	adds	r0, #1
 8002268:	f43f af58 	beq.w	800211c <_printf_float+0x9c>
 800226c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002270:	429a      	cmp	r2, r3
 8002272:	db02      	blt.n	800227a <_printf_float+0x1fa>
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	07d8      	lsls	r0, r3, #31
 8002278:	d50f      	bpl.n	800229a <_printf_float+0x21a>
 800227a:	4653      	mov	r3, sl
 800227c:	465a      	mov	r2, fp
 800227e:	4631      	mov	r1, r6
 8002280:	4628      	mov	r0, r5
 8002282:	47b8      	blx	r7
 8002284:	3001      	adds	r0, #1
 8002286:	f43f af49 	beq.w	800211c <_printf_float+0x9c>
 800228a:	f04f 0800 	mov.w	r8, #0
 800228e:	f104 091a 	add.w	r9, r4, #26
 8002292:	9b08      	ldr	r3, [sp, #32]
 8002294:	3b01      	subs	r3, #1
 8002296:	4543      	cmp	r3, r8
 8002298:	dc09      	bgt.n	80022ae <_printf_float+0x22e>
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	079b      	lsls	r3, r3, #30
 800229e:	f100 8108 	bmi.w	80024b2 <_printf_float+0x432>
 80022a2:	68e0      	ldr	r0, [r4, #12]
 80022a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022a6:	4298      	cmp	r0, r3
 80022a8:	bfb8      	it	lt
 80022aa:	4618      	movlt	r0, r3
 80022ac:	e738      	b.n	8002120 <_printf_float+0xa0>
 80022ae:	2301      	movs	r3, #1
 80022b0:	464a      	mov	r2, r9
 80022b2:	4631      	mov	r1, r6
 80022b4:	4628      	mov	r0, r5
 80022b6:	47b8      	blx	r7
 80022b8:	3001      	adds	r0, #1
 80022ba:	f43f af2f 	beq.w	800211c <_printf_float+0x9c>
 80022be:	f108 0801 	add.w	r8, r8, #1
 80022c2:	e7e6      	b.n	8002292 <_printf_float+0x212>
 80022c4:	9b07      	ldr	r3, [sp, #28]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	dc3c      	bgt.n	8002344 <_printf_float+0x2c4>
 80022ca:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <_printf_float+0x2c0>)
 80022cc:	2301      	movs	r3, #1
 80022ce:	4631      	mov	r1, r6
 80022d0:	4628      	mov	r0, r5
 80022d2:	47b8      	blx	r7
 80022d4:	3001      	adds	r0, #1
 80022d6:	f43f af21 	beq.w	800211c <_printf_float+0x9c>
 80022da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80022de:	4313      	orrs	r3, r2
 80022e0:	d102      	bne.n	80022e8 <_printf_float+0x268>
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	07d9      	lsls	r1, r3, #31
 80022e6:	d5d8      	bpl.n	800229a <_printf_float+0x21a>
 80022e8:	4653      	mov	r3, sl
 80022ea:	465a      	mov	r2, fp
 80022ec:	4631      	mov	r1, r6
 80022ee:	4628      	mov	r0, r5
 80022f0:	47b8      	blx	r7
 80022f2:	3001      	adds	r0, #1
 80022f4:	f43f af12 	beq.w	800211c <_printf_float+0x9c>
 80022f8:	f04f 0900 	mov.w	r9, #0
 80022fc:	f104 0a1a 	add.w	sl, r4, #26
 8002300:	9b07      	ldr	r3, [sp, #28]
 8002302:	425b      	negs	r3, r3
 8002304:	454b      	cmp	r3, r9
 8002306:	dc01      	bgt.n	800230c <_printf_float+0x28c>
 8002308:	9b08      	ldr	r3, [sp, #32]
 800230a:	e795      	b.n	8002238 <_printf_float+0x1b8>
 800230c:	2301      	movs	r3, #1
 800230e:	4652      	mov	r2, sl
 8002310:	4631      	mov	r1, r6
 8002312:	4628      	mov	r0, r5
 8002314:	47b8      	blx	r7
 8002316:	3001      	adds	r0, #1
 8002318:	f43f af00 	beq.w	800211c <_printf_float+0x9c>
 800231c:	f109 0901 	add.w	r9, r9, #1
 8002320:	e7ee      	b.n	8002300 <_printf_float+0x280>
 8002322:	bf00      	nop
 8002324:	f3af 8000 	nop.w
 8002328:	ffffffff 	.word	0xffffffff
 800232c:	7fefffff 	.word	0x7fefffff
 8002330:	080049e4 	.word	0x080049e4
 8002334:	080049e8 	.word	0x080049e8
 8002338:	080049f0 	.word	0x080049f0
 800233c:	080049ec 	.word	0x080049ec
 8002340:	080049f4 	.word	0x080049f4
 8002344:	9a08      	ldr	r2, [sp, #32]
 8002346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002348:	429a      	cmp	r2, r3
 800234a:	bfa8      	it	ge
 800234c:	461a      	movge	r2, r3
 800234e:	2a00      	cmp	r2, #0
 8002350:	4691      	mov	r9, r2
 8002352:	dc38      	bgt.n	80023c6 <_printf_float+0x346>
 8002354:	2300      	movs	r3, #0
 8002356:	9305      	str	r3, [sp, #20]
 8002358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800235c:	f104 021a 	add.w	r2, r4, #26
 8002360:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002362:	9905      	ldr	r1, [sp, #20]
 8002364:	9304      	str	r3, [sp, #16]
 8002366:	eba3 0309 	sub.w	r3, r3, r9
 800236a:	428b      	cmp	r3, r1
 800236c:	dc33      	bgt.n	80023d6 <_printf_float+0x356>
 800236e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002372:	429a      	cmp	r2, r3
 8002374:	db3c      	blt.n	80023f0 <_printf_float+0x370>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	07da      	lsls	r2, r3, #31
 800237a:	d439      	bmi.n	80023f0 <_printf_float+0x370>
 800237c:	9a08      	ldr	r2, [sp, #32]
 800237e:	9b04      	ldr	r3, [sp, #16]
 8002380:	9907      	ldr	r1, [sp, #28]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	eba2 0901 	sub.w	r9, r2, r1
 8002388:	4599      	cmp	r9, r3
 800238a:	bfa8      	it	ge
 800238c:	4699      	movge	r9, r3
 800238e:	f1b9 0f00 	cmp.w	r9, #0
 8002392:	dc35      	bgt.n	8002400 <_printf_float+0x380>
 8002394:	f04f 0800 	mov.w	r8, #0
 8002398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800239c:	f104 0a1a 	add.w	sl, r4, #26
 80023a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	eba3 0309 	sub.w	r3, r3, r9
 80023aa:	4543      	cmp	r3, r8
 80023ac:	f77f af75 	ble.w	800229a <_printf_float+0x21a>
 80023b0:	2301      	movs	r3, #1
 80023b2:	4652      	mov	r2, sl
 80023b4:	4631      	mov	r1, r6
 80023b6:	4628      	mov	r0, r5
 80023b8:	47b8      	blx	r7
 80023ba:	3001      	adds	r0, #1
 80023bc:	f43f aeae 	beq.w	800211c <_printf_float+0x9c>
 80023c0:	f108 0801 	add.w	r8, r8, #1
 80023c4:	e7ec      	b.n	80023a0 <_printf_float+0x320>
 80023c6:	4613      	mov	r3, r2
 80023c8:	4631      	mov	r1, r6
 80023ca:	4642      	mov	r2, r8
 80023cc:	4628      	mov	r0, r5
 80023ce:	47b8      	blx	r7
 80023d0:	3001      	adds	r0, #1
 80023d2:	d1bf      	bne.n	8002354 <_printf_float+0x2d4>
 80023d4:	e6a2      	b.n	800211c <_printf_float+0x9c>
 80023d6:	2301      	movs	r3, #1
 80023d8:	4631      	mov	r1, r6
 80023da:	4628      	mov	r0, r5
 80023dc:	9204      	str	r2, [sp, #16]
 80023de:	47b8      	blx	r7
 80023e0:	3001      	adds	r0, #1
 80023e2:	f43f ae9b 	beq.w	800211c <_printf_float+0x9c>
 80023e6:	9b05      	ldr	r3, [sp, #20]
 80023e8:	9a04      	ldr	r2, [sp, #16]
 80023ea:	3301      	adds	r3, #1
 80023ec:	9305      	str	r3, [sp, #20]
 80023ee:	e7b7      	b.n	8002360 <_printf_float+0x2e0>
 80023f0:	4653      	mov	r3, sl
 80023f2:	465a      	mov	r2, fp
 80023f4:	4631      	mov	r1, r6
 80023f6:	4628      	mov	r0, r5
 80023f8:	47b8      	blx	r7
 80023fa:	3001      	adds	r0, #1
 80023fc:	d1be      	bne.n	800237c <_printf_float+0x2fc>
 80023fe:	e68d      	b.n	800211c <_printf_float+0x9c>
 8002400:	9a04      	ldr	r2, [sp, #16]
 8002402:	464b      	mov	r3, r9
 8002404:	4442      	add	r2, r8
 8002406:	4631      	mov	r1, r6
 8002408:	4628      	mov	r0, r5
 800240a:	47b8      	blx	r7
 800240c:	3001      	adds	r0, #1
 800240e:	d1c1      	bne.n	8002394 <_printf_float+0x314>
 8002410:	e684      	b.n	800211c <_printf_float+0x9c>
 8002412:	9a08      	ldr	r2, [sp, #32]
 8002414:	2a01      	cmp	r2, #1
 8002416:	dc01      	bgt.n	800241c <_printf_float+0x39c>
 8002418:	07db      	lsls	r3, r3, #31
 800241a:	d537      	bpl.n	800248c <_printf_float+0x40c>
 800241c:	2301      	movs	r3, #1
 800241e:	4642      	mov	r2, r8
 8002420:	4631      	mov	r1, r6
 8002422:	4628      	mov	r0, r5
 8002424:	47b8      	blx	r7
 8002426:	3001      	adds	r0, #1
 8002428:	f43f ae78 	beq.w	800211c <_printf_float+0x9c>
 800242c:	4653      	mov	r3, sl
 800242e:	465a      	mov	r2, fp
 8002430:	4631      	mov	r1, r6
 8002432:	4628      	mov	r0, r5
 8002434:	47b8      	blx	r7
 8002436:	3001      	adds	r0, #1
 8002438:	f43f ae70 	beq.w	800211c <_printf_float+0x9c>
 800243c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002440:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d01b      	beq.n	8002482 <_printf_float+0x402>
 800244a:	9b08      	ldr	r3, [sp, #32]
 800244c:	f108 0201 	add.w	r2, r8, #1
 8002450:	3b01      	subs	r3, #1
 8002452:	4631      	mov	r1, r6
 8002454:	4628      	mov	r0, r5
 8002456:	47b8      	blx	r7
 8002458:	3001      	adds	r0, #1
 800245a:	d10e      	bne.n	800247a <_printf_float+0x3fa>
 800245c:	e65e      	b.n	800211c <_printf_float+0x9c>
 800245e:	2301      	movs	r3, #1
 8002460:	464a      	mov	r2, r9
 8002462:	4631      	mov	r1, r6
 8002464:	4628      	mov	r0, r5
 8002466:	47b8      	blx	r7
 8002468:	3001      	adds	r0, #1
 800246a:	f43f ae57 	beq.w	800211c <_printf_float+0x9c>
 800246e:	f108 0801 	add.w	r8, r8, #1
 8002472:	9b08      	ldr	r3, [sp, #32]
 8002474:	3b01      	subs	r3, #1
 8002476:	4543      	cmp	r3, r8
 8002478:	dcf1      	bgt.n	800245e <_printf_float+0x3de>
 800247a:	9b04      	ldr	r3, [sp, #16]
 800247c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002480:	e6db      	b.n	800223a <_printf_float+0x1ba>
 8002482:	f04f 0800 	mov.w	r8, #0
 8002486:	f104 091a 	add.w	r9, r4, #26
 800248a:	e7f2      	b.n	8002472 <_printf_float+0x3f2>
 800248c:	2301      	movs	r3, #1
 800248e:	4642      	mov	r2, r8
 8002490:	e7df      	b.n	8002452 <_printf_float+0x3d2>
 8002492:	2301      	movs	r3, #1
 8002494:	464a      	mov	r2, r9
 8002496:	4631      	mov	r1, r6
 8002498:	4628      	mov	r0, r5
 800249a:	47b8      	blx	r7
 800249c:	3001      	adds	r0, #1
 800249e:	f43f ae3d 	beq.w	800211c <_printf_float+0x9c>
 80024a2:	f108 0801 	add.w	r8, r8, #1
 80024a6:	68e3      	ldr	r3, [r4, #12]
 80024a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80024aa:	1a5b      	subs	r3, r3, r1
 80024ac:	4543      	cmp	r3, r8
 80024ae:	dcf0      	bgt.n	8002492 <_printf_float+0x412>
 80024b0:	e6f7      	b.n	80022a2 <_printf_float+0x222>
 80024b2:	f04f 0800 	mov.w	r8, #0
 80024b6:	f104 0919 	add.w	r9, r4, #25
 80024ba:	e7f4      	b.n	80024a6 <_printf_float+0x426>

080024bc <_printf_common>:
 80024bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024c0:	4616      	mov	r6, r2
 80024c2:	4699      	mov	r9, r3
 80024c4:	688a      	ldr	r2, [r1, #8]
 80024c6:	690b      	ldr	r3, [r1, #16]
 80024c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bfb8      	it	lt
 80024d0:	4613      	movlt	r3, r2
 80024d2:	6033      	str	r3, [r6, #0]
 80024d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024d8:	4607      	mov	r7, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	b10a      	cbz	r2, 80024e2 <_printf_common+0x26>
 80024de:	3301      	adds	r3, #1
 80024e0:	6033      	str	r3, [r6, #0]
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	0699      	lsls	r1, r3, #26
 80024e6:	bf42      	ittt	mi
 80024e8:	6833      	ldrmi	r3, [r6, #0]
 80024ea:	3302      	addmi	r3, #2
 80024ec:	6033      	strmi	r3, [r6, #0]
 80024ee:	6825      	ldr	r5, [r4, #0]
 80024f0:	f015 0506 	ands.w	r5, r5, #6
 80024f4:	d106      	bne.n	8002504 <_printf_common+0x48>
 80024f6:	f104 0a19 	add.w	sl, r4, #25
 80024fa:	68e3      	ldr	r3, [r4, #12]
 80024fc:	6832      	ldr	r2, [r6, #0]
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	42ab      	cmp	r3, r5
 8002502:	dc26      	bgt.n	8002552 <_printf_common+0x96>
 8002504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002508:	1e13      	subs	r3, r2, #0
 800250a:	6822      	ldr	r2, [r4, #0]
 800250c:	bf18      	it	ne
 800250e:	2301      	movne	r3, #1
 8002510:	0692      	lsls	r2, r2, #26
 8002512:	d42b      	bmi.n	800256c <_printf_common+0xb0>
 8002514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002518:	4649      	mov	r1, r9
 800251a:	4638      	mov	r0, r7
 800251c:	47c0      	blx	r8
 800251e:	3001      	adds	r0, #1
 8002520:	d01e      	beq.n	8002560 <_printf_common+0xa4>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	68e5      	ldr	r5, [r4, #12]
 8002526:	6832      	ldr	r2, [r6, #0]
 8002528:	f003 0306 	and.w	r3, r3, #6
 800252c:	2b04      	cmp	r3, #4
 800252e:	bf08      	it	eq
 8002530:	1aad      	subeq	r5, r5, r2
 8002532:	68a3      	ldr	r3, [r4, #8]
 8002534:	6922      	ldr	r2, [r4, #16]
 8002536:	bf0c      	ite	eq
 8002538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800253c:	2500      	movne	r5, #0
 800253e:	4293      	cmp	r3, r2
 8002540:	bfc4      	itt	gt
 8002542:	1a9b      	subgt	r3, r3, r2
 8002544:	18ed      	addgt	r5, r5, r3
 8002546:	2600      	movs	r6, #0
 8002548:	341a      	adds	r4, #26
 800254a:	42b5      	cmp	r5, r6
 800254c:	d11a      	bne.n	8002584 <_printf_common+0xc8>
 800254e:	2000      	movs	r0, #0
 8002550:	e008      	b.n	8002564 <_printf_common+0xa8>
 8002552:	2301      	movs	r3, #1
 8002554:	4652      	mov	r2, sl
 8002556:	4649      	mov	r1, r9
 8002558:	4638      	mov	r0, r7
 800255a:	47c0      	blx	r8
 800255c:	3001      	adds	r0, #1
 800255e:	d103      	bne.n	8002568 <_printf_common+0xac>
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002568:	3501      	adds	r5, #1
 800256a:	e7c6      	b.n	80024fa <_printf_common+0x3e>
 800256c:	18e1      	adds	r1, r4, r3
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	2030      	movs	r0, #48	; 0x30
 8002572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002576:	4422      	add	r2, r4
 8002578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800257c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002580:	3302      	adds	r3, #2
 8002582:	e7c7      	b.n	8002514 <_printf_common+0x58>
 8002584:	2301      	movs	r3, #1
 8002586:	4622      	mov	r2, r4
 8002588:	4649      	mov	r1, r9
 800258a:	4638      	mov	r0, r7
 800258c:	47c0      	blx	r8
 800258e:	3001      	adds	r0, #1
 8002590:	d0e6      	beq.n	8002560 <_printf_common+0xa4>
 8002592:	3601      	adds	r6, #1
 8002594:	e7d9      	b.n	800254a <_printf_common+0x8e>
	...

08002598 <_printf_i>:
 8002598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	460c      	mov	r4, r1
 800259e:	4691      	mov	r9, r2
 80025a0:	7e27      	ldrb	r7, [r4, #24]
 80025a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80025a4:	2f78      	cmp	r7, #120	; 0x78
 80025a6:	4680      	mov	r8, r0
 80025a8:	469a      	mov	sl, r3
 80025aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025ae:	d807      	bhi.n	80025c0 <_printf_i+0x28>
 80025b0:	2f62      	cmp	r7, #98	; 0x62
 80025b2:	d80a      	bhi.n	80025ca <_printf_i+0x32>
 80025b4:	2f00      	cmp	r7, #0
 80025b6:	f000 80d8 	beq.w	800276a <_printf_i+0x1d2>
 80025ba:	2f58      	cmp	r7, #88	; 0x58
 80025bc:	f000 80a3 	beq.w	8002706 <_printf_i+0x16e>
 80025c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80025c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025c8:	e03a      	b.n	8002640 <_printf_i+0xa8>
 80025ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025ce:	2b15      	cmp	r3, #21
 80025d0:	d8f6      	bhi.n	80025c0 <_printf_i+0x28>
 80025d2:	a001      	add	r0, pc, #4	; (adr r0, 80025d8 <_printf_i+0x40>)
 80025d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80025d8:	08002631 	.word	0x08002631
 80025dc:	08002645 	.word	0x08002645
 80025e0:	080025c1 	.word	0x080025c1
 80025e4:	080025c1 	.word	0x080025c1
 80025e8:	080025c1 	.word	0x080025c1
 80025ec:	080025c1 	.word	0x080025c1
 80025f0:	08002645 	.word	0x08002645
 80025f4:	080025c1 	.word	0x080025c1
 80025f8:	080025c1 	.word	0x080025c1
 80025fc:	080025c1 	.word	0x080025c1
 8002600:	080025c1 	.word	0x080025c1
 8002604:	08002751 	.word	0x08002751
 8002608:	08002675 	.word	0x08002675
 800260c:	08002733 	.word	0x08002733
 8002610:	080025c1 	.word	0x080025c1
 8002614:	080025c1 	.word	0x080025c1
 8002618:	08002773 	.word	0x08002773
 800261c:	080025c1 	.word	0x080025c1
 8002620:	08002675 	.word	0x08002675
 8002624:	080025c1 	.word	0x080025c1
 8002628:	080025c1 	.word	0x080025c1
 800262c:	0800273b 	.word	0x0800273b
 8002630:	680b      	ldr	r3, [r1, #0]
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	600a      	str	r2, [r1, #0]
 8002638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800263c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002640:	2301      	movs	r3, #1
 8002642:	e0a3      	b.n	800278c <_printf_i+0x1f4>
 8002644:	6825      	ldr	r5, [r4, #0]
 8002646:	6808      	ldr	r0, [r1, #0]
 8002648:	062e      	lsls	r6, r5, #24
 800264a:	f100 0304 	add.w	r3, r0, #4
 800264e:	d50a      	bpl.n	8002666 <_printf_i+0xce>
 8002650:	6805      	ldr	r5, [r0, #0]
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	2d00      	cmp	r5, #0
 8002656:	da03      	bge.n	8002660 <_printf_i+0xc8>
 8002658:	232d      	movs	r3, #45	; 0x2d
 800265a:	426d      	negs	r5, r5
 800265c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002660:	485e      	ldr	r0, [pc, #376]	; (80027dc <_printf_i+0x244>)
 8002662:	230a      	movs	r3, #10
 8002664:	e019      	b.n	800269a <_printf_i+0x102>
 8002666:	f015 0f40 	tst.w	r5, #64	; 0x40
 800266a:	6805      	ldr	r5, [r0, #0]
 800266c:	600b      	str	r3, [r1, #0]
 800266e:	bf18      	it	ne
 8002670:	b22d      	sxthne	r5, r5
 8002672:	e7ef      	b.n	8002654 <_printf_i+0xbc>
 8002674:	680b      	ldr	r3, [r1, #0]
 8002676:	6825      	ldr	r5, [r4, #0]
 8002678:	1d18      	adds	r0, r3, #4
 800267a:	6008      	str	r0, [r1, #0]
 800267c:	0628      	lsls	r0, r5, #24
 800267e:	d501      	bpl.n	8002684 <_printf_i+0xec>
 8002680:	681d      	ldr	r5, [r3, #0]
 8002682:	e002      	b.n	800268a <_printf_i+0xf2>
 8002684:	0669      	lsls	r1, r5, #25
 8002686:	d5fb      	bpl.n	8002680 <_printf_i+0xe8>
 8002688:	881d      	ldrh	r5, [r3, #0]
 800268a:	4854      	ldr	r0, [pc, #336]	; (80027dc <_printf_i+0x244>)
 800268c:	2f6f      	cmp	r7, #111	; 0x6f
 800268e:	bf0c      	ite	eq
 8002690:	2308      	moveq	r3, #8
 8002692:	230a      	movne	r3, #10
 8002694:	2100      	movs	r1, #0
 8002696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800269a:	6866      	ldr	r6, [r4, #4]
 800269c:	60a6      	str	r6, [r4, #8]
 800269e:	2e00      	cmp	r6, #0
 80026a0:	bfa2      	ittt	ge
 80026a2:	6821      	ldrge	r1, [r4, #0]
 80026a4:	f021 0104 	bicge.w	r1, r1, #4
 80026a8:	6021      	strge	r1, [r4, #0]
 80026aa:	b90d      	cbnz	r5, 80026b0 <_printf_i+0x118>
 80026ac:	2e00      	cmp	r6, #0
 80026ae:	d04d      	beq.n	800274c <_printf_i+0x1b4>
 80026b0:	4616      	mov	r6, r2
 80026b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80026b6:	fb03 5711 	mls	r7, r3, r1, r5
 80026ba:	5dc7      	ldrb	r7, [r0, r7]
 80026bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026c0:	462f      	mov	r7, r5
 80026c2:	42bb      	cmp	r3, r7
 80026c4:	460d      	mov	r5, r1
 80026c6:	d9f4      	bls.n	80026b2 <_printf_i+0x11a>
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d10b      	bne.n	80026e4 <_printf_i+0x14c>
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	07df      	lsls	r7, r3, #31
 80026d0:	d508      	bpl.n	80026e4 <_printf_i+0x14c>
 80026d2:	6923      	ldr	r3, [r4, #16]
 80026d4:	6861      	ldr	r1, [r4, #4]
 80026d6:	4299      	cmp	r1, r3
 80026d8:	bfde      	ittt	le
 80026da:	2330      	movle	r3, #48	; 0x30
 80026dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026e4:	1b92      	subs	r2, r2, r6
 80026e6:	6122      	str	r2, [r4, #16]
 80026e8:	f8cd a000 	str.w	sl, [sp]
 80026ec:	464b      	mov	r3, r9
 80026ee:	aa03      	add	r2, sp, #12
 80026f0:	4621      	mov	r1, r4
 80026f2:	4640      	mov	r0, r8
 80026f4:	f7ff fee2 	bl	80024bc <_printf_common>
 80026f8:	3001      	adds	r0, #1
 80026fa:	d14c      	bne.n	8002796 <_printf_i+0x1fe>
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	b004      	add	sp, #16
 8002702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002706:	4835      	ldr	r0, [pc, #212]	; (80027dc <_printf_i+0x244>)
 8002708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	680e      	ldr	r6, [r1, #0]
 8002710:	061f      	lsls	r7, r3, #24
 8002712:	f856 5b04 	ldr.w	r5, [r6], #4
 8002716:	600e      	str	r6, [r1, #0]
 8002718:	d514      	bpl.n	8002744 <_printf_i+0x1ac>
 800271a:	07d9      	lsls	r1, r3, #31
 800271c:	bf44      	itt	mi
 800271e:	f043 0320 	orrmi.w	r3, r3, #32
 8002722:	6023      	strmi	r3, [r4, #0]
 8002724:	b91d      	cbnz	r5, 800272e <_printf_i+0x196>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	f023 0320 	bic.w	r3, r3, #32
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	2310      	movs	r3, #16
 8002730:	e7b0      	b.n	8002694 <_printf_i+0xfc>
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	f043 0320 	orr.w	r3, r3, #32
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	2378      	movs	r3, #120	; 0x78
 800273c:	4828      	ldr	r0, [pc, #160]	; (80027e0 <_printf_i+0x248>)
 800273e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002742:	e7e3      	b.n	800270c <_printf_i+0x174>
 8002744:	065e      	lsls	r6, r3, #25
 8002746:	bf48      	it	mi
 8002748:	b2ad      	uxthmi	r5, r5
 800274a:	e7e6      	b.n	800271a <_printf_i+0x182>
 800274c:	4616      	mov	r6, r2
 800274e:	e7bb      	b.n	80026c8 <_printf_i+0x130>
 8002750:	680b      	ldr	r3, [r1, #0]
 8002752:	6826      	ldr	r6, [r4, #0]
 8002754:	6960      	ldr	r0, [r4, #20]
 8002756:	1d1d      	adds	r5, r3, #4
 8002758:	600d      	str	r5, [r1, #0]
 800275a:	0635      	lsls	r5, r6, #24
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	d501      	bpl.n	8002764 <_printf_i+0x1cc>
 8002760:	6018      	str	r0, [r3, #0]
 8002762:	e002      	b.n	800276a <_printf_i+0x1d2>
 8002764:	0671      	lsls	r1, r6, #25
 8002766:	d5fb      	bpl.n	8002760 <_printf_i+0x1c8>
 8002768:	8018      	strh	r0, [r3, #0]
 800276a:	2300      	movs	r3, #0
 800276c:	6123      	str	r3, [r4, #16]
 800276e:	4616      	mov	r6, r2
 8002770:	e7ba      	b.n	80026e8 <_printf_i+0x150>
 8002772:	680b      	ldr	r3, [r1, #0]
 8002774:	1d1a      	adds	r2, r3, #4
 8002776:	600a      	str	r2, [r1, #0]
 8002778:	681e      	ldr	r6, [r3, #0]
 800277a:	6862      	ldr	r2, [r4, #4]
 800277c:	2100      	movs	r1, #0
 800277e:	4630      	mov	r0, r6
 8002780:	f7fd fd66 	bl	8000250 <memchr>
 8002784:	b108      	cbz	r0, 800278a <_printf_i+0x1f2>
 8002786:	1b80      	subs	r0, r0, r6
 8002788:	6060      	str	r0, [r4, #4]
 800278a:	6863      	ldr	r3, [r4, #4]
 800278c:	6123      	str	r3, [r4, #16]
 800278e:	2300      	movs	r3, #0
 8002790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002794:	e7a8      	b.n	80026e8 <_printf_i+0x150>
 8002796:	6923      	ldr	r3, [r4, #16]
 8002798:	4632      	mov	r2, r6
 800279a:	4649      	mov	r1, r9
 800279c:	4640      	mov	r0, r8
 800279e:	47d0      	blx	sl
 80027a0:	3001      	adds	r0, #1
 80027a2:	d0ab      	beq.n	80026fc <_printf_i+0x164>
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	079b      	lsls	r3, r3, #30
 80027a8:	d413      	bmi.n	80027d2 <_printf_i+0x23a>
 80027aa:	68e0      	ldr	r0, [r4, #12]
 80027ac:	9b03      	ldr	r3, [sp, #12]
 80027ae:	4298      	cmp	r0, r3
 80027b0:	bfb8      	it	lt
 80027b2:	4618      	movlt	r0, r3
 80027b4:	e7a4      	b.n	8002700 <_printf_i+0x168>
 80027b6:	2301      	movs	r3, #1
 80027b8:	4632      	mov	r2, r6
 80027ba:	4649      	mov	r1, r9
 80027bc:	4640      	mov	r0, r8
 80027be:	47d0      	blx	sl
 80027c0:	3001      	adds	r0, #1
 80027c2:	d09b      	beq.n	80026fc <_printf_i+0x164>
 80027c4:	3501      	adds	r5, #1
 80027c6:	68e3      	ldr	r3, [r4, #12]
 80027c8:	9903      	ldr	r1, [sp, #12]
 80027ca:	1a5b      	subs	r3, r3, r1
 80027cc:	42ab      	cmp	r3, r5
 80027ce:	dcf2      	bgt.n	80027b6 <_printf_i+0x21e>
 80027d0:	e7eb      	b.n	80027aa <_printf_i+0x212>
 80027d2:	2500      	movs	r5, #0
 80027d4:	f104 0619 	add.w	r6, r4, #25
 80027d8:	e7f5      	b.n	80027c6 <_printf_i+0x22e>
 80027da:	bf00      	nop
 80027dc:	080049f6 	.word	0x080049f6
 80027e0:	08004a07 	.word	0x08004a07

080027e4 <iprintf>:
 80027e4:	b40f      	push	{r0, r1, r2, r3}
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <iprintf+0x2c>)
 80027e8:	b513      	push	{r0, r1, r4, lr}
 80027ea:	681c      	ldr	r4, [r3, #0]
 80027ec:	b124      	cbz	r4, 80027f8 <iprintf+0x14>
 80027ee:	69a3      	ldr	r3, [r4, #24]
 80027f0:	b913      	cbnz	r3, 80027f8 <iprintf+0x14>
 80027f2:	4620      	mov	r0, r4
 80027f4:	f001 f86c 	bl	80038d0 <__sinit>
 80027f8:	ab05      	add	r3, sp, #20
 80027fa:	9a04      	ldr	r2, [sp, #16]
 80027fc:	68a1      	ldr	r1, [r4, #8]
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	4620      	mov	r0, r4
 8002802:	f001 fde7 	bl	80043d4 <_vfiprintf_r>
 8002806:	b002      	add	sp, #8
 8002808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800280c:	b004      	add	sp, #16
 800280e:	4770      	bx	lr
 8002810:	2000000c 	.word	0x2000000c

08002814 <_puts_r>:
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	460e      	mov	r6, r1
 8002818:	4605      	mov	r5, r0
 800281a:	b118      	cbz	r0, 8002824 <_puts_r+0x10>
 800281c:	6983      	ldr	r3, [r0, #24]
 800281e:	b90b      	cbnz	r3, 8002824 <_puts_r+0x10>
 8002820:	f001 f856 	bl	80038d0 <__sinit>
 8002824:	69ab      	ldr	r3, [r5, #24]
 8002826:	68ac      	ldr	r4, [r5, #8]
 8002828:	b913      	cbnz	r3, 8002830 <_puts_r+0x1c>
 800282a:	4628      	mov	r0, r5
 800282c:	f001 f850 	bl	80038d0 <__sinit>
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <_puts_r+0xd0>)
 8002832:	429c      	cmp	r4, r3
 8002834:	d120      	bne.n	8002878 <_puts_r+0x64>
 8002836:	686c      	ldr	r4, [r5, #4]
 8002838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800283a:	07db      	lsls	r3, r3, #31
 800283c:	d405      	bmi.n	800284a <_puts_r+0x36>
 800283e:	89a3      	ldrh	r3, [r4, #12]
 8002840:	0598      	lsls	r0, r3, #22
 8002842:	d402      	bmi.n	800284a <_puts_r+0x36>
 8002844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002846:	f001 f8e6 	bl	8003a16 <__retarget_lock_acquire_recursive>
 800284a:	89a3      	ldrh	r3, [r4, #12]
 800284c:	0719      	lsls	r1, r3, #28
 800284e:	d51d      	bpl.n	800288c <_puts_r+0x78>
 8002850:	6923      	ldr	r3, [r4, #16]
 8002852:	b1db      	cbz	r3, 800288c <_puts_r+0x78>
 8002854:	3e01      	subs	r6, #1
 8002856:	68a3      	ldr	r3, [r4, #8]
 8002858:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800285c:	3b01      	subs	r3, #1
 800285e:	60a3      	str	r3, [r4, #8]
 8002860:	bb39      	cbnz	r1, 80028b2 <_puts_r+0x9e>
 8002862:	2b00      	cmp	r3, #0
 8002864:	da38      	bge.n	80028d8 <_puts_r+0xc4>
 8002866:	4622      	mov	r2, r4
 8002868:	210a      	movs	r1, #10
 800286a:	4628      	mov	r0, r5
 800286c:	f000 f848 	bl	8002900 <__swbuf_r>
 8002870:	3001      	adds	r0, #1
 8002872:	d011      	beq.n	8002898 <_puts_r+0x84>
 8002874:	250a      	movs	r5, #10
 8002876:	e011      	b.n	800289c <_puts_r+0x88>
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <_puts_r+0xd4>)
 800287a:	429c      	cmp	r4, r3
 800287c:	d101      	bne.n	8002882 <_puts_r+0x6e>
 800287e:	68ac      	ldr	r4, [r5, #8]
 8002880:	e7da      	b.n	8002838 <_puts_r+0x24>
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <_puts_r+0xd8>)
 8002884:	429c      	cmp	r4, r3
 8002886:	bf08      	it	eq
 8002888:	68ec      	ldreq	r4, [r5, #12]
 800288a:	e7d5      	b.n	8002838 <_puts_r+0x24>
 800288c:	4621      	mov	r1, r4
 800288e:	4628      	mov	r0, r5
 8002890:	f000 f888 	bl	80029a4 <__swsetup_r>
 8002894:	2800      	cmp	r0, #0
 8002896:	d0dd      	beq.n	8002854 <_puts_r+0x40>
 8002898:	f04f 35ff 	mov.w	r5, #4294967295
 800289c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800289e:	07da      	lsls	r2, r3, #31
 80028a0:	d405      	bmi.n	80028ae <_puts_r+0x9a>
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	059b      	lsls	r3, r3, #22
 80028a6:	d402      	bmi.n	80028ae <_puts_r+0x9a>
 80028a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028aa:	f001 f8b5 	bl	8003a18 <__retarget_lock_release_recursive>
 80028ae:	4628      	mov	r0, r5
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da04      	bge.n	80028c0 <_puts_r+0xac>
 80028b6:	69a2      	ldr	r2, [r4, #24]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	dc06      	bgt.n	80028ca <_puts_r+0xb6>
 80028bc:	290a      	cmp	r1, #10
 80028be:	d004      	beq.n	80028ca <_puts_r+0xb6>
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	6022      	str	r2, [r4, #0]
 80028c6:	7019      	strb	r1, [r3, #0]
 80028c8:	e7c5      	b.n	8002856 <_puts_r+0x42>
 80028ca:	4622      	mov	r2, r4
 80028cc:	4628      	mov	r0, r5
 80028ce:	f000 f817 	bl	8002900 <__swbuf_r>
 80028d2:	3001      	adds	r0, #1
 80028d4:	d1bf      	bne.n	8002856 <_puts_r+0x42>
 80028d6:	e7df      	b.n	8002898 <_puts_r+0x84>
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	250a      	movs	r5, #10
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	6022      	str	r2, [r4, #0]
 80028e0:	701d      	strb	r5, [r3, #0]
 80028e2:	e7db      	b.n	800289c <_puts_r+0x88>
 80028e4:	08004acc 	.word	0x08004acc
 80028e8:	08004aec 	.word	0x08004aec
 80028ec:	08004aac 	.word	0x08004aac

080028f0 <puts>:
 80028f0:	4b02      	ldr	r3, [pc, #8]	; (80028fc <puts+0xc>)
 80028f2:	4601      	mov	r1, r0
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	f7ff bf8d 	b.w	8002814 <_puts_r>
 80028fa:	bf00      	nop
 80028fc:	2000000c 	.word	0x2000000c

08002900 <__swbuf_r>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	460e      	mov	r6, r1
 8002904:	4614      	mov	r4, r2
 8002906:	4605      	mov	r5, r0
 8002908:	b118      	cbz	r0, 8002912 <__swbuf_r+0x12>
 800290a:	6983      	ldr	r3, [r0, #24]
 800290c:	b90b      	cbnz	r3, 8002912 <__swbuf_r+0x12>
 800290e:	f000 ffdf 	bl	80038d0 <__sinit>
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <__swbuf_r+0x98>)
 8002914:	429c      	cmp	r4, r3
 8002916:	d12b      	bne.n	8002970 <__swbuf_r+0x70>
 8002918:	686c      	ldr	r4, [r5, #4]
 800291a:	69a3      	ldr	r3, [r4, #24]
 800291c:	60a3      	str	r3, [r4, #8]
 800291e:	89a3      	ldrh	r3, [r4, #12]
 8002920:	071a      	lsls	r2, r3, #28
 8002922:	d52f      	bpl.n	8002984 <__swbuf_r+0x84>
 8002924:	6923      	ldr	r3, [r4, #16]
 8002926:	b36b      	cbz	r3, 8002984 <__swbuf_r+0x84>
 8002928:	6923      	ldr	r3, [r4, #16]
 800292a:	6820      	ldr	r0, [r4, #0]
 800292c:	1ac0      	subs	r0, r0, r3
 800292e:	6963      	ldr	r3, [r4, #20]
 8002930:	b2f6      	uxtb	r6, r6
 8002932:	4283      	cmp	r3, r0
 8002934:	4637      	mov	r7, r6
 8002936:	dc04      	bgt.n	8002942 <__swbuf_r+0x42>
 8002938:	4621      	mov	r1, r4
 800293a:	4628      	mov	r0, r5
 800293c:	f000 ff34 	bl	80037a8 <_fflush_r>
 8002940:	bb30      	cbnz	r0, 8002990 <__swbuf_r+0x90>
 8002942:	68a3      	ldr	r3, [r4, #8]
 8002944:	3b01      	subs	r3, #1
 8002946:	60a3      	str	r3, [r4, #8]
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	6022      	str	r2, [r4, #0]
 800294e:	701e      	strb	r6, [r3, #0]
 8002950:	6963      	ldr	r3, [r4, #20]
 8002952:	3001      	adds	r0, #1
 8002954:	4283      	cmp	r3, r0
 8002956:	d004      	beq.n	8002962 <__swbuf_r+0x62>
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	07db      	lsls	r3, r3, #31
 800295c:	d506      	bpl.n	800296c <__swbuf_r+0x6c>
 800295e:	2e0a      	cmp	r6, #10
 8002960:	d104      	bne.n	800296c <__swbuf_r+0x6c>
 8002962:	4621      	mov	r1, r4
 8002964:	4628      	mov	r0, r5
 8002966:	f000 ff1f 	bl	80037a8 <_fflush_r>
 800296a:	b988      	cbnz	r0, 8002990 <__swbuf_r+0x90>
 800296c:	4638      	mov	r0, r7
 800296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <__swbuf_r+0x9c>)
 8002972:	429c      	cmp	r4, r3
 8002974:	d101      	bne.n	800297a <__swbuf_r+0x7a>
 8002976:	68ac      	ldr	r4, [r5, #8]
 8002978:	e7cf      	b.n	800291a <__swbuf_r+0x1a>
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <__swbuf_r+0xa0>)
 800297c:	429c      	cmp	r4, r3
 800297e:	bf08      	it	eq
 8002980:	68ec      	ldreq	r4, [r5, #12]
 8002982:	e7ca      	b.n	800291a <__swbuf_r+0x1a>
 8002984:	4621      	mov	r1, r4
 8002986:	4628      	mov	r0, r5
 8002988:	f000 f80c 	bl	80029a4 <__swsetup_r>
 800298c:	2800      	cmp	r0, #0
 800298e:	d0cb      	beq.n	8002928 <__swbuf_r+0x28>
 8002990:	f04f 37ff 	mov.w	r7, #4294967295
 8002994:	e7ea      	b.n	800296c <__swbuf_r+0x6c>
 8002996:	bf00      	nop
 8002998:	08004acc 	.word	0x08004acc
 800299c:	08004aec 	.word	0x08004aec
 80029a0:	08004aac 	.word	0x08004aac

080029a4 <__swsetup_r>:
 80029a4:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <__swsetup_r+0xcc>)
 80029a6:	b570      	push	{r4, r5, r6, lr}
 80029a8:	681d      	ldr	r5, [r3, #0]
 80029aa:	4606      	mov	r6, r0
 80029ac:	460c      	mov	r4, r1
 80029ae:	b125      	cbz	r5, 80029ba <__swsetup_r+0x16>
 80029b0:	69ab      	ldr	r3, [r5, #24]
 80029b2:	b913      	cbnz	r3, 80029ba <__swsetup_r+0x16>
 80029b4:	4628      	mov	r0, r5
 80029b6:	f000 ff8b 	bl	80038d0 <__sinit>
 80029ba:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <__swsetup_r+0xd0>)
 80029bc:	429c      	cmp	r4, r3
 80029be:	d10f      	bne.n	80029e0 <__swsetup_r+0x3c>
 80029c0:	686c      	ldr	r4, [r5, #4]
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029c8:	0719      	lsls	r1, r3, #28
 80029ca:	d42c      	bmi.n	8002a26 <__swsetup_r+0x82>
 80029cc:	06dd      	lsls	r5, r3, #27
 80029ce:	d411      	bmi.n	80029f4 <__swsetup_r+0x50>
 80029d0:	2309      	movs	r3, #9
 80029d2:	6033      	str	r3, [r6, #0]
 80029d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80029d8:	81a3      	strh	r3, [r4, #12]
 80029da:	f04f 30ff 	mov.w	r0, #4294967295
 80029de:	e03e      	b.n	8002a5e <__swsetup_r+0xba>
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <__swsetup_r+0xd4>)
 80029e2:	429c      	cmp	r4, r3
 80029e4:	d101      	bne.n	80029ea <__swsetup_r+0x46>
 80029e6:	68ac      	ldr	r4, [r5, #8]
 80029e8:	e7eb      	b.n	80029c2 <__swsetup_r+0x1e>
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <__swsetup_r+0xd8>)
 80029ec:	429c      	cmp	r4, r3
 80029ee:	bf08      	it	eq
 80029f0:	68ec      	ldreq	r4, [r5, #12]
 80029f2:	e7e6      	b.n	80029c2 <__swsetup_r+0x1e>
 80029f4:	0758      	lsls	r0, r3, #29
 80029f6:	d512      	bpl.n	8002a1e <__swsetup_r+0x7a>
 80029f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029fa:	b141      	cbz	r1, 8002a0e <__swsetup_r+0x6a>
 80029fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a00:	4299      	cmp	r1, r3
 8002a02:	d002      	beq.n	8002a0a <__swsetup_r+0x66>
 8002a04:	4630      	mov	r0, r6
 8002a06:	f001 fc11 	bl	800422c <_free_r>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6363      	str	r3, [r4, #52]	; 0x34
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a14:	81a3      	strh	r3, [r4, #12]
 8002a16:	2300      	movs	r3, #0
 8002a18:	6063      	str	r3, [r4, #4]
 8002a1a:	6923      	ldr	r3, [r4, #16]
 8002a1c:	6023      	str	r3, [r4, #0]
 8002a1e:	89a3      	ldrh	r3, [r4, #12]
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	81a3      	strh	r3, [r4, #12]
 8002a26:	6923      	ldr	r3, [r4, #16]
 8002a28:	b94b      	cbnz	r3, 8002a3e <__swsetup_r+0x9a>
 8002a2a:	89a3      	ldrh	r3, [r4, #12]
 8002a2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d003      	beq.n	8002a3e <__swsetup_r+0x9a>
 8002a36:	4621      	mov	r1, r4
 8002a38:	4630      	mov	r0, r6
 8002a3a:	f001 f813 	bl	8003a64 <__smakebuf_r>
 8002a3e:	89a0      	ldrh	r0, [r4, #12]
 8002a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a44:	f010 0301 	ands.w	r3, r0, #1
 8002a48:	d00a      	beq.n	8002a60 <__swsetup_r+0xbc>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60a3      	str	r3, [r4, #8]
 8002a4e:	6963      	ldr	r3, [r4, #20]
 8002a50:	425b      	negs	r3, r3
 8002a52:	61a3      	str	r3, [r4, #24]
 8002a54:	6923      	ldr	r3, [r4, #16]
 8002a56:	b943      	cbnz	r3, 8002a6a <__swsetup_r+0xc6>
 8002a58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a5c:	d1ba      	bne.n	80029d4 <__swsetup_r+0x30>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	0781      	lsls	r1, r0, #30
 8002a62:	bf58      	it	pl
 8002a64:	6963      	ldrpl	r3, [r4, #20]
 8002a66:	60a3      	str	r3, [r4, #8]
 8002a68:	e7f4      	b.n	8002a54 <__swsetup_r+0xb0>
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	e7f7      	b.n	8002a5e <__swsetup_r+0xba>
 8002a6e:	bf00      	nop
 8002a70:	2000000c 	.word	0x2000000c
 8002a74:	08004acc 	.word	0x08004acc
 8002a78:	08004aec 	.word	0x08004aec
 8002a7c:	08004aac 	.word	0x08004aac

08002a80 <quorem>:
 8002a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	6903      	ldr	r3, [r0, #16]
 8002a86:	690c      	ldr	r4, [r1, #16]
 8002a88:	42a3      	cmp	r3, r4
 8002a8a:	4607      	mov	r7, r0
 8002a8c:	f2c0 8081 	blt.w	8002b92 <quorem+0x112>
 8002a90:	3c01      	subs	r4, #1
 8002a92:	f101 0814 	add.w	r8, r1, #20
 8002a96:	f100 0514 	add.w	r5, r0, #20
 8002a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002ab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002ab4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ab8:	d331      	bcc.n	8002b1e <quorem+0x9e>
 8002aba:	f04f 0e00 	mov.w	lr, #0
 8002abe:	4640      	mov	r0, r8
 8002ac0:	46ac      	mov	ip, r5
 8002ac2:	46f2      	mov	sl, lr
 8002ac4:	f850 2b04 	ldr.w	r2, [r0], #4
 8002ac8:	b293      	uxth	r3, r2
 8002aca:	fb06 e303 	mla	r3, r6, r3, lr
 8002ace:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	ebaa 0303 	sub.w	r3, sl, r3
 8002ad8:	0c12      	lsrs	r2, r2, #16
 8002ada:	f8dc a000 	ldr.w	sl, [ip]
 8002ade:	fb06 e202 	mla	r2, r6, r2, lr
 8002ae2:	fa13 f38a 	uxtah	r3, r3, sl
 8002ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002aea:	fa1f fa82 	uxth.w	sl, r2
 8002aee:	f8dc 2000 	ldr.w	r2, [ip]
 8002af2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002af6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b00:	4581      	cmp	r9, r0
 8002b02:	f84c 3b04 	str.w	r3, [ip], #4
 8002b06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002b0a:	d2db      	bcs.n	8002ac4 <quorem+0x44>
 8002b0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8002b10:	b92b      	cbnz	r3, 8002b1e <quorem+0x9e>
 8002b12:	9b01      	ldr	r3, [sp, #4]
 8002b14:	3b04      	subs	r3, #4
 8002b16:	429d      	cmp	r5, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	d32e      	bcc.n	8002b7a <quorem+0xfa>
 8002b1c:	613c      	str	r4, [r7, #16]
 8002b1e:	4638      	mov	r0, r7
 8002b20:	f001 fa74 	bl	800400c <__mcmp>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	db24      	blt.n	8002b72 <quorem+0xf2>
 8002b28:	3601      	adds	r6, #1
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	f04f 0c00 	mov.w	ip, #0
 8002b30:	f858 2b04 	ldr.w	r2, [r8], #4
 8002b34:	f8d0 e000 	ldr.w	lr, [r0]
 8002b38:	b293      	uxth	r3, r2
 8002b3a:	ebac 0303 	sub.w	r3, ip, r3
 8002b3e:	0c12      	lsrs	r2, r2, #16
 8002b40:	fa13 f38e 	uxtah	r3, r3, lr
 8002b44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002b48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b52:	45c1      	cmp	r9, r8
 8002b54:	f840 3b04 	str.w	r3, [r0], #4
 8002b58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002b5c:	d2e8      	bcs.n	8002b30 <quorem+0xb0>
 8002b5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b66:	b922      	cbnz	r2, 8002b72 <quorem+0xf2>
 8002b68:	3b04      	subs	r3, #4
 8002b6a:	429d      	cmp	r5, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	d30a      	bcc.n	8002b86 <quorem+0x106>
 8002b70:	613c      	str	r4, [r7, #16]
 8002b72:	4630      	mov	r0, r6
 8002b74:	b003      	add	sp, #12
 8002b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	3b04      	subs	r3, #4
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d1cc      	bne.n	8002b1c <quorem+0x9c>
 8002b82:	3c01      	subs	r4, #1
 8002b84:	e7c7      	b.n	8002b16 <quorem+0x96>
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	3b04      	subs	r3, #4
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	d1f0      	bne.n	8002b70 <quorem+0xf0>
 8002b8e:	3c01      	subs	r4, #1
 8002b90:	e7eb      	b.n	8002b6a <quorem+0xea>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7ee      	b.n	8002b74 <quorem+0xf4>
	...

08002b98 <_dtoa_r>:
 8002b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b9c:	ec59 8b10 	vmov	r8, r9, d0
 8002ba0:	b095      	sub	sp, #84	; 0x54
 8002ba2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002ba4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8002ba6:	9107      	str	r1, [sp, #28]
 8002ba8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002bac:	4606      	mov	r6, r0
 8002bae:	9209      	str	r2, [sp, #36]	; 0x24
 8002bb0:	9310      	str	r3, [sp, #64]	; 0x40
 8002bb2:	b975      	cbnz	r5, 8002bd2 <_dtoa_r+0x3a>
 8002bb4:	2010      	movs	r0, #16
 8002bb6:	f000 ff95 	bl	8003ae4 <malloc>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6270      	str	r0, [r6, #36]	; 0x24
 8002bbe:	b920      	cbnz	r0, 8002bca <_dtoa_r+0x32>
 8002bc0:	4bab      	ldr	r3, [pc, #684]	; (8002e70 <_dtoa_r+0x2d8>)
 8002bc2:	21ea      	movs	r1, #234	; 0xea
 8002bc4:	48ab      	ldr	r0, [pc, #684]	; (8002e74 <_dtoa_r+0x2dc>)
 8002bc6:	f001 fd9b 	bl	8004700 <__assert_func>
 8002bca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002bce:	6005      	str	r5, [r0, #0]
 8002bd0:	60c5      	str	r5, [r0, #12]
 8002bd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	b151      	cbz	r1, 8002bee <_dtoa_r+0x56>
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	604a      	str	r2, [r1, #4]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	4093      	lsls	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
 8002be2:	4630      	mov	r0, r6
 8002be4:	f000 ffd4 	bl	8003b90 <_Bfree>
 8002be8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	f1b9 0300 	subs.w	r3, r9, #0
 8002bf2:	bfbb      	ittet	lt
 8002bf4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002bf8:	9303      	strlt	r3, [sp, #12]
 8002bfa:	2300      	movge	r3, #0
 8002bfc:	2201      	movlt	r2, #1
 8002bfe:	bfac      	ite	ge
 8002c00:	6023      	strge	r3, [r4, #0]
 8002c02:	6022      	strlt	r2, [r4, #0]
 8002c04:	4b9c      	ldr	r3, [pc, #624]	; (8002e78 <_dtoa_r+0x2e0>)
 8002c06:	9c03      	ldr	r4, [sp, #12]
 8002c08:	43a3      	bics	r3, r4
 8002c0a:	d11a      	bne.n	8002c42 <_dtoa_r+0xaa>
 8002c0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8002c18:	ea53 0308 	orrs.w	r3, r3, r8
 8002c1c:	f000 8512 	beq.w	8003644 <_dtoa_r+0xaac>
 8002c20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002c22:	b953      	cbnz	r3, 8002c3a <_dtoa_r+0xa2>
 8002c24:	4b95      	ldr	r3, [pc, #596]	; (8002e7c <_dtoa_r+0x2e4>)
 8002c26:	e01f      	b.n	8002c68 <_dtoa_r+0xd0>
 8002c28:	4b95      	ldr	r3, [pc, #596]	; (8002e80 <_dtoa_r+0x2e8>)
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	9800      	ldr	r0, [sp, #0]
 8002c34:	b015      	add	sp, #84	; 0x54
 8002c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3a:	4b90      	ldr	r3, [pc, #576]	; (8002e7c <_dtoa_r+0x2e4>)
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	3303      	adds	r3, #3
 8002c40:	e7f5      	b.n	8002c2e <_dtoa_r+0x96>
 8002c42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002c46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002c52:	d10b      	bne.n	8002c6c <_dtoa_r+0xd4>
 8002c54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c56:	2301      	movs	r3, #1
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 84ee 	beq.w	800363e <_dtoa_r+0xaa6>
 8002c62:	4888      	ldr	r0, [pc, #544]	; (8002e84 <_dtoa_r+0x2ec>)
 8002c64:	6018      	str	r0, [r3, #0]
 8002c66:	1e43      	subs	r3, r0, #1
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	e7e2      	b.n	8002c32 <_dtoa_r+0x9a>
 8002c6c:	a913      	add	r1, sp, #76	; 0x4c
 8002c6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8002c72:	aa12      	add	r2, sp, #72	; 0x48
 8002c74:	4630      	mov	r0, r6
 8002c76:	f001 fa6d 	bl	8004154 <__d2b>
 8002c7a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8002c7e:	4605      	mov	r5, r0
 8002c80:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002c82:	2900      	cmp	r1, #0
 8002c84:	d047      	beq.n	8002d16 <_dtoa_r+0x17e>
 8002c86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002c88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002c8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002c90:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8002c94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002c98:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	ec43 2b16 	vmov	d6, r2, r3
 8002ca2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8002ca6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002e58 <_dtoa_r+0x2c0>
 8002caa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002cae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8002e60 <_dtoa_r+0x2c8>
 8002cb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8002cb6:	eeb0 7b46 	vmov.f64	d7, d6
 8002cba:	ee06 1a90 	vmov	s13, r1
 8002cbe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8002cc2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002e68 <_dtoa_r+0x2d0>
 8002cc6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002cca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002cce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	ee16 ba90 	vmov	fp, s13
 8002cda:	9411      	str	r4, [sp, #68]	; 0x44
 8002cdc:	d508      	bpl.n	8002cf0 <_dtoa_r+0x158>
 8002cde:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002ce2:	eeb4 6b47 	vcmp.f64	d6, d7
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	bf18      	it	ne
 8002cec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8002cf0:	f1bb 0f16 	cmp.w	fp, #22
 8002cf4:	d832      	bhi.n	8002d5c <_dtoa_r+0x1c4>
 8002cf6:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <_dtoa_r+0x2f0>)
 8002cf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002cfc:	ed93 7b00 	vldr	d7, [r3]
 8002d00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8002d04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0c:	d501      	bpl.n	8002d12 <_dtoa_r+0x17a>
 8002d0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002d12:	2300      	movs	r3, #0
 8002d14:	e023      	b.n	8002d5e <_dtoa_r+0x1c6>
 8002d16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002d18:	4401      	add	r1, r0
 8002d1a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	bfc3      	ittte	gt
 8002d22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002d26:	fa04 f303 	lslgt.w	r3, r4, r3
 8002d2a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8002d2e:	f1c3 0320 	rsble	r3, r3, #32
 8002d32:	bfc6      	itte	gt
 8002d34:	fa28 f804 	lsrgt.w	r8, r8, r4
 8002d38:	ea43 0308 	orrgt.w	r3, r3, r8
 8002d3c:	fa08 f303 	lslle.w	r3, r8, r3
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d48:	3901      	subs	r1, #1
 8002d4a:	ed8d 7b00 	vstr	d7, [sp]
 8002d4e:	9c01      	ldr	r4, [sp, #4]
 8002d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d54:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8002d58:	2401      	movs	r4, #1
 8002d5a:	e7a0      	b.n	8002c9e <_dtoa_r+0x106>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d60:	1a43      	subs	r3, r0, r1
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	bf45      	ittet	mi
 8002d66:	f1c3 0301 	rsbmi	r3, r3, #1
 8002d6a:	9305      	strmi	r3, [sp, #20]
 8002d6c:	2300      	movpl	r3, #0
 8002d6e:	2300      	movmi	r3, #0
 8002d70:	9206      	str	r2, [sp, #24]
 8002d72:	bf54      	ite	pl
 8002d74:	9305      	strpl	r3, [sp, #20]
 8002d76:	9306      	strmi	r3, [sp, #24]
 8002d78:	f1bb 0f00 	cmp.w	fp, #0
 8002d7c:	db18      	blt.n	8002db0 <_dtoa_r+0x218>
 8002d7e:	9b06      	ldr	r3, [sp, #24]
 8002d80:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8002d84:	445b      	add	r3, fp
 8002d86:	9306      	str	r3, [sp, #24]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9a07      	ldr	r2, [sp, #28]
 8002d8c:	2a09      	cmp	r2, #9
 8002d8e:	d849      	bhi.n	8002e24 <_dtoa_r+0x28c>
 8002d90:	2a05      	cmp	r2, #5
 8002d92:	bfc4      	itt	gt
 8002d94:	3a04      	subgt	r2, #4
 8002d96:	9207      	strgt	r2, [sp, #28]
 8002d98:	9a07      	ldr	r2, [sp, #28]
 8002d9a:	f1a2 0202 	sub.w	r2, r2, #2
 8002d9e:	bfcc      	ite	gt
 8002da0:	2400      	movgt	r4, #0
 8002da2:	2401      	movle	r4, #1
 8002da4:	2a03      	cmp	r2, #3
 8002da6:	d848      	bhi.n	8002e3a <_dtoa_r+0x2a2>
 8002da8:	e8df f002 	tbb	[pc, r2]
 8002dac:	3a2c2e0b 	.word	0x3a2c2e0b
 8002db0:	9b05      	ldr	r3, [sp, #20]
 8002db2:	2200      	movs	r2, #0
 8002db4:	eba3 030b 	sub.w	r3, r3, fp
 8002db8:	9305      	str	r3, [sp, #20]
 8002dba:	920e      	str	r2, [sp, #56]	; 0x38
 8002dbc:	f1cb 0300 	rsb	r3, fp, #0
 8002dc0:	e7e3      	b.n	8002d8a <_dtoa_r+0x1f2>
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	9208      	str	r2, [sp, #32]
 8002dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	dc39      	bgt.n	8002e40 <_dtoa_r+0x2a8>
 8002dcc:	f04f 0a01 	mov.w	sl, #1
 8002dd0:	46d1      	mov	r9, sl
 8002dd2:	4652      	mov	r2, sl
 8002dd4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8002dd8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8002dda:	2100      	movs	r1, #0
 8002ddc:	6079      	str	r1, [r7, #4]
 8002dde:	2004      	movs	r0, #4
 8002de0:	f100 0c14 	add.w	ip, r0, #20
 8002de4:	4594      	cmp	ip, r2
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	d92f      	bls.n	8002e4a <_dtoa_r+0x2b2>
 8002dea:	4630      	mov	r0, r6
 8002dec:	930c      	str	r3, [sp, #48]	; 0x30
 8002dee:	f000 fe8f 	bl	8003b10 <_Balloc>
 8002df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002df4:	9000      	str	r0, [sp, #0]
 8002df6:	4602      	mov	r2, r0
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d149      	bne.n	8002e90 <_dtoa_r+0x2f8>
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <_dtoa_r+0x2f4>)
 8002dfe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002e02:	e6df      	b.n	8002bc4 <_dtoa_r+0x2c>
 8002e04:	2201      	movs	r2, #1
 8002e06:	e7dd      	b.n	8002dc4 <_dtoa_r+0x22c>
 8002e08:	2200      	movs	r2, #0
 8002e0a:	9208      	str	r2, [sp, #32]
 8002e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e0e:	eb0b 0a02 	add.w	sl, fp, r2
 8002e12:	f10a 0901 	add.w	r9, sl, #1
 8002e16:	464a      	mov	r2, r9
 8002e18:	2a01      	cmp	r2, #1
 8002e1a:	bfb8      	it	lt
 8002e1c:	2201      	movlt	r2, #1
 8002e1e:	e7db      	b.n	8002dd8 <_dtoa_r+0x240>
 8002e20:	2201      	movs	r2, #1
 8002e22:	e7f2      	b.n	8002e0a <_dtoa_r+0x272>
 8002e24:	2401      	movs	r4, #1
 8002e26:	2200      	movs	r2, #0
 8002e28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8002e2c:	f04f 3aff 	mov.w	sl, #4294967295
 8002e30:	2100      	movs	r1, #0
 8002e32:	46d1      	mov	r9, sl
 8002e34:	2212      	movs	r2, #18
 8002e36:	9109      	str	r1, [sp, #36]	; 0x24
 8002e38:	e7ce      	b.n	8002dd8 <_dtoa_r+0x240>
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	9208      	str	r2, [sp, #32]
 8002e3e:	e7f5      	b.n	8002e2c <_dtoa_r+0x294>
 8002e40:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8002e44:	46d1      	mov	r9, sl
 8002e46:	4652      	mov	r2, sl
 8002e48:	e7c6      	b.n	8002dd8 <_dtoa_r+0x240>
 8002e4a:	3101      	adds	r1, #1
 8002e4c:	6079      	str	r1, [r7, #4]
 8002e4e:	0040      	lsls	r0, r0, #1
 8002e50:	e7c6      	b.n	8002de0 <_dtoa_r+0x248>
 8002e52:	bf00      	nop
 8002e54:	f3af 8000 	nop.w
 8002e58:	636f4361 	.word	0x636f4361
 8002e5c:	3fd287a7 	.word	0x3fd287a7
 8002e60:	8b60c8b3 	.word	0x8b60c8b3
 8002e64:	3fc68a28 	.word	0x3fc68a28
 8002e68:	509f79fb 	.word	0x509f79fb
 8002e6c:	3fd34413 	.word	0x3fd34413
 8002e70:	08004a25 	.word	0x08004a25
 8002e74:	08004a3c 	.word	0x08004a3c
 8002e78:	7ff00000 	.word	0x7ff00000
 8002e7c:	08004a21 	.word	0x08004a21
 8002e80:	08004a18 	.word	0x08004a18
 8002e84:	080049f5 	.word	0x080049f5
 8002e88:	08004b98 	.word	0x08004b98
 8002e8c:	08004a9b 	.word	0x08004a9b
 8002e90:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002e92:	9900      	ldr	r1, [sp, #0]
 8002e94:	6011      	str	r1, [r2, #0]
 8002e96:	f1b9 0f0e 	cmp.w	r9, #14
 8002e9a:	d872      	bhi.n	8002f82 <_dtoa_r+0x3ea>
 8002e9c:	2c00      	cmp	r4, #0
 8002e9e:	d070      	beq.n	8002f82 <_dtoa_r+0x3ea>
 8002ea0:	f1bb 0f00 	cmp.w	fp, #0
 8002ea4:	f340 80a6 	ble.w	8002ff4 <_dtoa_r+0x45c>
 8002ea8:	49ca      	ldr	r1, [pc, #808]	; (80031d4 <_dtoa_r+0x63c>)
 8002eaa:	f00b 020f 	and.w	r2, fp, #15
 8002eae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002eb2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8002eb6:	ed92 7b00 	vldr	d7, [r2]
 8002eba:	ea4f 112b 	mov.w	r1, fp, asr #4
 8002ebe:	f000 808d 	beq.w	8002fdc <_dtoa_r+0x444>
 8002ec2:	4ac5      	ldr	r2, [pc, #788]	; (80031d8 <_dtoa_r+0x640>)
 8002ec4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8002ec8:	ed92 6b08 	vldr	d6, [r2, #32]
 8002ecc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8002ed0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002ed4:	f001 010f 	and.w	r1, r1, #15
 8002ed8:	2203      	movs	r2, #3
 8002eda:	48bf      	ldr	r0, [pc, #764]	; (80031d8 <_dtoa_r+0x640>)
 8002edc:	2900      	cmp	r1, #0
 8002ede:	d17f      	bne.n	8002fe0 <_dtoa_r+0x448>
 8002ee0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002ee4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8002ee8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002eec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002eee:	2900      	cmp	r1, #0
 8002ef0:	f000 80b2 	beq.w	8003058 <_dtoa_r+0x4c0>
 8002ef4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002ef8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002efc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f04:	f140 80a8 	bpl.w	8003058 <_dtoa_r+0x4c0>
 8002f08:	f1b9 0f00 	cmp.w	r9, #0
 8002f0c:	f000 80a4 	beq.w	8003058 <_dtoa_r+0x4c0>
 8002f10:	f1ba 0f00 	cmp.w	sl, #0
 8002f14:	dd31      	ble.n	8002f7a <_dtoa_r+0x3e2>
 8002f16:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002f1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002f1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002f22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002f26:	3201      	adds	r2, #1
 8002f28:	4650      	mov	r0, sl
 8002f2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8002f2e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8002f32:	ee07 2a90 	vmov	s15, r2
 8002f36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8002f3e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8002f42:	9c03      	ldr	r4, [sp, #12]
 8002f44:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8002f48:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	f040 8086 	bne.w	800305e <_dtoa_r+0x4c6>
 8002f52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002f56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002f5a:	ec42 1b17 	vmov	d7, r1, r2
 8002f5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	f300 8272 	bgt.w	800344e <_dtoa_r+0x8b6>
 8002f6a:	eeb1 7b47 	vneg.f64	d7, d7
 8002f6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	f100 8267 	bmi.w	8003448 <_dtoa_r+0x8b0>
 8002f7a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8002f7e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002f82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	f2c0 8129 	blt.w	80031dc <_dtoa_r+0x644>
 8002f8a:	f1bb 0f0e 	cmp.w	fp, #14
 8002f8e:	f300 8125 	bgt.w	80031dc <_dtoa_r+0x644>
 8002f92:	4b90      	ldr	r3, [pc, #576]	; (80031d4 <_dtoa_r+0x63c>)
 8002f94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002f98:	ed93 6b00 	vldr	d6, [r3]
 8002f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f280 80c3 	bge.w	800312a <_dtoa_r+0x592>
 8002fa4:	f1b9 0f00 	cmp.w	r9, #0
 8002fa8:	f300 80bf 	bgt.w	800312a <_dtoa_r+0x592>
 8002fac:	f040 824c 	bne.w	8003448 <_dtoa_r+0x8b0>
 8002fb0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8002fb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002fbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc4:	464c      	mov	r4, r9
 8002fc6:	464f      	mov	r7, r9
 8002fc8:	f280 8222 	bge.w	8003410 <_dtoa_r+0x878>
 8002fcc:	f8dd 8000 	ldr.w	r8, [sp]
 8002fd0:	2331      	movs	r3, #49	; 0x31
 8002fd2:	f808 3b01 	strb.w	r3, [r8], #1
 8002fd6:	f10b 0b01 	add.w	fp, fp, #1
 8002fda:	e21e      	b.n	800341a <_dtoa_r+0x882>
 8002fdc:	2202      	movs	r2, #2
 8002fde:	e77c      	b.n	8002eda <_dtoa_r+0x342>
 8002fe0:	07cc      	lsls	r4, r1, #31
 8002fe2:	d504      	bpl.n	8002fee <_dtoa_r+0x456>
 8002fe4:	ed90 6b00 	vldr	d6, [r0]
 8002fe8:	3201      	adds	r2, #1
 8002fea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002fee:	1049      	asrs	r1, r1, #1
 8002ff0:	3008      	adds	r0, #8
 8002ff2:	e773      	b.n	8002edc <_dtoa_r+0x344>
 8002ff4:	d02e      	beq.n	8003054 <_dtoa_r+0x4bc>
 8002ff6:	f1cb 0100 	rsb	r1, fp, #0
 8002ffa:	4a76      	ldr	r2, [pc, #472]	; (80031d4 <_dtoa_r+0x63c>)
 8002ffc:	f001 000f 	and.w	r0, r1, #15
 8003000:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003004:	ed92 7b00 	vldr	d7, [r2]
 8003008:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800300c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003010:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003014:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003018:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800301c:	486e      	ldr	r0, [pc, #440]	; (80031d8 <_dtoa_r+0x640>)
 800301e:	1109      	asrs	r1, r1, #4
 8003020:	2400      	movs	r4, #0
 8003022:	2202      	movs	r2, #2
 8003024:	b939      	cbnz	r1, 8003036 <_dtoa_r+0x49e>
 8003026:	2c00      	cmp	r4, #0
 8003028:	f43f af60 	beq.w	8002eec <_dtoa_r+0x354>
 800302c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003034:	e75a      	b.n	8002eec <_dtoa_r+0x354>
 8003036:	07cf      	lsls	r7, r1, #31
 8003038:	d509      	bpl.n	800304e <_dtoa_r+0x4b6>
 800303a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800303e:	ed90 7b00 	vldr	d7, [r0]
 8003042:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003046:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800304a:	3201      	adds	r2, #1
 800304c:	2401      	movs	r4, #1
 800304e:	1049      	asrs	r1, r1, #1
 8003050:	3008      	adds	r0, #8
 8003052:	e7e7      	b.n	8003024 <_dtoa_r+0x48c>
 8003054:	2202      	movs	r2, #2
 8003056:	e749      	b.n	8002eec <_dtoa_r+0x354>
 8003058:	465f      	mov	r7, fp
 800305a:	4648      	mov	r0, r9
 800305c:	e765      	b.n	8002f2a <_dtoa_r+0x392>
 800305e:	ec42 1b17 	vmov	d7, r1, r2
 8003062:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <_dtoa_r+0x63c>)
 8003064:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003068:	ed12 4b02 	vldr	d4, [r2, #-8]
 800306c:	9a00      	ldr	r2, [sp, #0]
 800306e:	1814      	adds	r4, r2, r0
 8003070:	9a08      	ldr	r2, [sp, #32]
 8003072:	b352      	cbz	r2, 80030ca <_dtoa_r+0x532>
 8003074:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8003078:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800307c:	f8dd 8000 	ldr.w	r8, [sp]
 8003080:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8003084:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003088:	ee35 7b47 	vsub.f64	d7, d5, d7
 800308c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8003090:	ee14 2a90 	vmov	r2, s9
 8003094:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8003098:	3230      	adds	r2, #48	; 0x30
 800309a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800309e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80030a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a6:	f808 2b01 	strb.w	r2, [r8], #1
 80030aa:	d439      	bmi.n	8003120 <_dtoa_r+0x588>
 80030ac:	ee32 5b46 	vsub.f64	d5, d2, d6
 80030b0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	d472      	bmi.n	80031a0 <_dtoa_r+0x608>
 80030ba:	45a0      	cmp	r8, r4
 80030bc:	f43f af5d 	beq.w	8002f7a <_dtoa_r+0x3e2>
 80030c0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80030c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80030c8:	e7e0      	b.n	800308c <_dtoa_r+0x4f4>
 80030ca:	f8dd 8000 	ldr.w	r8, [sp]
 80030ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80030d2:	4621      	mov	r1, r4
 80030d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80030d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80030dc:	ee14 2a90 	vmov	r2, s9
 80030e0:	3230      	adds	r2, #48	; 0x30
 80030e2:	f808 2b01 	strb.w	r2, [r8], #1
 80030e6:	45a0      	cmp	r8, r4
 80030e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80030ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80030f0:	d118      	bne.n	8003124 <_dtoa_r+0x58c>
 80030f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80030f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80030fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	dc4d      	bgt.n	80031a0 <_dtoa_r+0x608>
 8003104:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003108:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003110:	f57f af33 	bpl.w	8002f7a <_dtoa_r+0x3e2>
 8003114:	4688      	mov	r8, r1
 8003116:	3901      	subs	r1, #1
 8003118:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d0f9      	beq.n	8003114 <_dtoa_r+0x57c>
 8003120:	46bb      	mov	fp, r7
 8003122:	e02a      	b.n	800317a <_dtoa_r+0x5e2>
 8003124:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003128:	e7d6      	b.n	80030d8 <_dtoa_r+0x540>
 800312a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800312e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8003132:	f8dd 8000 	ldr.w	r8, [sp]
 8003136:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800313a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800313e:	ee15 3a10 	vmov	r3, s10
 8003142:	3330      	adds	r3, #48	; 0x30
 8003144:	f808 3b01 	strb.w	r3, [r8], #1
 8003148:	9b00      	ldr	r3, [sp, #0]
 800314a:	eba8 0303 	sub.w	r3, r8, r3
 800314e:	4599      	cmp	r9, r3
 8003150:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8003154:	eea3 7b46 	vfms.f64	d7, d3, d6
 8003158:	d133      	bne.n	80031c2 <_dtoa_r+0x62a>
 800315a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800315e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	dc1a      	bgt.n	800319e <_dtoa_r+0x606>
 8003168:	eeb4 7b46 	vcmp.f64	d7, d6
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	d103      	bne.n	800317a <_dtoa_r+0x5e2>
 8003172:	ee15 3a10 	vmov	r3, s10
 8003176:	07d9      	lsls	r1, r3, #31
 8003178:	d411      	bmi.n	800319e <_dtoa_r+0x606>
 800317a:	4629      	mov	r1, r5
 800317c:	4630      	mov	r0, r6
 800317e:	f000 fd07 	bl	8003b90 <_Bfree>
 8003182:	2300      	movs	r3, #0
 8003184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003186:	f888 3000 	strb.w	r3, [r8]
 800318a:	f10b 0301 	add.w	r3, fp, #1
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003192:	2b00      	cmp	r3, #0
 8003194:	f43f ad4d 	beq.w	8002c32 <_dtoa_r+0x9a>
 8003198:	f8c3 8000 	str.w	r8, [r3]
 800319c:	e549      	b.n	8002c32 <_dtoa_r+0x9a>
 800319e:	465f      	mov	r7, fp
 80031a0:	4643      	mov	r3, r8
 80031a2:	4698      	mov	r8, r3
 80031a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80031a8:	2a39      	cmp	r2, #57	; 0x39
 80031aa:	d106      	bne.n	80031ba <_dtoa_r+0x622>
 80031ac:	9a00      	ldr	r2, [sp, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d1f7      	bne.n	80031a2 <_dtoa_r+0x60a>
 80031b2:	9900      	ldr	r1, [sp, #0]
 80031b4:	2230      	movs	r2, #48	; 0x30
 80031b6:	3701      	adds	r7, #1
 80031b8:	700a      	strb	r2, [r1, #0]
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	3201      	adds	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e7ae      	b.n	8003120 <_dtoa_r+0x588>
 80031c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80031c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80031ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ce:	d1b2      	bne.n	8003136 <_dtoa_r+0x59e>
 80031d0:	e7d3      	b.n	800317a <_dtoa_r+0x5e2>
 80031d2:	bf00      	nop
 80031d4:	08004b98 	.word	0x08004b98
 80031d8:	08004b70 	.word	0x08004b70
 80031dc:	9908      	ldr	r1, [sp, #32]
 80031de:	2900      	cmp	r1, #0
 80031e0:	f000 80d1 	beq.w	8003386 <_dtoa_r+0x7ee>
 80031e4:	9907      	ldr	r1, [sp, #28]
 80031e6:	2901      	cmp	r1, #1
 80031e8:	f300 80b4 	bgt.w	8003354 <_dtoa_r+0x7bc>
 80031ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80031ee:	2900      	cmp	r1, #0
 80031f0:	f000 80ac 	beq.w	800334c <_dtoa_r+0x7b4>
 80031f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80031f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80031fc:	461c      	mov	r4, r3
 80031fe:	930a      	str	r3, [sp, #40]	; 0x28
 8003200:	9b05      	ldr	r3, [sp, #20]
 8003202:	4413      	add	r3, r2
 8003204:	9305      	str	r3, [sp, #20]
 8003206:	9b06      	ldr	r3, [sp, #24]
 8003208:	2101      	movs	r1, #1
 800320a:	4413      	add	r3, r2
 800320c:	4630      	mov	r0, r6
 800320e:	9306      	str	r3, [sp, #24]
 8003210:	f000 fd7a 	bl	8003d08 <__i2b>
 8003214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003216:	4607      	mov	r7, r0
 8003218:	f1b8 0f00 	cmp.w	r8, #0
 800321c:	dd0d      	ble.n	800323a <_dtoa_r+0x6a2>
 800321e:	9a06      	ldr	r2, [sp, #24]
 8003220:	2a00      	cmp	r2, #0
 8003222:	dd0a      	ble.n	800323a <_dtoa_r+0x6a2>
 8003224:	4542      	cmp	r2, r8
 8003226:	9905      	ldr	r1, [sp, #20]
 8003228:	bfa8      	it	ge
 800322a:	4642      	movge	r2, r8
 800322c:	1a89      	subs	r1, r1, r2
 800322e:	9105      	str	r1, [sp, #20]
 8003230:	9906      	ldr	r1, [sp, #24]
 8003232:	eba8 0802 	sub.w	r8, r8, r2
 8003236:	1a8a      	subs	r2, r1, r2
 8003238:	9206      	str	r2, [sp, #24]
 800323a:	b303      	cbz	r3, 800327e <_dtoa_r+0x6e6>
 800323c:	9a08      	ldr	r2, [sp, #32]
 800323e:	2a00      	cmp	r2, #0
 8003240:	f000 80a6 	beq.w	8003390 <_dtoa_r+0x7f8>
 8003244:	2c00      	cmp	r4, #0
 8003246:	dd13      	ble.n	8003270 <_dtoa_r+0x6d8>
 8003248:	4639      	mov	r1, r7
 800324a:	4622      	mov	r2, r4
 800324c:	4630      	mov	r0, r6
 800324e:	930c      	str	r3, [sp, #48]	; 0x30
 8003250:	f000 fe16 	bl	8003e80 <__pow5mult>
 8003254:	462a      	mov	r2, r5
 8003256:	4601      	mov	r1, r0
 8003258:	4607      	mov	r7, r0
 800325a:	4630      	mov	r0, r6
 800325c:	f000 fd6a 	bl	8003d34 <__multiply>
 8003260:	4629      	mov	r1, r5
 8003262:	900a      	str	r0, [sp, #40]	; 0x28
 8003264:	4630      	mov	r0, r6
 8003266:	f000 fc93 	bl	8003b90 <_Bfree>
 800326a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800326c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800326e:	4615      	mov	r5, r2
 8003270:	1b1a      	subs	r2, r3, r4
 8003272:	d004      	beq.n	800327e <_dtoa_r+0x6e6>
 8003274:	4629      	mov	r1, r5
 8003276:	4630      	mov	r0, r6
 8003278:	f000 fe02 	bl	8003e80 <__pow5mult>
 800327c:	4605      	mov	r5, r0
 800327e:	2101      	movs	r1, #1
 8003280:	4630      	mov	r0, r6
 8003282:	f000 fd41 	bl	8003d08 <__i2b>
 8003286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003288:	2b00      	cmp	r3, #0
 800328a:	4604      	mov	r4, r0
 800328c:	f340 8082 	ble.w	8003394 <_dtoa_r+0x7fc>
 8003290:	461a      	mov	r2, r3
 8003292:	4601      	mov	r1, r0
 8003294:	4630      	mov	r0, r6
 8003296:	f000 fdf3 	bl	8003e80 <__pow5mult>
 800329a:	9b07      	ldr	r3, [sp, #28]
 800329c:	2b01      	cmp	r3, #1
 800329e:	4604      	mov	r4, r0
 80032a0:	dd7b      	ble.n	800339a <_dtoa_r+0x802>
 80032a2:	2300      	movs	r3, #0
 80032a4:	930a      	str	r3, [sp, #40]	; 0x28
 80032a6:	6922      	ldr	r2, [r4, #16]
 80032a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80032ac:	6910      	ldr	r0, [r2, #16]
 80032ae:	f000 fcdb 	bl	8003c68 <__hi0bits>
 80032b2:	f1c0 0020 	rsb	r0, r0, #32
 80032b6:	9b06      	ldr	r3, [sp, #24]
 80032b8:	4418      	add	r0, r3
 80032ba:	f010 001f 	ands.w	r0, r0, #31
 80032be:	f000 808d 	beq.w	80033dc <_dtoa_r+0x844>
 80032c2:	f1c0 0220 	rsb	r2, r0, #32
 80032c6:	2a04      	cmp	r2, #4
 80032c8:	f340 8086 	ble.w	80033d8 <_dtoa_r+0x840>
 80032cc:	f1c0 001c 	rsb	r0, r0, #28
 80032d0:	9b05      	ldr	r3, [sp, #20]
 80032d2:	4403      	add	r3, r0
 80032d4:	9305      	str	r3, [sp, #20]
 80032d6:	9b06      	ldr	r3, [sp, #24]
 80032d8:	4403      	add	r3, r0
 80032da:	4480      	add	r8, r0
 80032dc:	9306      	str	r3, [sp, #24]
 80032de:	9b05      	ldr	r3, [sp, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	dd05      	ble.n	80032f0 <_dtoa_r+0x758>
 80032e4:	4629      	mov	r1, r5
 80032e6:	461a      	mov	r2, r3
 80032e8:	4630      	mov	r0, r6
 80032ea:	f000 fe23 	bl	8003f34 <__lshift>
 80032ee:	4605      	mov	r5, r0
 80032f0:	9b06      	ldr	r3, [sp, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	dd05      	ble.n	8003302 <_dtoa_r+0x76a>
 80032f6:	4621      	mov	r1, r4
 80032f8:	461a      	mov	r2, r3
 80032fa:	4630      	mov	r0, r6
 80032fc:	f000 fe1a 	bl	8003f34 <__lshift>
 8003300:	4604      	mov	r4, r0
 8003302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d06b      	beq.n	80033e0 <_dtoa_r+0x848>
 8003308:	4621      	mov	r1, r4
 800330a:	4628      	mov	r0, r5
 800330c:	f000 fe7e 	bl	800400c <__mcmp>
 8003310:	2800      	cmp	r0, #0
 8003312:	da65      	bge.n	80033e0 <_dtoa_r+0x848>
 8003314:	2300      	movs	r3, #0
 8003316:	4629      	mov	r1, r5
 8003318:	220a      	movs	r2, #10
 800331a:	4630      	mov	r0, r6
 800331c:	f000 fc5a 	bl	8003bd4 <__multadd>
 8003320:	9b08      	ldr	r3, [sp, #32]
 8003322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003326:	4605      	mov	r5, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8192 	beq.w	8003652 <_dtoa_r+0xaba>
 800332e:	4639      	mov	r1, r7
 8003330:	2300      	movs	r3, #0
 8003332:	220a      	movs	r2, #10
 8003334:	4630      	mov	r0, r6
 8003336:	f000 fc4d 	bl	8003bd4 <__multadd>
 800333a:	f1ba 0f00 	cmp.w	sl, #0
 800333e:	4607      	mov	r7, r0
 8003340:	f300 808e 	bgt.w	8003460 <_dtoa_r+0x8c8>
 8003344:	9b07      	ldr	r3, [sp, #28]
 8003346:	2b02      	cmp	r3, #2
 8003348:	dc51      	bgt.n	80033ee <_dtoa_r+0x856>
 800334a:	e089      	b.n	8003460 <_dtoa_r+0x8c8>
 800334c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800334e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003352:	e751      	b.n	80031f8 <_dtoa_r+0x660>
 8003354:	f109 34ff 	add.w	r4, r9, #4294967295
 8003358:	42a3      	cmp	r3, r4
 800335a:	bfbf      	itttt	lt
 800335c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800335e:	1ae3      	sublt	r3, r4, r3
 8003360:	18d2      	addlt	r2, r2, r3
 8003362:	4613      	movlt	r3, r2
 8003364:	bfb7      	itett	lt
 8003366:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003368:	1b1c      	subge	r4, r3, r4
 800336a:	4623      	movlt	r3, r4
 800336c:	2400      	movlt	r4, #0
 800336e:	f1b9 0f00 	cmp.w	r9, #0
 8003372:	bfb5      	itete	lt
 8003374:	9a05      	ldrlt	r2, [sp, #20]
 8003376:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800337a:	eba2 0809 	sublt.w	r8, r2, r9
 800337e:	464a      	movge	r2, r9
 8003380:	bfb8      	it	lt
 8003382:	2200      	movlt	r2, #0
 8003384:	e73b      	b.n	80031fe <_dtoa_r+0x666>
 8003386:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800338a:	9f08      	ldr	r7, [sp, #32]
 800338c:	461c      	mov	r4, r3
 800338e:	e743      	b.n	8003218 <_dtoa_r+0x680>
 8003390:	461a      	mov	r2, r3
 8003392:	e76f      	b.n	8003274 <_dtoa_r+0x6dc>
 8003394:	9b07      	ldr	r3, [sp, #28]
 8003396:	2b01      	cmp	r3, #1
 8003398:	dc18      	bgt.n	80033cc <_dtoa_r+0x834>
 800339a:	9b02      	ldr	r3, [sp, #8]
 800339c:	b9b3      	cbnz	r3, 80033cc <_dtoa_r+0x834>
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80033a4:	b9a2      	cbnz	r2, 80033d0 <_dtoa_r+0x838>
 80033a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033aa:	0d12      	lsrs	r2, r2, #20
 80033ac:	0512      	lsls	r2, r2, #20
 80033ae:	b18a      	cbz	r2, 80033d4 <_dtoa_r+0x83c>
 80033b0:	9b05      	ldr	r3, [sp, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	9305      	str	r3, [sp, #20]
 80033b6:	9b06      	ldr	r3, [sp, #24]
 80033b8:	3301      	adds	r3, #1
 80033ba:	9306      	str	r3, [sp, #24]
 80033bc:	2301      	movs	r3, #1
 80033be:	930a      	str	r3, [sp, #40]	; 0x28
 80033c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f47f af6f 	bne.w	80032a6 <_dtoa_r+0x70e>
 80033c8:	2001      	movs	r0, #1
 80033ca:	e774      	b.n	80032b6 <_dtoa_r+0x71e>
 80033cc:	2300      	movs	r3, #0
 80033ce:	e7f6      	b.n	80033be <_dtoa_r+0x826>
 80033d0:	9b02      	ldr	r3, [sp, #8]
 80033d2:	e7f4      	b.n	80033be <_dtoa_r+0x826>
 80033d4:	920a      	str	r2, [sp, #40]	; 0x28
 80033d6:	e7f3      	b.n	80033c0 <_dtoa_r+0x828>
 80033d8:	d081      	beq.n	80032de <_dtoa_r+0x746>
 80033da:	4610      	mov	r0, r2
 80033dc:	301c      	adds	r0, #28
 80033de:	e777      	b.n	80032d0 <_dtoa_r+0x738>
 80033e0:	f1b9 0f00 	cmp.w	r9, #0
 80033e4:	dc37      	bgt.n	8003456 <_dtoa_r+0x8be>
 80033e6:	9b07      	ldr	r3, [sp, #28]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	dd34      	ble.n	8003456 <_dtoa_r+0x8be>
 80033ec:	46ca      	mov	sl, r9
 80033ee:	f1ba 0f00 	cmp.w	sl, #0
 80033f2:	d10d      	bne.n	8003410 <_dtoa_r+0x878>
 80033f4:	4621      	mov	r1, r4
 80033f6:	4653      	mov	r3, sl
 80033f8:	2205      	movs	r2, #5
 80033fa:	4630      	mov	r0, r6
 80033fc:	f000 fbea 	bl	8003bd4 <__multadd>
 8003400:	4601      	mov	r1, r0
 8003402:	4604      	mov	r4, r0
 8003404:	4628      	mov	r0, r5
 8003406:	f000 fe01 	bl	800400c <__mcmp>
 800340a:	2800      	cmp	r0, #0
 800340c:	f73f adde 	bgt.w	8002fcc <_dtoa_r+0x434>
 8003410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003412:	f8dd 8000 	ldr.w	r8, [sp]
 8003416:	ea6f 0b03 	mvn.w	fp, r3
 800341a:	f04f 0900 	mov.w	r9, #0
 800341e:	4621      	mov	r1, r4
 8003420:	4630      	mov	r0, r6
 8003422:	f000 fbb5 	bl	8003b90 <_Bfree>
 8003426:	2f00      	cmp	r7, #0
 8003428:	f43f aea7 	beq.w	800317a <_dtoa_r+0x5e2>
 800342c:	f1b9 0f00 	cmp.w	r9, #0
 8003430:	d005      	beq.n	800343e <_dtoa_r+0x8a6>
 8003432:	45b9      	cmp	r9, r7
 8003434:	d003      	beq.n	800343e <_dtoa_r+0x8a6>
 8003436:	4649      	mov	r1, r9
 8003438:	4630      	mov	r0, r6
 800343a:	f000 fba9 	bl	8003b90 <_Bfree>
 800343e:	4639      	mov	r1, r7
 8003440:	4630      	mov	r0, r6
 8003442:	f000 fba5 	bl	8003b90 <_Bfree>
 8003446:	e698      	b.n	800317a <_dtoa_r+0x5e2>
 8003448:	2400      	movs	r4, #0
 800344a:	4627      	mov	r7, r4
 800344c:	e7e0      	b.n	8003410 <_dtoa_r+0x878>
 800344e:	46bb      	mov	fp, r7
 8003450:	4604      	mov	r4, r0
 8003452:	4607      	mov	r7, r0
 8003454:	e5ba      	b.n	8002fcc <_dtoa_r+0x434>
 8003456:	9b08      	ldr	r3, [sp, #32]
 8003458:	46ca      	mov	sl, r9
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8100 	beq.w	8003660 <_dtoa_r+0xac8>
 8003460:	f1b8 0f00 	cmp.w	r8, #0
 8003464:	dd05      	ble.n	8003472 <_dtoa_r+0x8da>
 8003466:	4639      	mov	r1, r7
 8003468:	4642      	mov	r2, r8
 800346a:	4630      	mov	r0, r6
 800346c:	f000 fd62 	bl	8003f34 <__lshift>
 8003470:	4607      	mov	r7, r0
 8003472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05d      	beq.n	8003534 <_dtoa_r+0x99c>
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4630      	mov	r0, r6
 800347c:	f000 fb48 	bl	8003b10 <_Balloc>
 8003480:	4680      	mov	r8, r0
 8003482:	b928      	cbnz	r0, 8003490 <_dtoa_r+0x8f8>
 8003484:	4b82      	ldr	r3, [pc, #520]	; (8003690 <_dtoa_r+0xaf8>)
 8003486:	4602      	mov	r2, r0
 8003488:	f240 21ea 	movw	r1, #746	; 0x2ea
 800348c:	f7ff bb9a 	b.w	8002bc4 <_dtoa_r+0x2c>
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	3202      	adds	r2, #2
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	f107 010c 	add.w	r1, r7, #12
 800349a:	300c      	adds	r0, #12
 800349c:	f000 fb2a 	bl	8003af4 <memcpy>
 80034a0:	2201      	movs	r2, #1
 80034a2:	4641      	mov	r1, r8
 80034a4:	4630      	mov	r0, r6
 80034a6:	f000 fd45 	bl	8003f34 <__lshift>
 80034aa:	9b00      	ldr	r3, [sp, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	9305      	str	r3, [sp, #20]
 80034b0:	9b00      	ldr	r3, [sp, #0]
 80034b2:	4453      	add	r3, sl
 80034b4:	9309      	str	r3, [sp, #36]	; 0x24
 80034b6:	9b02      	ldr	r3, [sp, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	46b9      	mov	r9, r7
 80034be:	9308      	str	r3, [sp, #32]
 80034c0:	4607      	mov	r7, r0
 80034c2:	9b05      	ldr	r3, [sp, #20]
 80034c4:	4621      	mov	r1, r4
 80034c6:	3b01      	subs	r3, #1
 80034c8:	4628      	mov	r0, r5
 80034ca:	9302      	str	r3, [sp, #8]
 80034cc:	f7ff fad8 	bl	8002a80 <quorem>
 80034d0:	4603      	mov	r3, r0
 80034d2:	3330      	adds	r3, #48	; 0x30
 80034d4:	9006      	str	r0, [sp, #24]
 80034d6:	4649      	mov	r1, r9
 80034d8:	4628      	mov	r0, r5
 80034da:	930a      	str	r3, [sp, #40]	; 0x28
 80034dc:	f000 fd96 	bl	800400c <__mcmp>
 80034e0:	463a      	mov	r2, r7
 80034e2:	4682      	mov	sl, r0
 80034e4:	4621      	mov	r1, r4
 80034e6:	4630      	mov	r0, r6
 80034e8:	f000 fdac 	bl	8004044 <__mdiff>
 80034ec:	68c2      	ldr	r2, [r0, #12]
 80034ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034f0:	4680      	mov	r8, r0
 80034f2:	bb0a      	cbnz	r2, 8003538 <_dtoa_r+0x9a0>
 80034f4:	4601      	mov	r1, r0
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 fd88 	bl	800400c <__mcmp>
 80034fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034fe:	4602      	mov	r2, r0
 8003500:	4641      	mov	r1, r8
 8003502:	4630      	mov	r0, r6
 8003504:	920e      	str	r2, [sp, #56]	; 0x38
 8003506:	930a      	str	r3, [sp, #40]	; 0x28
 8003508:	f000 fb42 	bl	8003b90 <_Bfree>
 800350c:	9b07      	ldr	r3, [sp, #28]
 800350e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003510:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003514:	ea43 0102 	orr.w	r1, r3, r2
 8003518:	9b08      	ldr	r3, [sp, #32]
 800351a:	430b      	orrs	r3, r1
 800351c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800351e:	d10d      	bne.n	800353c <_dtoa_r+0x9a4>
 8003520:	2b39      	cmp	r3, #57	; 0x39
 8003522:	d029      	beq.n	8003578 <_dtoa_r+0x9e0>
 8003524:	f1ba 0f00 	cmp.w	sl, #0
 8003528:	dd01      	ble.n	800352e <_dtoa_r+0x996>
 800352a:	9b06      	ldr	r3, [sp, #24]
 800352c:	3331      	adds	r3, #49	; 0x31
 800352e:	9a02      	ldr	r2, [sp, #8]
 8003530:	7013      	strb	r3, [r2, #0]
 8003532:	e774      	b.n	800341e <_dtoa_r+0x886>
 8003534:	4638      	mov	r0, r7
 8003536:	e7b8      	b.n	80034aa <_dtoa_r+0x912>
 8003538:	2201      	movs	r2, #1
 800353a:	e7e1      	b.n	8003500 <_dtoa_r+0x968>
 800353c:	f1ba 0f00 	cmp.w	sl, #0
 8003540:	db06      	blt.n	8003550 <_dtoa_r+0x9b8>
 8003542:	9907      	ldr	r1, [sp, #28]
 8003544:	ea41 0a0a 	orr.w	sl, r1, sl
 8003548:	9908      	ldr	r1, [sp, #32]
 800354a:	ea5a 0101 	orrs.w	r1, sl, r1
 800354e:	d120      	bne.n	8003592 <_dtoa_r+0x9fa>
 8003550:	2a00      	cmp	r2, #0
 8003552:	ddec      	ble.n	800352e <_dtoa_r+0x996>
 8003554:	4629      	mov	r1, r5
 8003556:	2201      	movs	r2, #1
 8003558:	4630      	mov	r0, r6
 800355a:	9305      	str	r3, [sp, #20]
 800355c:	f000 fcea 	bl	8003f34 <__lshift>
 8003560:	4621      	mov	r1, r4
 8003562:	4605      	mov	r5, r0
 8003564:	f000 fd52 	bl	800400c <__mcmp>
 8003568:	2800      	cmp	r0, #0
 800356a:	9b05      	ldr	r3, [sp, #20]
 800356c:	dc02      	bgt.n	8003574 <_dtoa_r+0x9dc>
 800356e:	d1de      	bne.n	800352e <_dtoa_r+0x996>
 8003570:	07da      	lsls	r2, r3, #31
 8003572:	d5dc      	bpl.n	800352e <_dtoa_r+0x996>
 8003574:	2b39      	cmp	r3, #57	; 0x39
 8003576:	d1d8      	bne.n	800352a <_dtoa_r+0x992>
 8003578:	9a02      	ldr	r2, [sp, #8]
 800357a:	2339      	movs	r3, #57	; 0x39
 800357c:	7013      	strb	r3, [r2, #0]
 800357e:	4643      	mov	r3, r8
 8003580:	4698      	mov	r8, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8003588:	2a39      	cmp	r2, #57	; 0x39
 800358a:	d051      	beq.n	8003630 <_dtoa_r+0xa98>
 800358c:	3201      	adds	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e745      	b.n	800341e <_dtoa_r+0x886>
 8003592:	2a00      	cmp	r2, #0
 8003594:	dd03      	ble.n	800359e <_dtoa_r+0xa06>
 8003596:	2b39      	cmp	r3, #57	; 0x39
 8003598:	d0ee      	beq.n	8003578 <_dtoa_r+0x9e0>
 800359a:	3301      	adds	r3, #1
 800359c:	e7c7      	b.n	800352e <_dtoa_r+0x996>
 800359e:	9a05      	ldr	r2, [sp, #20]
 80035a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80035a6:	428a      	cmp	r2, r1
 80035a8:	d02b      	beq.n	8003602 <_dtoa_r+0xa6a>
 80035aa:	4629      	mov	r1, r5
 80035ac:	2300      	movs	r3, #0
 80035ae:	220a      	movs	r2, #10
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 fb0f 	bl	8003bd4 <__multadd>
 80035b6:	45b9      	cmp	r9, r7
 80035b8:	4605      	mov	r5, r0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	f04f 020a 	mov.w	r2, #10
 80035c2:	4649      	mov	r1, r9
 80035c4:	4630      	mov	r0, r6
 80035c6:	d107      	bne.n	80035d8 <_dtoa_r+0xa40>
 80035c8:	f000 fb04 	bl	8003bd4 <__multadd>
 80035cc:	4681      	mov	r9, r0
 80035ce:	4607      	mov	r7, r0
 80035d0:	9b05      	ldr	r3, [sp, #20]
 80035d2:	3301      	adds	r3, #1
 80035d4:	9305      	str	r3, [sp, #20]
 80035d6:	e774      	b.n	80034c2 <_dtoa_r+0x92a>
 80035d8:	f000 fafc 	bl	8003bd4 <__multadd>
 80035dc:	4639      	mov	r1, r7
 80035de:	4681      	mov	r9, r0
 80035e0:	2300      	movs	r3, #0
 80035e2:	220a      	movs	r2, #10
 80035e4:	4630      	mov	r0, r6
 80035e6:	f000 faf5 	bl	8003bd4 <__multadd>
 80035ea:	4607      	mov	r7, r0
 80035ec:	e7f0      	b.n	80035d0 <_dtoa_r+0xa38>
 80035ee:	f1ba 0f00 	cmp.w	sl, #0
 80035f2:	9a00      	ldr	r2, [sp, #0]
 80035f4:	bfcc      	ite	gt
 80035f6:	46d0      	movgt	r8, sl
 80035f8:	f04f 0801 	movle.w	r8, #1
 80035fc:	4490      	add	r8, r2
 80035fe:	f04f 0900 	mov.w	r9, #0
 8003602:	4629      	mov	r1, r5
 8003604:	2201      	movs	r2, #1
 8003606:	4630      	mov	r0, r6
 8003608:	9302      	str	r3, [sp, #8]
 800360a:	f000 fc93 	bl	8003f34 <__lshift>
 800360e:	4621      	mov	r1, r4
 8003610:	4605      	mov	r5, r0
 8003612:	f000 fcfb 	bl	800400c <__mcmp>
 8003616:	2800      	cmp	r0, #0
 8003618:	dcb1      	bgt.n	800357e <_dtoa_r+0x9e6>
 800361a:	d102      	bne.n	8003622 <_dtoa_r+0xa8a>
 800361c:	9b02      	ldr	r3, [sp, #8]
 800361e:	07db      	lsls	r3, r3, #31
 8003620:	d4ad      	bmi.n	800357e <_dtoa_r+0x9e6>
 8003622:	4643      	mov	r3, r8
 8003624:	4698      	mov	r8, r3
 8003626:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800362a:	2a30      	cmp	r2, #48	; 0x30
 800362c:	d0fa      	beq.n	8003624 <_dtoa_r+0xa8c>
 800362e:	e6f6      	b.n	800341e <_dtoa_r+0x886>
 8003630:	9a00      	ldr	r2, [sp, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d1a4      	bne.n	8003580 <_dtoa_r+0x9e8>
 8003636:	f10b 0b01 	add.w	fp, fp, #1
 800363a:	2331      	movs	r3, #49	; 0x31
 800363c:	e778      	b.n	8003530 <_dtoa_r+0x998>
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <_dtoa_r+0xafc>)
 8003640:	f7ff bb12 	b.w	8002c68 <_dtoa_r+0xd0>
 8003644:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f aaee 	bne.w	8002c28 <_dtoa_r+0x90>
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <_dtoa_r+0xb00>)
 800364e:	f7ff bb0b 	b.w	8002c68 <_dtoa_r+0xd0>
 8003652:	f1ba 0f00 	cmp.w	sl, #0
 8003656:	dc03      	bgt.n	8003660 <_dtoa_r+0xac8>
 8003658:	9b07      	ldr	r3, [sp, #28]
 800365a:	2b02      	cmp	r3, #2
 800365c:	f73f aec7 	bgt.w	80033ee <_dtoa_r+0x856>
 8003660:	f8dd 8000 	ldr.w	r8, [sp]
 8003664:	4621      	mov	r1, r4
 8003666:	4628      	mov	r0, r5
 8003668:	f7ff fa0a 	bl	8002a80 <quorem>
 800366c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003670:	f808 3b01 	strb.w	r3, [r8], #1
 8003674:	9a00      	ldr	r2, [sp, #0]
 8003676:	eba8 0202 	sub.w	r2, r8, r2
 800367a:	4592      	cmp	sl, r2
 800367c:	ddb7      	ble.n	80035ee <_dtoa_r+0xa56>
 800367e:	4629      	mov	r1, r5
 8003680:	2300      	movs	r3, #0
 8003682:	220a      	movs	r2, #10
 8003684:	4630      	mov	r0, r6
 8003686:	f000 faa5 	bl	8003bd4 <__multadd>
 800368a:	4605      	mov	r5, r0
 800368c:	e7ea      	b.n	8003664 <_dtoa_r+0xacc>
 800368e:	bf00      	nop
 8003690:	08004a9b 	.word	0x08004a9b
 8003694:	080049f4 	.word	0x080049f4
 8003698:	08004a18 	.word	0x08004a18

0800369c <__sflush_r>:
 800369c:	898a      	ldrh	r2, [r1, #12]
 800369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	4605      	mov	r5, r0
 80036a4:	0710      	lsls	r0, r2, #28
 80036a6:	460c      	mov	r4, r1
 80036a8:	d458      	bmi.n	800375c <__sflush_r+0xc0>
 80036aa:	684b      	ldr	r3, [r1, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	dc05      	bgt.n	80036bc <__sflush_r+0x20>
 80036b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dc02      	bgt.n	80036bc <__sflush_r+0x20>
 80036b6:	2000      	movs	r0, #0
 80036b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036be:	2e00      	cmp	r6, #0
 80036c0:	d0f9      	beq.n	80036b6 <__sflush_r+0x1a>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036c8:	682f      	ldr	r7, [r5, #0]
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	d032      	beq.n	8003734 <__sflush_r+0x98>
 80036ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	075a      	lsls	r2, r3, #29
 80036d4:	d505      	bpl.n	80036e2 <__sflush_r+0x46>
 80036d6:	6863      	ldr	r3, [r4, #4]
 80036d8:	1ac0      	subs	r0, r0, r3
 80036da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036dc:	b10b      	cbz	r3, 80036e2 <__sflush_r+0x46>
 80036de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036e0:	1ac0      	subs	r0, r0, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	4602      	mov	r2, r0
 80036e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e8:	6a21      	ldr	r1, [r4, #32]
 80036ea:	4628      	mov	r0, r5
 80036ec:	47b0      	blx	r6
 80036ee:	1c43      	adds	r3, r0, #1
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	d106      	bne.n	8003702 <__sflush_r+0x66>
 80036f4:	6829      	ldr	r1, [r5, #0]
 80036f6:	291d      	cmp	r1, #29
 80036f8:	d82c      	bhi.n	8003754 <__sflush_r+0xb8>
 80036fa:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <__sflush_r+0x108>)
 80036fc:	40ca      	lsrs	r2, r1
 80036fe:	07d6      	lsls	r6, r2, #31
 8003700:	d528      	bpl.n	8003754 <__sflush_r+0xb8>
 8003702:	2200      	movs	r2, #0
 8003704:	6062      	str	r2, [r4, #4]
 8003706:	04d9      	lsls	r1, r3, #19
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	6022      	str	r2, [r4, #0]
 800370c:	d504      	bpl.n	8003718 <__sflush_r+0x7c>
 800370e:	1c42      	adds	r2, r0, #1
 8003710:	d101      	bne.n	8003716 <__sflush_r+0x7a>
 8003712:	682b      	ldr	r3, [r5, #0]
 8003714:	b903      	cbnz	r3, 8003718 <__sflush_r+0x7c>
 8003716:	6560      	str	r0, [r4, #84]	; 0x54
 8003718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800371a:	602f      	str	r7, [r5, #0]
 800371c:	2900      	cmp	r1, #0
 800371e:	d0ca      	beq.n	80036b6 <__sflush_r+0x1a>
 8003720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003724:	4299      	cmp	r1, r3
 8003726:	d002      	beq.n	800372e <__sflush_r+0x92>
 8003728:	4628      	mov	r0, r5
 800372a:	f000 fd7f 	bl	800422c <_free_r>
 800372e:	2000      	movs	r0, #0
 8003730:	6360      	str	r0, [r4, #52]	; 0x34
 8003732:	e7c1      	b.n	80036b8 <__sflush_r+0x1c>
 8003734:	6a21      	ldr	r1, [r4, #32]
 8003736:	2301      	movs	r3, #1
 8003738:	4628      	mov	r0, r5
 800373a:	47b0      	blx	r6
 800373c:	1c41      	adds	r1, r0, #1
 800373e:	d1c7      	bne.n	80036d0 <__sflush_r+0x34>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0c4      	beq.n	80036d0 <__sflush_r+0x34>
 8003746:	2b1d      	cmp	r3, #29
 8003748:	d001      	beq.n	800374e <__sflush_r+0xb2>
 800374a:	2b16      	cmp	r3, #22
 800374c:	d101      	bne.n	8003752 <__sflush_r+0xb6>
 800374e:	602f      	str	r7, [r5, #0]
 8003750:	e7b1      	b.n	80036b6 <__sflush_r+0x1a>
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003758:	81a3      	strh	r3, [r4, #12]
 800375a:	e7ad      	b.n	80036b8 <__sflush_r+0x1c>
 800375c:	690f      	ldr	r7, [r1, #16]
 800375e:	2f00      	cmp	r7, #0
 8003760:	d0a9      	beq.n	80036b6 <__sflush_r+0x1a>
 8003762:	0793      	lsls	r3, r2, #30
 8003764:	680e      	ldr	r6, [r1, #0]
 8003766:	bf08      	it	eq
 8003768:	694b      	ldreq	r3, [r1, #20]
 800376a:	600f      	str	r7, [r1, #0]
 800376c:	bf18      	it	ne
 800376e:	2300      	movne	r3, #0
 8003770:	eba6 0807 	sub.w	r8, r6, r7
 8003774:	608b      	str	r3, [r1, #8]
 8003776:	f1b8 0f00 	cmp.w	r8, #0
 800377a:	dd9c      	ble.n	80036b6 <__sflush_r+0x1a>
 800377c:	6a21      	ldr	r1, [r4, #32]
 800377e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003780:	4643      	mov	r3, r8
 8003782:	463a      	mov	r2, r7
 8003784:	4628      	mov	r0, r5
 8003786:	47b0      	blx	r6
 8003788:	2800      	cmp	r0, #0
 800378a:	dc06      	bgt.n	800379a <__sflush_r+0xfe>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	e78e      	b.n	80036b8 <__sflush_r+0x1c>
 800379a:	4407      	add	r7, r0
 800379c:	eba8 0800 	sub.w	r8, r8, r0
 80037a0:	e7e9      	b.n	8003776 <__sflush_r+0xda>
 80037a2:	bf00      	nop
 80037a4:	20400001 	.word	0x20400001

080037a8 <_fflush_r>:
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	690b      	ldr	r3, [r1, #16]
 80037ac:	4605      	mov	r5, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	b913      	cbnz	r3, 80037b8 <_fflush_r+0x10>
 80037b2:	2500      	movs	r5, #0
 80037b4:	4628      	mov	r0, r5
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	b118      	cbz	r0, 80037c2 <_fflush_r+0x1a>
 80037ba:	6983      	ldr	r3, [r0, #24]
 80037bc:	b90b      	cbnz	r3, 80037c2 <_fflush_r+0x1a>
 80037be:	f000 f887 	bl	80038d0 <__sinit>
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <_fflush_r+0x6c>)
 80037c4:	429c      	cmp	r4, r3
 80037c6:	d11b      	bne.n	8003800 <_fflush_r+0x58>
 80037c8:	686c      	ldr	r4, [r5, #4]
 80037ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ef      	beq.n	80037b2 <_fflush_r+0xa>
 80037d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037d4:	07d0      	lsls	r0, r2, #31
 80037d6:	d404      	bmi.n	80037e2 <_fflush_r+0x3a>
 80037d8:	0599      	lsls	r1, r3, #22
 80037da:	d402      	bmi.n	80037e2 <_fflush_r+0x3a>
 80037dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037de:	f000 f91a 	bl	8003a16 <__retarget_lock_acquire_recursive>
 80037e2:	4628      	mov	r0, r5
 80037e4:	4621      	mov	r1, r4
 80037e6:	f7ff ff59 	bl	800369c <__sflush_r>
 80037ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037ec:	07da      	lsls	r2, r3, #31
 80037ee:	4605      	mov	r5, r0
 80037f0:	d4e0      	bmi.n	80037b4 <_fflush_r+0xc>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	059b      	lsls	r3, r3, #22
 80037f6:	d4dd      	bmi.n	80037b4 <_fflush_r+0xc>
 80037f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037fa:	f000 f90d 	bl	8003a18 <__retarget_lock_release_recursive>
 80037fe:	e7d9      	b.n	80037b4 <_fflush_r+0xc>
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <_fflush_r+0x70>)
 8003802:	429c      	cmp	r4, r3
 8003804:	d101      	bne.n	800380a <_fflush_r+0x62>
 8003806:	68ac      	ldr	r4, [r5, #8]
 8003808:	e7df      	b.n	80037ca <_fflush_r+0x22>
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <_fflush_r+0x74>)
 800380c:	429c      	cmp	r4, r3
 800380e:	bf08      	it	eq
 8003810:	68ec      	ldreq	r4, [r5, #12]
 8003812:	e7da      	b.n	80037ca <_fflush_r+0x22>
 8003814:	08004acc 	.word	0x08004acc
 8003818:	08004aec 	.word	0x08004aec
 800381c:	08004aac 	.word	0x08004aac

08003820 <std>:
 8003820:	2300      	movs	r3, #0
 8003822:	b510      	push	{r4, lr}
 8003824:	4604      	mov	r4, r0
 8003826:	e9c0 3300 	strd	r3, r3, [r0]
 800382a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800382e:	6083      	str	r3, [r0, #8]
 8003830:	8181      	strh	r1, [r0, #12]
 8003832:	6643      	str	r3, [r0, #100]	; 0x64
 8003834:	81c2      	strh	r2, [r0, #14]
 8003836:	6183      	str	r3, [r0, #24]
 8003838:	4619      	mov	r1, r3
 800383a:	2208      	movs	r2, #8
 800383c:	305c      	adds	r0, #92	; 0x5c
 800383e:	f7fe fb87 	bl	8001f50 <memset>
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <std+0x38>)
 8003844:	6263      	str	r3, [r4, #36]	; 0x24
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <std+0x3c>)
 8003848:	62a3      	str	r3, [r4, #40]	; 0x28
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <std+0x40>)
 800384c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <std+0x44>)
 8003850:	6224      	str	r4, [r4, #32]
 8003852:	6323      	str	r3, [r4, #48]	; 0x30
 8003854:	bd10      	pop	{r4, pc}
 8003856:	bf00      	nop
 8003858:	08004655 	.word	0x08004655
 800385c:	08004677 	.word	0x08004677
 8003860:	080046af 	.word	0x080046af
 8003864:	080046d3 	.word	0x080046d3

08003868 <_cleanup_r>:
 8003868:	4901      	ldr	r1, [pc, #4]	; (8003870 <_cleanup_r+0x8>)
 800386a:	f000 b8af 	b.w	80039cc <_fwalk_reent>
 800386e:	bf00      	nop
 8003870:	080037a9 	.word	0x080037a9

08003874 <__sfmoreglue>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	1e4a      	subs	r2, r1, #1
 8003878:	2568      	movs	r5, #104	; 0x68
 800387a:	4355      	muls	r5, r2
 800387c:	460e      	mov	r6, r1
 800387e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003882:	f000 fd23 	bl	80042cc <_malloc_r>
 8003886:	4604      	mov	r4, r0
 8003888:	b140      	cbz	r0, 800389c <__sfmoreglue+0x28>
 800388a:	2100      	movs	r1, #0
 800388c:	e9c0 1600 	strd	r1, r6, [r0]
 8003890:	300c      	adds	r0, #12
 8003892:	60a0      	str	r0, [r4, #8]
 8003894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003898:	f7fe fb5a 	bl	8001f50 <memset>
 800389c:	4620      	mov	r0, r4
 800389e:	bd70      	pop	{r4, r5, r6, pc}

080038a0 <__sfp_lock_acquire>:
 80038a0:	4801      	ldr	r0, [pc, #4]	; (80038a8 <__sfp_lock_acquire+0x8>)
 80038a2:	f000 b8b8 	b.w	8003a16 <__retarget_lock_acquire_recursive>
 80038a6:	bf00      	nop
 80038a8:	20000260 	.word	0x20000260

080038ac <__sfp_lock_release>:
 80038ac:	4801      	ldr	r0, [pc, #4]	; (80038b4 <__sfp_lock_release+0x8>)
 80038ae:	f000 b8b3 	b.w	8003a18 <__retarget_lock_release_recursive>
 80038b2:	bf00      	nop
 80038b4:	20000260 	.word	0x20000260

080038b8 <__sinit_lock_acquire>:
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <__sinit_lock_acquire+0x8>)
 80038ba:	f000 b8ac 	b.w	8003a16 <__retarget_lock_acquire_recursive>
 80038be:	bf00      	nop
 80038c0:	2000025b 	.word	0x2000025b

080038c4 <__sinit_lock_release>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__sinit_lock_release+0x8>)
 80038c6:	f000 b8a7 	b.w	8003a18 <__retarget_lock_release_recursive>
 80038ca:	bf00      	nop
 80038cc:	2000025b 	.word	0x2000025b

080038d0 <__sinit>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4604      	mov	r4, r0
 80038d4:	f7ff fff0 	bl	80038b8 <__sinit_lock_acquire>
 80038d8:	69a3      	ldr	r3, [r4, #24]
 80038da:	b11b      	cbz	r3, 80038e4 <__sinit+0x14>
 80038dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e0:	f7ff bff0 	b.w	80038c4 <__sinit_lock_release>
 80038e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038e8:	6523      	str	r3, [r4, #80]	; 0x50
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <__sinit+0x68>)
 80038ec:	4a13      	ldr	r2, [pc, #76]	; (800393c <__sinit+0x6c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80038f2:	42a3      	cmp	r3, r4
 80038f4:	bf04      	itt	eq
 80038f6:	2301      	moveq	r3, #1
 80038f8:	61a3      	streq	r3, [r4, #24]
 80038fa:	4620      	mov	r0, r4
 80038fc:	f000 f820 	bl	8003940 <__sfp>
 8003900:	6060      	str	r0, [r4, #4]
 8003902:	4620      	mov	r0, r4
 8003904:	f000 f81c 	bl	8003940 <__sfp>
 8003908:	60a0      	str	r0, [r4, #8]
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f818 	bl	8003940 <__sfp>
 8003910:	2200      	movs	r2, #0
 8003912:	60e0      	str	r0, [r4, #12]
 8003914:	2104      	movs	r1, #4
 8003916:	6860      	ldr	r0, [r4, #4]
 8003918:	f7ff ff82 	bl	8003820 <std>
 800391c:	68a0      	ldr	r0, [r4, #8]
 800391e:	2201      	movs	r2, #1
 8003920:	2109      	movs	r1, #9
 8003922:	f7ff ff7d 	bl	8003820 <std>
 8003926:	68e0      	ldr	r0, [r4, #12]
 8003928:	2202      	movs	r2, #2
 800392a:	2112      	movs	r1, #18
 800392c:	f7ff ff78 	bl	8003820 <std>
 8003930:	2301      	movs	r3, #1
 8003932:	61a3      	str	r3, [r4, #24]
 8003934:	e7d2      	b.n	80038dc <__sinit+0xc>
 8003936:	bf00      	nop
 8003938:	080049e0 	.word	0x080049e0
 800393c:	08003869 	.word	0x08003869

08003940 <__sfp>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	4607      	mov	r7, r0
 8003944:	f7ff ffac 	bl	80038a0 <__sfp_lock_acquire>
 8003948:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <__sfp+0x84>)
 800394a:	681e      	ldr	r6, [r3, #0]
 800394c:	69b3      	ldr	r3, [r6, #24]
 800394e:	b913      	cbnz	r3, 8003956 <__sfp+0x16>
 8003950:	4630      	mov	r0, r6
 8003952:	f7ff ffbd 	bl	80038d0 <__sinit>
 8003956:	3648      	adds	r6, #72	; 0x48
 8003958:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800395c:	3b01      	subs	r3, #1
 800395e:	d503      	bpl.n	8003968 <__sfp+0x28>
 8003960:	6833      	ldr	r3, [r6, #0]
 8003962:	b30b      	cbz	r3, 80039a8 <__sfp+0x68>
 8003964:	6836      	ldr	r6, [r6, #0]
 8003966:	e7f7      	b.n	8003958 <__sfp+0x18>
 8003968:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800396c:	b9d5      	cbnz	r5, 80039a4 <__sfp+0x64>
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <__sfp+0x88>)
 8003970:	60e3      	str	r3, [r4, #12]
 8003972:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003976:	6665      	str	r5, [r4, #100]	; 0x64
 8003978:	f000 f84c 	bl	8003a14 <__retarget_lock_init_recursive>
 800397c:	f7ff ff96 	bl	80038ac <__sfp_lock_release>
 8003980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003988:	6025      	str	r5, [r4, #0]
 800398a:	61a5      	str	r5, [r4, #24]
 800398c:	2208      	movs	r2, #8
 800398e:	4629      	mov	r1, r5
 8003990:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003994:	f7fe fadc 	bl	8001f50 <memset>
 8003998:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800399c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039a0:	4620      	mov	r0, r4
 80039a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a4:	3468      	adds	r4, #104	; 0x68
 80039a6:	e7d9      	b.n	800395c <__sfp+0x1c>
 80039a8:	2104      	movs	r1, #4
 80039aa:	4638      	mov	r0, r7
 80039ac:	f7ff ff62 	bl	8003874 <__sfmoreglue>
 80039b0:	4604      	mov	r4, r0
 80039b2:	6030      	str	r0, [r6, #0]
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d1d5      	bne.n	8003964 <__sfp+0x24>
 80039b8:	f7ff ff78 	bl	80038ac <__sfp_lock_release>
 80039bc:	230c      	movs	r3, #12
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	e7ee      	b.n	80039a0 <__sfp+0x60>
 80039c2:	bf00      	nop
 80039c4:	080049e0 	.word	0x080049e0
 80039c8:	ffff0001 	.word	0xffff0001

080039cc <_fwalk_reent>:
 80039cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d0:	4606      	mov	r6, r0
 80039d2:	4688      	mov	r8, r1
 80039d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039d8:	2700      	movs	r7, #0
 80039da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039de:	f1b9 0901 	subs.w	r9, r9, #1
 80039e2:	d505      	bpl.n	80039f0 <_fwalk_reent+0x24>
 80039e4:	6824      	ldr	r4, [r4, #0]
 80039e6:	2c00      	cmp	r4, #0
 80039e8:	d1f7      	bne.n	80039da <_fwalk_reent+0xe>
 80039ea:	4638      	mov	r0, r7
 80039ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039f0:	89ab      	ldrh	r3, [r5, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d907      	bls.n	8003a06 <_fwalk_reent+0x3a>
 80039f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039fa:	3301      	adds	r3, #1
 80039fc:	d003      	beq.n	8003a06 <_fwalk_reent+0x3a>
 80039fe:	4629      	mov	r1, r5
 8003a00:	4630      	mov	r0, r6
 8003a02:	47c0      	blx	r8
 8003a04:	4307      	orrs	r7, r0
 8003a06:	3568      	adds	r5, #104	; 0x68
 8003a08:	e7e9      	b.n	80039de <_fwalk_reent+0x12>
	...

08003a0c <_localeconv_r>:
 8003a0c:	4800      	ldr	r0, [pc, #0]	; (8003a10 <_localeconv_r+0x4>)
 8003a0e:	4770      	bx	lr
 8003a10:	20000160 	.word	0x20000160

08003a14 <__retarget_lock_init_recursive>:
 8003a14:	4770      	bx	lr

08003a16 <__retarget_lock_acquire_recursive>:
 8003a16:	4770      	bx	lr

08003a18 <__retarget_lock_release_recursive>:
 8003a18:	4770      	bx	lr

08003a1a <__swhatbuf_r>:
 8003a1a:	b570      	push	{r4, r5, r6, lr}
 8003a1c:	460e      	mov	r6, r1
 8003a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a22:	2900      	cmp	r1, #0
 8003a24:	b096      	sub	sp, #88	; 0x58
 8003a26:	4614      	mov	r4, r2
 8003a28:	461d      	mov	r5, r3
 8003a2a:	da07      	bge.n	8003a3c <__swhatbuf_r+0x22>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	89b3      	ldrh	r3, [r6, #12]
 8003a32:	061a      	lsls	r2, r3, #24
 8003a34:	d410      	bmi.n	8003a58 <__swhatbuf_r+0x3e>
 8003a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a3a:	e00e      	b.n	8003a5a <__swhatbuf_r+0x40>
 8003a3c:	466a      	mov	r2, sp
 8003a3e:	f000 fe9f 	bl	8004780 <_fstat_r>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	dbf2      	blt.n	8003a2c <__swhatbuf_r+0x12>
 8003a46:	9a01      	ldr	r2, [sp, #4]
 8003a48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a50:	425a      	negs	r2, r3
 8003a52:	415a      	adcs	r2, r3
 8003a54:	602a      	str	r2, [r5, #0]
 8003a56:	e7ee      	b.n	8003a36 <__swhatbuf_r+0x1c>
 8003a58:	2340      	movs	r3, #64	; 0x40
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	b016      	add	sp, #88	; 0x58
 8003a60:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a64 <__smakebuf_r>:
 8003a64:	898b      	ldrh	r3, [r1, #12]
 8003a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a68:	079d      	lsls	r5, r3, #30
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	d507      	bpl.n	8003a80 <__smakebuf_r+0x1c>
 8003a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	2301      	movs	r3, #1
 8003a7a:	6163      	str	r3, [r4, #20]
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	ab01      	add	r3, sp, #4
 8003a82:	466a      	mov	r2, sp
 8003a84:	f7ff ffc9 	bl	8003a1a <__swhatbuf_r>
 8003a88:	9900      	ldr	r1, [sp, #0]
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f000 fc1d 	bl	80042cc <_malloc_r>
 8003a92:	b948      	cbnz	r0, 8003aa8 <__smakebuf_r+0x44>
 8003a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a98:	059a      	lsls	r2, r3, #22
 8003a9a:	d4ef      	bmi.n	8003a7c <__smakebuf_r+0x18>
 8003a9c:	f023 0303 	bic.w	r3, r3, #3
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	e7e3      	b.n	8003a70 <__smakebuf_r+0xc>
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <__smakebuf_r+0x7c>)
 8003aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	6020      	str	r0, [r4, #0]
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab4:	81a3      	strh	r3, [r4, #12]
 8003ab6:	9b00      	ldr	r3, [sp, #0]
 8003ab8:	6163      	str	r3, [r4, #20]
 8003aba:	9b01      	ldr	r3, [sp, #4]
 8003abc:	6120      	str	r0, [r4, #16]
 8003abe:	b15b      	cbz	r3, 8003ad8 <__smakebuf_r+0x74>
 8003ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 fe6d 	bl	80047a4 <_isatty_r>
 8003aca:	b128      	cbz	r0, 8003ad8 <__smakebuf_r+0x74>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f023 0303 	bic.w	r3, r3, #3
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	89a0      	ldrh	r0, [r4, #12]
 8003ada:	4305      	orrs	r5, r0
 8003adc:	81a5      	strh	r5, [r4, #12]
 8003ade:	e7cd      	b.n	8003a7c <__smakebuf_r+0x18>
 8003ae0:	08003869 	.word	0x08003869

08003ae4 <malloc>:
 8003ae4:	4b02      	ldr	r3, [pc, #8]	; (8003af0 <malloc+0xc>)
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	f000 bbef 	b.w	80042cc <_malloc_r>
 8003aee:	bf00      	nop
 8003af0:	2000000c 	.word	0x2000000c

08003af4 <memcpy>:
 8003af4:	440a      	add	r2, r1
 8003af6:	4291      	cmp	r1, r2
 8003af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003afc:	d100      	bne.n	8003b00 <memcpy+0xc>
 8003afe:	4770      	bx	lr
 8003b00:	b510      	push	{r4, lr}
 8003b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b0a:	4291      	cmp	r1, r2
 8003b0c:	d1f9      	bne.n	8003b02 <memcpy+0xe>
 8003b0e:	bd10      	pop	{r4, pc}

08003b10 <_Balloc>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b14:	4604      	mov	r4, r0
 8003b16:	460d      	mov	r5, r1
 8003b18:	b976      	cbnz	r6, 8003b38 <_Balloc+0x28>
 8003b1a:	2010      	movs	r0, #16
 8003b1c:	f7ff ffe2 	bl	8003ae4 <malloc>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6260      	str	r0, [r4, #36]	; 0x24
 8003b24:	b920      	cbnz	r0, 8003b30 <_Balloc+0x20>
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <_Balloc+0x78>)
 8003b28:	4818      	ldr	r0, [pc, #96]	; (8003b8c <_Balloc+0x7c>)
 8003b2a:	2166      	movs	r1, #102	; 0x66
 8003b2c:	f000 fde8 	bl	8004700 <__assert_func>
 8003b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b34:	6006      	str	r6, [r0, #0]
 8003b36:	60c6      	str	r6, [r0, #12]
 8003b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b3a:	68f3      	ldr	r3, [r6, #12]
 8003b3c:	b183      	cbz	r3, 8003b60 <_Balloc+0x50>
 8003b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b46:	b9b8      	cbnz	r0, 8003b78 <_Balloc+0x68>
 8003b48:	2101      	movs	r1, #1
 8003b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8003b4e:	1d72      	adds	r2, r6, #5
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	4620      	mov	r0, r4
 8003b54:	f000 fb5a 	bl	800420c <_calloc_r>
 8003b58:	b160      	cbz	r0, 8003b74 <_Balloc+0x64>
 8003b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003b5e:	e00e      	b.n	8003b7e <_Balloc+0x6e>
 8003b60:	2221      	movs	r2, #33	; 0x21
 8003b62:	2104      	movs	r1, #4
 8003b64:	4620      	mov	r0, r4
 8003b66:	f000 fb51 	bl	800420c <_calloc_r>
 8003b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b6c:	60f0      	str	r0, [r6, #12]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e4      	bne.n	8003b3e <_Balloc+0x2e>
 8003b74:	2000      	movs	r0, #0
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	6802      	ldr	r2, [r0, #0]
 8003b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003b84:	e7f7      	b.n	8003b76 <_Balloc+0x66>
 8003b86:	bf00      	nop
 8003b88:	08004a25 	.word	0x08004a25
 8003b8c:	08004b0c 	.word	0x08004b0c

08003b90 <_Bfree>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b94:	4605      	mov	r5, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	b976      	cbnz	r6, 8003bb8 <_Bfree+0x28>
 8003b9a:	2010      	movs	r0, #16
 8003b9c:	f7ff ffa2 	bl	8003ae4 <malloc>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6268      	str	r0, [r5, #36]	; 0x24
 8003ba4:	b920      	cbnz	r0, 8003bb0 <_Bfree+0x20>
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <_Bfree+0x3c>)
 8003ba8:	4809      	ldr	r0, [pc, #36]	; (8003bd0 <_Bfree+0x40>)
 8003baa:	218a      	movs	r1, #138	; 0x8a
 8003bac:	f000 fda8 	bl	8004700 <__assert_func>
 8003bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bb4:	6006      	str	r6, [r0, #0]
 8003bb6:	60c6      	str	r6, [r0, #12]
 8003bb8:	b13c      	cbz	r4, 8003bca <_Bfree+0x3a>
 8003bba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bbc:	6862      	ldr	r2, [r4, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bc4:	6021      	str	r1, [r4, #0]
 8003bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	08004a25 	.word	0x08004a25
 8003bd0:	08004b0c 	.word	0x08004b0c

08003bd4 <__multadd>:
 8003bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd8:	690e      	ldr	r6, [r1, #16]
 8003bda:	4607      	mov	r7, r0
 8003bdc:	4698      	mov	r8, r3
 8003bde:	460c      	mov	r4, r1
 8003be0:	f101 0014 	add.w	r0, r1, #20
 8003be4:	2300      	movs	r3, #0
 8003be6:	6805      	ldr	r5, [r0, #0]
 8003be8:	b2a9      	uxth	r1, r5
 8003bea:	fb02 8101 	mla	r1, r2, r1, r8
 8003bee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003bf2:	0c2d      	lsrs	r5, r5, #16
 8003bf4:	fb02 c505 	mla	r5, r2, r5, ip
 8003bf8:	b289      	uxth	r1, r1
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003c00:	429e      	cmp	r6, r3
 8003c02:	f840 1b04 	str.w	r1, [r0], #4
 8003c06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003c0a:	dcec      	bgt.n	8003be6 <__multadd+0x12>
 8003c0c:	f1b8 0f00 	cmp.w	r8, #0
 8003c10:	d022      	beq.n	8003c58 <__multadd+0x84>
 8003c12:	68a3      	ldr	r3, [r4, #8]
 8003c14:	42b3      	cmp	r3, r6
 8003c16:	dc19      	bgt.n	8003c4c <__multadd+0x78>
 8003c18:	6861      	ldr	r1, [r4, #4]
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	3101      	adds	r1, #1
 8003c1e:	f7ff ff77 	bl	8003b10 <_Balloc>
 8003c22:	4605      	mov	r5, r0
 8003c24:	b928      	cbnz	r0, 8003c32 <__multadd+0x5e>
 8003c26:	4602      	mov	r2, r0
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <__multadd+0x8c>)
 8003c2a:	480e      	ldr	r0, [pc, #56]	; (8003c64 <__multadd+0x90>)
 8003c2c:	21b5      	movs	r1, #181	; 0xb5
 8003c2e:	f000 fd67 	bl	8004700 <__assert_func>
 8003c32:	6922      	ldr	r2, [r4, #16]
 8003c34:	3202      	adds	r2, #2
 8003c36:	f104 010c 	add.w	r1, r4, #12
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	300c      	adds	r0, #12
 8003c3e:	f7ff ff59 	bl	8003af4 <memcpy>
 8003c42:	4621      	mov	r1, r4
 8003c44:	4638      	mov	r0, r7
 8003c46:	f7ff ffa3 	bl	8003b90 <_Bfree>
 8003c4a:	462c      	mov	r4, r5
 8003c4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003c50:	3601      	adds	r6, #1
 8003c52:	f8c3 8014 	str.w	r8, [r3, #20]
 8003c56:	6126      	str	r6, [r4, #16]
 8003c58:	4620      	mov	r0, r4
 8003c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c5e:	bf00      	nop
 8003c60:	08004a9b 	.word	0x08004a9b
 8003c64:	08004b0c 	.word	0x08004b0c

08003c68 <__hi0bits>:
 8003c68:	0c03      	lsrs	r3, r0, #16
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	b9d3      	cbnz	r3, 8003ca4 <__hi0bits+0x3c>
 8003c6e:	0400      	lsls	r0, r0, #16
 8003c70:	2310      	movs	r3, #16
 8003c72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003c76:	bf04      	itt	eq
 8003c78:	0200      	lsleq	r0, r0, #8
 8003c7a:	3308      	addeq	r3, #8
 8003c7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003c80:	bf04      	itt	eq
 8003c82:	0100      	lsleq	r0, r0, #4
 8003c84:	3304      	addeq	r3, #4
 8003c86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003c8a:	bf04      	itt	eq
 8003c8c:	0080      	lsleq	r0, r0, #2
 8003c8e:	3302      	addeq	r3, #2
 8003c90:	2800      	cmp	r0, #0
 8003c92:	db05      	blt.n	8003ca0 <__hi0bits+0x38>
 8003c94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003c98:	f103 0301 	add.w	r3, r3, #1
 8003c9c:	bf08      	it	eq
 8003c9e:	2320      	moveq	r3, #32
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	4770      	bx	lr
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e7e4      	b.n	8003c72 <__hi0bits+0xa>

08003ca8 <__lo0bits>:
 8003ca8:	6803      	ldr	r3, [r0, #0]
 8003caa:	f013 0207 	ands.w	r2, r3, #7
 8003cae:	4601      	mov	r1, r0
 8003cb0:	d00b      	beq.n	8003cca <__lo0bits+0x22>
 8003cb2:	07da      	lsls	r2, r3, #31
 8003cb4:	d424      	bmi.n	8003d00 <__lo0bits+0x58>
 8003cb6:	0798      	lsls	r0, r3, #30
 8003cb8:	bf49      	itett	mi
 8003cba:	085b      	lsrmi	r3, r3, #1
 8003cbc:	089b      	lsrpl	r3, r3, #2
 8003cbe:	2001      	movmi	r0, #1
 8003cc0:	600b      	strmi	r3, [r1, #0]
 8003cc2:	bf5c      	itt	pl
 8003cc4:	600b      	strpl	r3, [r1, #0]
 8003cc6:	2002      	movpl	r0, #2
 8003cc8:	4770      	bx	lr
 8003cca:	b298      	uxth	r0, r3
 8003ccc:	b9b0      	cbnz	r0, 8003cfc <__lo0bits+0x54>
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	2010      	movs	r0, #16
 8003cd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003cd6:	bf04      	itt	eq
 8003cd8:	0a1b      	lsreq	r3, r3, #8
 8003cda:	3008      	addeq	r0, #8
 8003cdc:	071a      	lsls	r2, r3, #28
 8003cde:	bf04      	itt	eq
 8003ce0:	091b      	lsreq	r3, r3, #4
 8003ce2:	3004      	addeq	r0, #4
 8003ce4:	079a      	lsls	r2, r3, #30
 8003ce6:	bf04      	itt	eq
 8003ce8:	089b      	lsreq	r3, r3, #2
 8003cea:	3002      	addeq	r0, #2
 8003cec:	07da      	lsls	r2, r3, #31
 8003cee:	d403      	bmi.n	8003cf8 <__lo0bits+0x50>
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	f100 0001 	add.w	r0, r0, #1
 8003cf6:	d005      	beq.n	8003d04 <__lo0bits+0x5c>
 8003cf8:	600b      	str	r3, [r1, #0]
 8003cfa:	4770      	bx	lr
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	e7e8      	b.n	8003cd2 <__lo0bits+0x2a>
 8003d00:	2000      	movs	r0, #0
 8003d02:	4770      	bx	lr
 8003d04:	2020      	movs	r0, #32
 8003d06:	4770      	bx	lr

08003d08 <__i2b>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	f7ff feff 	bl	8003b10 <_Balloc>
 8003d12:	4602      	mov	r2, r0
 8003d14:	b928      	cbnz	r0, 8003d22 <__i2b+0x1a>
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <__i2b+0x24>)
 8003d18:	4805      	ldr	r0, [pc, #20]	; (8003d30 <__i2b+0x28>)
 8003d1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003d1e:	f000 fcef 	bl	8004700 <__assert_func>
 8003d22:	2301      	movs	r3, #1
 8003d24:	6144      	str	r4, [r0, #20]
 8003d26:	6103      	str	r3, [r0, #16]
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08004a9b 	.word	0x08004a9b
 8003d30:	08004b0c 	.word	0x08004b0c

08003d34 <__multiply>:
 8003d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	4614      	mov	r4, r2
 8003d3a:	690a      	ldr	r2, [r1, #16]
 8003d3c:	6923      	ldr	r3, [r4, #16]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	bfb8      	it	lt
 8003d42:	460b      	movlt	r3, r1
 8003d44:	460d      	mov	r5, r1
 8003d46:	bfbc      	itt	lt
 8003d48:	4625      	movlt	r5, r4
 8003d4a:	461c      	movlt	r4, r3
 8003d4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003d50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003d54:	68ab      	ldr	r3, [r5, #8]
 8003d56:	6869      	ldr	r1, [r5, #4]
 8003d58:	eb0a 0709 	add.w	r7, sl, r9
 8003d5c:	42bb      	cmp	r3, r7
 8003d5e:	b085      	sub	sp, #20
 8003d60:	bfb8      	it	lt
 8003d62:	3101      	addlt	r1, #1
 8003d64:	f7ff fed4 	bl	8003b10 <_Balloc>
 8003d68:	b930      	cbnz	r0, 8003d78 <__multiply+0x44>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	4b42      	ldr	r3, [pc, #264]	; (8003e78 <__multiply+0x144>)
 8003d6e:	4843      	ldr	r0, [pc, #268]	; (8003e7c <__multiply+0x148>)
 8003d70:	f240 115d 	movw	r1, #349	; 0x15d
 8003d74:	f000 fcc4 	bl	8004700 <__assert_func>
 8003d78:	f100 0614 	add.w	r6, r0, #20
 8003d7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003d80:	4633      	mov	r3, r6
 8003d82:	2200      	movs	r2, #0
 8003d84:	4543      	cmp	r3, r8
 8003d86:	d31e      	bcc.n	8003dc6 <__multiply+0x92>
 8003d88:	f105 0c14 	add.w	ip, r5, #20
 8003d8c:	f104 0314 	add.w	r3, r4, #20
 8003d90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003d94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003d98:	9202      	str	r2, [sp, #8]
 8003d9a:	ebac 0205 	sub.w	r2, ip, r5
 8003d9e:	3a15      	subs	r2, #21
 8003da0:	f022 0203 	bic.w	r2, r2, #3
 8003da4:	3204      	adds	r2, #4
 8003da6:	f105 0115 	add.w	r1, r5, #21
 8003daa:	458c      	cmp	ip, r1
 8003dac:	bf38      	it	cc
 8003dae:	2204      	movcc	r2, #4
 8003db0:	9201      	str	r2, [sp, #4]
 8003db2:	9a02      	ldr	r2, [sp, #8]
 8003db4:	9303      	str	r3, [sp, #12]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d808      	bhi.n	8003dcc <__multiply+0x98>
 8003dba:	2f00      	cmp	r7, #0
 8003dbc:	dc55      	bgt.n	8003e6a <__multiply+0x136>
 8003dbe:	6107      	str	r7, [r0, #16]
 8003dc0:	b005      	add	sp, #20
 8003dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc6:	f843 2b04 	str.w	r2, [r3], #4
 8003dca:	e7db      	b.n	8003d84 <__multiply+0x50>
 8003dcc:	f8b3 a000 	ldrh.w	sl, [r3]
 8003dd0:	f1ba 0f00 	cmp.w	sl, #0
 8003dd4:	d020      	beq.n	8003e18 <__multiply+0xe4>
 8003dd6:	f105 0e14 	add.w	lr, r5, #20
 8003dda:	46b1      	mov	r9, r6
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003de2:	f8d9 b000 	ldr.w	fp, [r9]
 8003de6:	b2a1      	uxth	r1, r4
 8003de8:	fa1f fb8b 	uxth.w	fp, fp
 8003dec:	fb0a b101 	mla	r1, sl, r1, fp
 8003df0:	4411      	add	r1, r2
 8003df2:	f8d9 2000 	ldr.w	r2, [r9]
 8003df6:	0c24      	lsrs	r4, r4, #16
 8003df8:	0c12      	lsrs	r2, r2, #16
 8003dfa:	fb0a 2404 	mla	r4, sl, r4, r2
 8003dfe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003e02:	b289      	uxth	r1, r1
 8003e04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003e08:	45f4      	cmp	ip, lr
 8003e0a:	f849 1b04 	str.w	r1, [r9], #4
 8003e0e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003e12:	d8e4      	bhi.n	8003dde <__multiply+0xaa>
 8003e14:	9901      	ldr	r1, [sp, #4]
 8003e16:	5072      	str	r2, [r6, r1]
 8003e18:	9a03      	ldr	r2, [sp, #12]
 8003e1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	f1b9 0f00 	cmp.w	r9, #0
 8003e24:	d01f      	beq.n	8003e66 <__multiply+0x132>
 8003e26:	6834      	ldr	r4, [r6, #0]
 8003e28:	f105 0114 	add.w	r1, r5, #20
 8003e2c:	46b6      	mov	lr, r6
 8003e2e:	f04f 0a00 	mov.w	sl, #0
 8003e32:	880a      	ldrh	r2, [r1, #0]
 8003e34:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003e38:	fb09 b202 	mla	r2, r9, r2, fp
 8003e3c:	4492      	add	sl, r2
 8003e3e:	b2a4      	uxth	r4, r4
 8003e40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003e44:	f84e 4b04 	str.w	r4, [lr], #4
 8003e48:	f851 4b04 	ldr.w	r4, [r1], #4
 8003e4c:	f8be 2000 	ldrh.w	r2, [lr]
 8003e50:	0c24      	lsrs	r4, r4, #16
 8003e52:	fb09 2404 	mla	r4, r9, r4, r2
 8003e56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003e5a:	458c      	cmp	ip, r1
 8003e5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003e60:	d8e7      	bhi.n	8003e32 <__multiply+0xfe>
 8003e62:	9a01      	ldr	r2, [sp, #4]
 8003e64:	50b4      	str	r4, [r6, r2]
 8003e66:	3604      	adds	r6, #4
 8003e68:	e7a3      	b.n	8003db2 <__multiply+0x7e>
 8003e6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1a5      	bne.n	8003dbe <__multiply+0x8a>
 8003e72:	3f01      	subs	r7, #1
 8003e74:	e7a1      	b.n	8003dba <__multiply+0x86>
 8003e76:	bf00      	nop
 8003e78:	08004a9b 	.word	0x08004a9b
 8003e7c:	08004b0c 	.word	0x08004b0c

08003e80 <__pow5mult>:
 8003e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e84:	4615      	mov	r5, r2
 8003e86:	f012 0203 	ands.w	r2, r2, #3
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	460f      	mov	r7, r1
 8003e8e:	d007      	beq.n	8003ea0 <__pow5mult+0x20>
 8003e90:	4c25      	ldr	r4, [pc, #148]	; (8003f28 <__pow5mult+0xa8>)
 8003e92:	3a01      	subs	r2, #1
 8003e94:	2300      	movs	r3, #0
 8003e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e9a:	f7ff fe9b 	bl	8003bd4 <__multadd>
 8003e9e:	4607      	mov	r7, r0
 8003ea0:	10ad      	asrs	r5, r5, #2
 8003ea2:	d03d      	beq.n	8003f20 <__pow5mult+0xa0>
 8003ea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003ea6:	b97c      	cbnz	r4, 8003ec8 <__pow5mult+0x48>
 8003ea8:	2010      	movs	r0, #16
 8003eaa:	f7ff fe1b 	bl	8003ae4 <malloc>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6270      	str	r0, [r6, #36]	; 0x24
 8003eb2:	b928      	cbnz	r0, 8003ec0 <__pow5mult+0x40>
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <__pow5mult+0xac>)
 8003eb6:	481e      	ldr	r0, [pc, #120]	; (8003f30 <__pow5mult+0xb0>)
 8003eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003ebc:	f000 fc20 	bl	8004700 <__assert_func>
 8003ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ec4:	6004      	str	r4, [r0, #0]
 8003ec6:	60c4      	str	r4, [r0, #12]
 8003ec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ed0:	b94c      	cbnz	r4, 8003ee6 <__pow5mult+0x66>
 8003ed2:	f240 2171 	movw	r1, #625	; 0x271
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f7ff ff16 	bl	8003d08 <__i2b>
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	6003      	str	r3, [r0, #0]
 8003ee6:	f04f 0900 	mov.w	r9, #0
 8003eea:	07eb      	lsls	r3, r5, #31
 8003eec:	d50a      	bpl.n	8003f04 <__pow5mult+0x84>
 8003eee:	4639      	mov	r1, r7
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f7ff ff1e 	bl	8003d34 <__multiply>
 8003ef8:	4639      	mov	r1, r7
 8003efa:	4680      	mov	r8, r0
 8003efc:	4630      	mov	r0, r6
 8003efe:	f7ff fe47 	bl	8003b90 <_Bfree>
 8003f02:	4647      	mov	r7, r8
 8003f04:	106d      	asrs	r5, r5, #1
 8003f06:	d00b      	beq.n	8003f20 <__pow5mult+0xa0>
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	b938      	cbnz	r0, 8003f1c <__pow5mult+0x9c>
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4630      	mov	r0, r6
 8003f12:	f7ff ff0f 	bl	8003d34 <__multiply>
 8003f16:	6020      	str	r0, [r4, #0]
 8003f18:	f8c0 9000 	str.w	r9, [r0]
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	e7e4      	b.n	8003eea <__pow5mult+0x6a>
 8003f20:	4638      	mov	r0, r7
 8003f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f26:	bf00      	nop
 8003f28:	08004c60 	.word	0x08004c60
 8003f2c:	08004a25 	.word	0x08004a25
 8003f30:	08004b0c 	.word	0x08004b0c

08003f34 <__lshift>:
 8003f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	460c      	mov	r4, r1
 8003f3a:	6849      	ldr	r1, [r1, #4]
 8003f3c:	6923      	ldr	r3, [r4, #16]
 8003f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f42:	68a3      	ldr	r3, [r4, #8]
 8003f44:	4607      	mov	r7, r0
 8003f46:	4691      	mov	r9, r2
 8003f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f4c:	f108 0601 	add.w	r6, r8, #1
 8003f50:	42b3      	cmp	r3, r6
 8003f52:	db0b      	blt.n	8003f6c <__lshift+0x38>
 8003f54:	4638      	mov	r0, r7
 8003f56:	f7ff fddb 	bl	8003b10 <_Balloc>
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	b948      	cbnz	r0, 8003f72 <__lshift+0x3e>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b28      	ldr	r3, [pc, #160]	; (8004004 <__lshift+0xd0>)
 8003f62:	4829      	ldr	r0, [pc, #164]	; (8004008 <__lshift+0xd4>)
 8003f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003f68:	f000 fbca 	bl	8004700 <__assert_func>
 8003f6c:	3101      	adds	r1, #1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	e7ee      	b.n	8003f50 <__lshift+0x1c>
 8003f72:	2300      	movs	r3, #0
 8003f74:	f100 0114 	add.w	r1, r0, #20
 8003f78:	f100 0210 	add.w	r2, r0, #16
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	4553      	cmp	r3, sl
 8003f80:	db33      	blt.n	8003fea <__lshift+0xb6>
 8003f82:	6920      	ldr	r0, [r4, #16]
 8003f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f88:	f104 0314 	add.w	r3, r4, #20
 8003f8c:	f019 091f 	ands.w	r9, r9, #31
 8003f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f98:	d02b      	beq.n	8003ff2 <__lshift+0xbe>
 8003f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8003f9e:	468a      	mov	sl, r1
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8003fa8:	4302      	orrs	r2, r0
 8003faa:	f84a 2b04 	str.w	r2, [sl], #4
 8003fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fb2:	459c      	cmp	ip, r3
 8003fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8003fb8:	d8f3      	bhi.n	8003fa2 <__lshift+0x6e>
 8003fba:	ebac 0304 	sub.w	r3, ip, r4
 8003fbe:	3b15      	subs	r3, #21
 8003fc0:	f023 0303 	bic.w	r3, r3, #3
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	f104 0015 	add.w	r0, r4, #21
 8003fca:	4584      	cmp	ip, r0
 8003fcc:	bf38      	it	cc
 8003fce:	2304      	movcc	r3, #4
 8003fd0:	50ca      	str	r2, [r1, r3]
 8003fd2:	b10a      	cbz	r2, 8003fd8 <__lshift+0xa4>
 8003fd4:	f108 0602 	add.w	r6, r8, #2
 8003fd8:	3e01      	subs	r6, #1
 8003fda:	4638      	mov	r0, r7
 8003fdc:	612e      	str	r6, [r5, #16]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	f7ff fdd6 	bl	8003b90 <_Bfree>
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8003fee:	3301      	adds	r3, #1
 8003ff0:	e7c5      	b.n	8003f7e <__lshift+0x4a>
 8003ff2:	3904      	subs	r1, #4
 8003ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003ffc:	459c      	cmp	ip, r3
 8003ffe:	d8f9      	bhi.n	8003ff4 <__lshift+0xc0>
 8004000:	e7ea      	b.n	8003fd8 <__lshift+0xa4>
 8004002:	bf00      	nop
 8004004:	08004a9b 	.word	0x08004a9b
 8004008:	08004b0c 	.word	0x08004b0c

0800400c <__mcmp>:
 800400c:	b530      	push	{r4, r5, lr}
 800400e:	6902      	ldr	r2, [r0, #16]
 8004010:	690c      	ldr	r4, [r1, #16]
 8004012:	1b12      	subs	r2, r2, r4
 8004014:	d10e      	bne.n	8004034 <__mcmp+0x28>
 8004016:	f100 0314 	add.w	r3, r0, #20
 800401a:	3114      	adds	r1, #20
 800401c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800402c:	42a5      	cmp	r5, r4
 800402e:	d003      	beq.n	8004038 <__mcmp+0x2c>
 8004030:	d305      	bcc.n	800403e <__mcmp+0x32>
 8004032:	2201      	movs	r2, #1
 8004034:	4610      	mov	r0, r2
 8004036:	bd30      	pop	{r4, r5, pc}
 8004038:	4283      	cmp	r3, r0
 800403a:	d3f3      	bcc.n	8004024 <__mcmp+0x18>
 800403c:	e7fa      	b.n	8004034 <__mcmp+0x28>
 800403e:	f04f 32ff 	mov.w	r2, #4294967295
 8004042:	e7f7      	b.n	8004034 <__mcmp+0x28>

08004044 <__mdiff>:
 8004044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004048:	460c      	mov	r4, r1
 800404a:	4606      	mov	r6, r0
 800404c:	4611      	mov	r1, r2
 800404e:	4620      	mov	r0, r4
 8004050:	4617      	mov	r7, r2
 8004052:	f7ff ffdb 	bl	800400c <__mcmp>
 8004056:	1e05      	subs	r5, r0, #0
 8004058:	d110      	bne.n	800407c <__mdiff+0x38>
 800405a:	4629      	mov	r1, r5
 800405c:	4630      	mov	r0, r6
 800405e:	f7ff fd57 	bl	8003b10 <_Balloc>
 8004062:	b930      	cbnz	r0, 8004072 <__mdiff+0x2e>
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <__mdiff+0x108>)
 8004066:	4602      	mov	r2, r0
 8004068:	f240 2132 	movw	r1, #562	; 0x232
 800406c:	4838      	ldr	r0, [pc, #224]	; (8004150 <__mdiff+0x10c>)
 800406e:	f000 fb47 	bl	8004700 <__assert_func>
 8004072:	2301      	movs	r3, #1
 8004074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407c:	bfa4      	itt	ge
 800407e:	463b      	movge	r3, r7
 8004080:	4627      	movge	r7, r4
 8004082:	4630      	mov	r0, r6
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	bfa6      	itte	ge
 8004088:	461c      	movge	r4, r3
 800408a:	2500      	movge	r5, #0
 800408c:	2501      	movlt	r5, #1
 800408e:	f7ff fd3f 	bl	8003b10 <_Balloc>
 8004092:	b920      	cbnz	r0, 800409e <__mdiff+0x5a>
 8004094:	4b2d      	ldr	r3, [pc, #180]	; (800414c <__mdiff+0x108>)
 8004096:	4602      	mov	r2, r0
 8004098:	f44f 7110 	mov.w	r1, #576	; 0x240
 800409c:	e7e6      	b.n	800406c <__mdiff+0x28>
 800409e:	693e      	ldr	r6, [r7, #16]
 80040a0:	60c5      	str	r5, [r0, #12]
 80040a2:	6925      	ldr	r5, [r4, #16]
 80040a4:	f107 0114 	add.w	r1, r7, #20
 80040a8:	f104 0914 	add.w	r9, r4, #20
 80040ac:	f100 0e14 	add.w	lr, r0, #20
 80040b0:	f107 0210 	add.w	r2, r7, #16
 80040b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80040b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80040bc:	46f2      	mov	sl, lr
 80040be:	2700      	movs	r7, #0
 80040c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80040c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80040c8:	fa1f f883 	uxth.w	r8, r3
 80040cc:	fa17 f78b 	uxtah	r7, r7, fp
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	eba7 0808 	sub.w	r8, r7, r8
 80040d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80040da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80040de:	fa1f f888 	uxth.w	r8, r8
 80040e2:	141f      	asrs	r7, r3, #16
 80040e4:	454d      	cmp	r5, r9
 80040e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80040ea:	f84a 3b04 	str.w	r3, [sl], #4
 80040ee:	d8e7      	bhi.n	80040c0 <__mdiff+0x7c>
 80040f0:	1b2b      	subs	r3, r5, r4
 80040f2:	3b15      	subs	r3, #21
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	3304      	adds	r3, #4
 80040fa:	3415      	adds	r4, #21
 80040fc:	42a5      	cmp	r5, r4
 80040fe:	bf38      	it	cc
 8004100:	2304      	movcc	r3, #4
 8004102:	4419      	add	r1, r3
 8004104:	4473      	add	r3, lr
 8004106:	469e      	mov	lr, r3
 8004108:	460d      	mov	r5, r1
 800410a:	4565      	cmp	r5, ip
 800410c:	d30e      	bcc.n	800412c <__mdiff+0xe8>
 800410e:	f10c 0203 	add.w	r2, ip, #3
 8004112:	1a52      	subs	r2, r2, r1
 8004114:	f022 0203 	bic.w	r2, r2, #3
 8004118:	3903      	subs	r1, #3
 800411a:	458c      	cmp	ip, r1
 800411c:	bf38      	it	cc
 800411e:	2200      	movcc	r2, #0
 8004120:	441a      	add	r2, r3
 8004122:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004126:	b17b      	cbz	r3, 8004148 <__mdiff+0x104>
 8004128:	6106      	str	r6, [r0, #16]
 800412a:	e7a5      	b.n	8004078 <__mdiff+0x34>
 800412c:	f855 8b04 	ldr.w	r8, [r5], #4
 8004130:	fa17 f488 	uxtah	r4, r7, r8
 8004134:	1422      	asrs	r2, r4, #16
 8004136:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800413a:	b2a4      	uxth	r4, r4
 800413c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004140:	f84e 4b04 	str.w	r4, [lr], #4
 8004144:	1417      	asrs	r7, r2, #16
 8004146:	e7e0      	b.n	800410a <__mdiff+0xc6>
 8004148:	3e01      	subs	r6, #1
 800414a:	e7ea      	b.n	8004122 <__mdiff+0xde>
 800414c:	08004a9b 	.word	0x08004a9b
 8004150:	08004b0c 	.word	0x08004b0c

08004154 <__d2b>:
 8004154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004158:	4689      	mov	r9, r1
 800415a:	2101      	movs	r1, #1
 800415c:	ec57 6b10 	vmov	r6, r7, d0
 8004160:	4690      	mov	r8, r2
 8004162:	f7ff fcd5 	bl	8003b10 <_Balloc>
 8004166:	4604      	mov	r4, r0
 8004168:	b930      	cbnz	r0, 8004178 <__d2b+0x24>
 800416a:	4602      	mov	r2, r0
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <__d2b+0xb0>)
 800416e:	4826      	ldr	r0, [pc, #152]	; (8004208 <__d2b+0xb4>)
 8004170:	f240 310a 	movw	r1, #778	; 0x30a
 8004174:	f000 fac4 	bl	8004700 <__assert_func>
 8004178:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800417c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004180:	bb35      	cbnz	r5, 80041d0 <__d2b+0x7c>
 8004182:	2e00      	cmp	r6, #0
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	d028      	beq.n	80041da <__d2b+0x86>
 8004188:	4668      	mov	r0, sp
 800418a:	9600      	str	r6, [sp, #0]
 800418c:	f7ff fd8c 	bl	8003ca8 <__lo0bits>
 8004190:	9900      	ldr	r1, [sp, #0]
 8004192:	b300      	cbz	r0, 80041d6 <__d2b+0x82>
 8004194:	9a01      	ldr	r2, [sp, #4]
 8004196:	f1c0 0320 	rsb	r3, r0, #32
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	430b      	orrs	r3, r1
 80041a0:	40c2      	lsrs	r2, r0
 80041a2:	6163      	str	r3, [r4, #20]
 80041a4:	9201      	str	r2, [sp, #4]
 80041a6:	9b01      	ldr	r3, [sp, #4]
 80041a8:	61a3      	str	r3, [r4, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bf14      	ite	ne
 80041ae:	2202      	movne	r2, #2
 80041b0:	2201      	moveq	r2, #1
 80041b2:	6122      	str	r2, [r4, #16]
 80041b4:	b1d5      	cbz	r5, 80041ec <__d2b+0x98>
 80041b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80041ba:	4405      	add	r5, r0
 80041bc:	f8c9 5000 	str.w	r5, [r9]
 80041c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80041c4:	f8c8 0000 	str.w	r0, [r8]
 80041c8:	4620      	mov	r0, r4
 80041ca:	b003      	add	sp, #12
 80041cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d4:	e7d5      	b.n	8004182 <__d2b+0x2e>
 80041d6:	6161      	str	r1, [r4, #20]
 80041d8:	e7e5      	b.n	80041a6 <__d2b+0x52>
 80041da:	a801      	add	r0, sp, #4
 80041dc:	f7ff fd64 	bl	8003ca8 <__lo0bits>
 80041e0:	9b01      	ldr	r3, [sp, #4]
 80041e2:	6163      	str	r3, [r4, #20]
 80041e4:	2201      	movs	r2, #1
 80041e6:	6122      	str	r2, [r4, #16]
 80041e8:	3020      	adds	r0, #32
 80041ea:	e7e3      	b.n	80041b4 <__d2b+0x60>
 80041ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80041f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80041f4:	f8c9 0000 	str.w	r0, [r9]
 80041f8:	6918      	ldr	r0, [r3, #16]
 80041fa:	f7ff fd35 	bl	8003c68 <__hi0bits>
 80041fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004202:	e7df      	b.n	80041c4 <__d2b+0x70>
 8004204:	08004a9b 	.word	0x08004a9b
 8004208:	08004b0c 	.word	0x08004b0c

0800420c <_calloc_r>:
 800420c:	b513      	push	{r0, r1, r4, lr}
 800420e:	434a      	muls	r2, r1
 8004210:	4611      	mov	r1, r2
 8004212:	9201      	str	r2, [sp, #4]
 8004214:	f000 f85a 	bl	80042cc <_malloc_r>
 8004218:	4604      	mov	r4, r0
 800421a:	b118      	cbz	r0, 8004224 <_calloc_r+0x18>
 800421c:	9a01      	ldr	r2, [sp, #4]
 800421e:	2100      	movs	r1, #0
 8004220:	f7fd fe96 	bl	8001f50 <memset>
 8004224:	4620      	mov	r0, r4
 8004226:	b002      	add	sp, #8
 8004228:	bd10      	pop	{r4, pc}
	...

0800422c <_free_r>:
 800422c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800422e:	2900      	cmp	r1, #0
 8004230:	d048      	beq.n	80042c4 <_free_r+0x98>
 8004232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004236:	9001      	str	r0, [sp, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f1a1 0404 	sub.w	r4, r1, #4
 800423e:	bfb8      	it	lt
 8004240:	18e4      	addlt	r4, r4, r3
 8004242:	f000 fae3 	bl	800480c <__malloc_lock>
 8004246:	4a20      	ldr	r2, [pc, #128]	; (80042c8 <_free_r+0x9c>)
 8004248:	9801      	ldr	r0, [sp, #4]
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	4615      	mov	r5, r2
 800424e:	b933      	cbnz	r3, 800425e <_free_r+0x32>
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	6014      	str	r4, [r2, #0]
 8004254:	b003      	add	sp, #12
 8004256:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800425a:	f000 badd 	b.w	8004818 <__malloc_unlock>
 800425e:	42a3      	cmp	r3, r4
 8004260:	d90b      	bls.n	800427a <_free_r+0x4e>
 8004262:	6821      	ldr	r1, [r4, #0]
 8004264:	1862      	adds	r2, r4, r1
 8004266:	4293      	cmp	r3, r2
 8004268:	bf04      	itt	eq
 800426a:	681a      	ldreq	r2, [r3, #0]
 800426c:	685b      	ldreq	r3, [r3, #4]
 800426e:	6063      	str	r3, [r4, #4]
 8004270:	bf04      	itt	eq
 8004272:	1852      	addeq	r2, r2, r1
 8004274:	6022      	streq	r2, [r4, #0]
 8004276:	602c      	str	r4, [r5, #0]
 8004278:	e7ec      	b.n	8004254 <_free_r+0x28>
 800427a:	461a      	mov	r2, r3
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b10b      	cbz	r3, 8004284 <_free_r+0x58>
 8004280:	42a3      	cmp	r3, r4
 8004282:	d9fa      	bls.n	800427a <_free_r+0x4e>
 8004284:	6811      	ldr	r1, [r2, #0]
 8004286:	1855      	adds	r5, r2, r1
 8004288:	42a5      	cmp	r5, r4
 800428a:	d10b      	bne.n	80042a4 <_free_r+0x78>
 800428c:	6824      	ldr	r4, [r4, #0]
 800428e:	4421      	add	r1, r4
 8004290:	1854      	adds	r4, r2, r1
 8004292:	42a3      	cmp	r3, r4
 8004294:	6011      	str	r1, [r2, #0]
 8004296:	d1dd      	bne.n	8004254 <_free_r+0x28>
 8004298:	681c      	ldr	r4, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	6053      	str	r3, [r2, #4]
 800429e:	4421      	add	r1, r4
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	e7d7      	b.n	8004254 <_free_r+0x28>
 80042a4:	d902      	bls.n	80042ac <_free_r+0x80>
 80042a6:	230c      	movs	r3, #12
 80042a8:	6003      	str	r3, [r0, #0]
 80042aa:	e7d3      	b.n	8004254 <_free_r+0x28>
 80042ac:	6825      	ldr	r5, [r4, #0]
 80042ae:	1961      	adds	r1, r4, r5
 80042b0:	428b      	cmp	r3, r1
 80042b2:	bf04      	itt	eq
 80042b4:	6819      	ldreq	r1, [r3, #0]
 80042b6:	685b      	ldreq	r3, [r3, #4]
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	bf04      	itt	eq
 80042bc:	1949      	addeq	r1, r1, r5
 80042be:	6021      	streq	r1, [r4, #0]
 80042c0:	6054      	str	r4, [r2, #4]
 80042c2:	e7c7      	b.n	8004254 <_free_r+0x28>
 80042c4:	b003      	add	sp, #12
 80042c6:	bd30      	pop	{r4, r5, pc}
 80042c8:	200001f8 	.word	0x200001f8

080042cc <_malloc_r>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	1ccd      	adds	r5, r1, #3
 80042d0:	f025 0503 	bic.w	r5, r5, #3
 80042d4:	3508      	adds	r5, #8
 80042d6:	2d0c      	cmp	r5, #12
 80042d8:	bf38      	it	cc
 80042da:	250c      	movcc	r5, #12
 80042dc:	2d00      	cmp	r5, #0
 80042de:	4606      	mov	r6, r0
 80042e0:	db01      	blt.n	80042e6 <_malloc_r+0x1a>
 80042e2:	42a9      	cmp	r1, r5
 80042e4:	d903      	bls.n	80042ee <_malloc_r+0x22>
 80042e6:	230c      	movs	r3, #12
 80042e8:	6033      	str	r3, [r6, #0]
 80042ea:	2000      	movs	r0, #0
 80042ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ee:	f000 fa8d 	bl	800480c <__malloc_lock>
 80042f2:	4921      	ldr	r1, [pc, #132]	; (8004378 <_malloc_r+0xac>)
 80042f4:	680a      	ldr	r2, [r1, #0]
 80042f6:	4614      	mov	r4, r2
 80042f8:	b99c      	cbnz	r4, 8004322 <_malloc_r+0x56>
 80042fa:	4f20      	ldr	r7, [pc, #128]	; (800437c <_malloc_r+0xb0>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b923      	cbnz	r3, 800430a <_malloc_r+0x3e>
 8004300:	4621      	mov	r1, r4
 8004302:	4630      	mov	r0, r6
 8004304:	f000 f996 	bl	8004634 <_sbrk_r>
 8004308:	6038      	str	r0, [r7, #0]
 800430a:	4629      	mov	r1, r5
 800430c:	4630      	mov	r0, r6
 800430e:	f000 f991 	bl	8004634 <_sbrk_r>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	d123      	bne.n	800435e <_malloc_r+0x92>
 8004316:	230c      	movs	r3, #12
 8004318:	6033      	str	r3, [r6, #0]
 800431a:	4630      	mov	r0, r6
 800431c:	f000 fa7c 	bl	8004818 <__malloc_unlock>
 8004320:	e7e3      	b.n	80042ea <_malloc_r+0x1e>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	1b5b      	subs	r3, r3, r5
 8004326:	d417      	bmi.n	8004358 <_malloc_r+0x8c>
 8004328:	2b0b      	cmp	r3, #11
 800432a:	d903      	bls.n	8004334 <_malloc_r+0x68>
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	441c      	add	r4, r3
 8004330:	6025      	str	r5, [r4, #0]
 8004332:	e004      	b.n	800433e <_malloc_r+0x72>
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	42a2      	cmp	r2, r4
 8004338:	bf0c      	ite	eq
 800433a:	600b      	streq	r3, [r1, #0]
 800433c:	6053      	strne	r3, [r2, #4]
 800433e:	4630      	mov	r0, r6
 8004340:	f000 fa6a 	bl	8004818 <__malloc_unlock>
 8004344:	f104 000b 	add.w	r0, r4, #11
 8004348:	1d23      	adds	r3, r4, #4
 800434a:	f020 0007 	bic.w	r0, r0, #7
 800434e:	1ac2      	subs	r2, r0, r3
 8004350:	d0cc      	beq.n	80042ec <_malloc_r+0x20>
 8004352:	1a1b      	subs	r3, r3, r0
 8004354:	50a3      	str	r3, [r4, r2]
 8004356:	e7c9      	b.n	80042ec <_malloc_r+0x20>
 8004358:	4622      	mov	r2, r4
 800435a:	6864      	ldr	r4, [r4, #4]
 800435c:	e7cc      	b.n	80042f8 <_malloc_r+0x2c>
 800435e:	1cc4      	adds	r4, r0, #3
 8004360:	f024 0403 	bic.w	r4, r4, #3
 8004364:	42a0      	cmp	r0, r4
 8004366:	d0e3      	beq.n	8004330 <_malloc_r+0x64>
 8004368:	1a21      	subs	r1, r4, r0
 800436a:	4630      	mov	r0, r6
 800436c:	f000 f962 	bl	8004634 <_sbrk_r>
 8004370:	3001      	adds	r0, #1
 8004372:	d1dd      	bne.n	8004330 <_malloc_r+0x64>
 8004374:	e7cf      	b.n	8004316 <_malloc_r+0x4a>
 8004376:	bf00      	nop
 8004378:	200001f8 	.word	0x200001f8
 800437c:	200001fc 	.word	0x200001fc

08004380 <__sfputc_r>:
 8004380:	6893      	ldr	r3, [r2, #8]
 8004382:	3b01      	subs	r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	b410      	push	{r4}
 8004388:	6093      	str	r3, [r2, #8]
 800438a:	da08      	bge.n	800439e <__sfputc_r+0x1e>
 800438c:	6994      	ldr	r4, [r2, #24]
 800438e:	42a3      	cmp	r3, r4
 8004390:	db01      	blt.n	8004396 <__sfputc_r+0x16>
 8004392:	290a      	cmp	r1, #10
 8004394:	d103      	bne.n	800439e <__sfputc_r+0x1e>
 8004396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800439a:	f7fe bab1 	b.w	8002900 <__swbuf_r>
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	1c58      	adds	r0, r3, #1
 80043a2:	6010      	str	r0, [r2, #0]
 80043a4:	7019      	strb	r1, [r3, #0]
 80043a6:	4608      	mov	r0, r1
 80043a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <__sfputs_r>:
 80043ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b0:	4606      	mov	r6, r0
 80043b2:	460f      	mov	r7, r1
 80043b4:	4614      	mov	r4, r2
 80043b6:	18d5      	adds	r5, r2, r3
 80043b8:	42ac      	cmp	r4, r5
 80043ba:	d101      	bne.n	80043c0 <__sfputs_r+0x12>
 80043bc:	2000      	movs	r0, #0
 80043be:	e007      	b.n	80043d0 <__sfputs_r+0x22>
 80043c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c4:	463a      	mov	r2, r7
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7ff ffda 	bl	8004380 <__sfputc_r>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d1f3      	bne.n	80043b8 <__sfputs_r+0xa>
 80043d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043d4 <_vfiprintf_r>:
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	460d      	mov	r5, r1
 80043da:	b09d      	sub	sp, #116	; 0x74
 80043dc:	4614      	mov	r4, r2
 80043de:	4698      	mov	r8, r3
 80043e0:	4606      	mov	r6, r0
 80043e2:	b118      	cbz	r0, 80043ec <_vfiprintf_r+0x18>
 80043e4:	6983      	ldr	r3, [r0, #24]
 80043e6:	b90b      	cbnz	r3, 80043ec <_vfiprintf_r+0x18>
 80043e8:	f7ff fa72 	bl	80038d0 <__sinit>
 80043ec:	4b89      	ldr	r3, [pc, #548]	; (8004614 <_vfiprintf_r+0x240>)
 80043ee:	429d      	cmp	r5, r3
 80043f0:	d11b      	bne.n	800442a <_vfiprintf_r+0x56>
 80043f2:	6875      	ldr	r5, [r6, #4]
 80043f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043f6:	07d9      	lsls	r1, r3, #31
 80043f8:	d405      	bmi.n	8004406 <_vfiprintf_r+0x32>
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	059a      	lsls	r2, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_vfiprintf_r+0x32>
 8004400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004402:	f7ff fb08 	bl	8003a16 <__retarget_lock_acquire_recursive>
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	071b      	lsls	r3, r3, #28
 800440a:	d501      	bpl.n	8004410 <_vfiprintf_r+0x3c>
 800440c:	692b      	ldr	r3, [r5, #16]
 800440e:	b9eb      	cbnz	r3, 800444c <_vfiprintf_r+0x78>
 8004410:	4629      	mov	r1, r5
 8004412:	4630      	mov	r0, r6
 8004414:	f7fe fac6 	bl	80029a4 <__swsetup_r>
 8004418:	b1c0      	cbz	r0, 800444c <_vfiprintf_r+0x78>
 800441a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800441c:	07dc      	lsls	r4, r3, #31
 800441e:	d50e      	bpl.n	800443e <_vfiprintf_r+0x6a>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	b01d      	add	sp, #116	; 0x74
 8004426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442a:	4b7b      	ldr	r3, [pc, #492]	; (8004618 <_vfiprintf_r+0x244>)
 800442c:	429d      	cmp	r5, r3
 800442e:	d101      	bne.n	8004434 <_vfiprintf_r+0x60>
 8004430:	68b5      	ldr	r5, [r6, #8]
 8004432:	e7df      	b.n	80043f4 <_vfiprintf_r+0x20>
 8004434:	4b79      	ldr	r3, [pc, #484]	; (800461c <_vfiprintf_r+0x248>)
 8004436:	429d      	cmp	r5, r3
 8004438:	bf08      	it	eq
 800443a:	68f5      	ldreq	r5, [r6, #12]
 800443c:	e7da      	b.n	80043f4 <_vfiprintf_r+0x20>
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	0598      	lsls	r0, r3, #22
 8004442:	d4ed      	bmi.n	8004420 <_vfiprintf_r+0x4c>
 8004444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004446:	f7ff fae7 	bl	8003a18 <__retarget_lock_release_recursive>
 800444a:	e7e9      	b.n	8004420 <_vfiprintf_r+0x4c>
 800444c:	2300      	movs	r3, #0
 800444e:	9309      	str	r3, [sp, #36]	; 0x24
 8004450:	2320      	movs	r3, #32
 8004452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004456:	f8cd 800c 	str.w	r8, [sp, #12]
 800445a:	2330      	movs	r3, #48	; 0x30
 800445c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004620 <_vfiprintf_r+0x24c>
 8004460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004464:	f04f 0901 	mov.w	r9, #1
 8004468:	4623      	mov	r3, r4
 800446a:	469a      	mov	sl, r3
 800446c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004470:	b10a      	cbz	r2, 8004476 <_vfiprintf_r+0xa2>
 8004472:	2a25      	cmp	r2, #37	; 0x25
 8004474:	d1f9      	bne.n	800446a <_vfiprintf_r+0x96>
 8004476:	ebba 0b04 	subs.w	fp, sl, r4
 800447a:	d00b      	beq.n	8004494 <_vfiprintf_r+0xc0>
 800447c:	465b      	mov	r3, fp
 800447e:	4622      	mov	r2, r4
 8004480:	4629      	mov	r1, r5
 8004482:	4630      	mov	r0, r6
 8004484:	f7ff ff93 	bl	80043ae <__sfputs_r>
 8004488:	3001      	adds	r0, #1
 800448a:	f000 80aa 	beq.w	80045e2 <_vfiprintf_r+0x20e>
 800448e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004490:	445a      	add	r2, fp
 8004492:	9209      	str	r2, [sp, #36]	; 0x24
 8004494:	f89a 3000 	ldrb.w	r3, [sl]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a2 	beq.w	80045e2 <_vfiprintf_r+0x20e>
 800449e:	2300      	movs	r3, #0
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a8:	f10a 0a01 	add.w	sl, sl, #1
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	9307      	str	r3, [sp, #28]
 80044b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044b4:	931a      	str	r3, [sp, #104]	; 0x68
 80044b6:	4654      	mov	r4, sl
 80044b8:	2205      	movs	r2, #5
 80044ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044be:	4858      	ldr	r0, [pc, #352]	; (8004620 <_vfiprintf_r+0x24c>)
 80044c0:	f7fb fec6 	bl	8000250 <memchr>
 80044c4:	9a04      	ldr	r2, [sp, #16]
 80044c6:	b9d8      	cbnz	r0, 8004500 <_vfiprintf_r+0x12c>
 80044c8:	06d1      	lsls	r1, r2, #27
 80044ca:	bf44      	itt	mi
 80044cc:	2320      	movmi	r3, #32
 80044ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044d2:	0713      	lsls	r3, r2, #28
 80044d4:	bf44      	itt	mi
 80044d6:	232b      	movmi	r3, #43	; 0x2b
 80044d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044dc:	f89a 3000 	ldrb.w	r3, [sl]
 80044e0:	2b2a      	cmp	r3, #42	; 0x2a
 80044e2:	d015      	beq.n	8004510 <_vfiprintf_r+0x13c>
 80044e4:	9a07      	ldr	r2, [sp, #28]
 80044e6:	4654      	mov	r4, sl
 80044e8:	2000      	movs	r0, #0
 80044ea:	f04f 0c0a 	mov.w	ip, #10
 80044ee:	4621      	mov	r1, r4
 80044f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044f4:	3b30      	subs	r3, #48	; 0x30
 80044f6:	2b09      	cmp	r3, #9
 80044f8:	d94e      	bls.n	8004598 <_vfiprintf_r+0x1c4>
 80044fa:	b1b0      	cbz	r0, 800452a <_vfiprintf_r+0x156>
 80044fc:	9207      	str	r2, [sp, #28]
 80044fe:	e014      	b.n	800452a <_vfiprintf_r+0x156>
 8004500:	eba0 0308 	sub.w	r3, r0, r8
 8004504:	fa09 f303 	lsl.w	r3, r9, r3
 8004508:	4313      	orrs	r3, r2
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	46a2      	mov	sl, r4
 800450e:	e7d2      	b.n	80044b6 <_vfiprintf_r+0xe2>
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	1d19      	adds	r1, r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	9103      	str	r1, [sp, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	bfbb      	ittet	lt
 800451c:	425b      	neglt	r3, r3
 800451e:	f042 0202 	orrlt.w	r2, r2, #2
 8004522:	9307      	strge	r3, [sp, #28]
 8004524:	9307      	strlt	r3, [sp, #28]
 8004526:	bfb8      	it	lt
 8004528:	9204      	strlt	r2, [sp, #16]
 800452a:	7823      	ldrb	r3, [r4, #0]
 800452c:	2b2e      	cmp	r3, #46	; 0x2e
 800452e:	d10c      	bne.n	800454a <_vfiprintf_r+0x176>
 8004530:	7863      	ldrb	r3, [r4, #1]
 8004532:	2b2a      	cmp	r3, #42	; 0x2a
 8004534:	d135      	bne.n	80045a2 <_vfiprintf_r+0x1ce>
 8004536:	9b03      	ldr	r3, [sp, #12]
 8004538:	1d1a      	adds	r2, r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	9203      	str	r2, [sp, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfb8      	it	lt
 8004542:	f04f 33ff 	movlt.w	r3, #4294967295
 8004546:	3402      	adds	r4, #2
 8004548:	9305      	str	r3, [sp, #20]
 800454a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004630 <_vfiprintf_r+0x25c>
 800454e:	7821      	ldrb	r1, [r4, #0]
 8004550:	2203      	movs	r2, #3
 8004552:	4650      	mov	r0, sl
 8004554:	f7fb fe7c 	bl	8000250 <memchr>
 8004558:	b140      	cbz	r0, 800456c <_vfiprintf_r+0x198>
 800455a:	2340      	movs	r3, #64	; 0x40
 800455c:	eba0 000a 	sub.w	r0, r0, sl
 8004560:	fa03 f000 	lsl.w	r0, r3, r0
 8004564:	9b04      	ldr	r3, [sp, #16]
 8004566:	4303      	orrs	r3, r0
 8004568:	3401      	adds	r4, #1
 800456a:	9304      	str	r3, [sp, #16]
 800456c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004570:	482c      	ldr	r0, [pc, #176]	; (8004624 <_vfiprintf_r+0x250>)
 8004572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004576:	2206      	movs	r2, #6
 8004578:	f7fb fe6a 	bl	8000250 <memchr>
 800457c:	2800      	cmp	r0, #0
 800457e:	d03f      	beq.n	8004600 <_vfiprintf_r+0x22c>
 8004580:	4b29      	ldr	r3, [pc, #164]	; (8004628 <_vfiprintf_r+0x254>)
 8004582:	bb1b      	cbnz	r3, 80045cc <_vfiprintf_r+0x1f8>
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	3307      	adds	r3, #7
 8004588:	f023 0307 	bic.w	r3, r3, #7
 800458c:	3308      	adds	r3, #8
 800458e:	9303      	str	r3, [sp, #12]
 8004590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004592:	443b      	add	r3, r7
 8004594:	9309      	str	r3, [sp, #36]	; 0x24
 8004596:	e767      	b.n	8004468 <_vfiprintf_r+0x94>
 8004598:	fb0c 3202 	mla	r2, ip, r2, r3
 800459c:	460c      	mov	r4, r1
 800459e:	2001      	movs	r0, #1
 80045a0:	e7a5      	b.n	80044ee <_vfiprintf_r+0x11a>
 80045a2:	2300      	movs	r3, #0
 80045a4:	3401      	adds	r4, #1
 80045a6:	9305      	str	r3, [sp, #20]
 80045a8:	4619      	mov	r1, r3
 80045aa:	f04f 0c0a 	mov.w	ip, #10
 80045ae:	4620      	mov	r0, r4
 80045b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045b4:	3a30      	subs	r2, #48	; 0x30
 80045b6:	2a09      	cmp	r2, #9
 80045b8:	d903      	bls.n	80045c2 <_vfiprintf_r+0x1ee>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0c5      	beq.n	800454a <_vfiprintf_r+0x176>
 80045be:	9105      	str	r1, [sp, #20]
 80045c0:	e7c3      	b.n	800454a <_vfiprintf_r+0x176>
 80045c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80045c6:	4604      	mov	r4, r0
 80045c8:	2301      	movs	r3, #1
 80045ca:	e7f0      	b.n	80045ae <_vfiprintf_r+0x1da>
 80045cc:	ab03      	add	r3, sp, #12
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	462a      	mov	r2, r5
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <_vfiprintf_r+0x258>)
 80045d4:	a904      	add	r1, sp, #16
 80045d6:	4630      	mov	r0, r6
 80045d8:	f7fd fd52 	bl	8002080 <_printf_float>
 80045dc:	4607      	mov	r7, r0
 80045de:	1c78      	adds	r0, r7, #1
 80045e0:	d1d6      	bne.n	8004590 <_vfiprintf_r+0x1bc>
 80045e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045e4:	07d9      	lsls	r1, r3, #31
 80045e6:	d405      	bmi.n	80045f4 <_vfiprintf_r+0x220>
 80045e8:	89ab      	ldrh	r3, [r5, #12]
 80045ea:	059a      	lsls	r2, r3, #22
 80045ec:	d402      	bmi.n	80045f4 <_vfiprintf_r+0x220>
 80045ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045f0:	f7ff fa12 	bl	8003a18 <__retarget_lock_release_recursive>
 80045f4:	89ab      	ldrh	r3, [r5, #12]
 80045f6:	065b      	lsls	r3, r3, #25
 80045f8:	f53f af12 	bmi.w	8004420 <_vfiprintf_r+0x4c>
 80045fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045fe:	e711      	b.n	8004424 <_vfiprintf_r+0x50>
 8004600:	ab03      	add	r3, sp, #12
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	462a      	mov	r2, r5
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <_vfiprintf_r+0x258>)
 8004608:	a904      	add	r1, sp, #16
 800460a:	4630      	mov	r0, r6
 800460c:	f7fd ffc4 	bl	8002598 <_printf_i>
 8004610:	e7e4      	b.n	80045dc <_vfiprintf_r+0x208>
 8004612:	bf00      	nop
 8004614:	08004acc 	.word	0x08004acc
 8004618:	08004aec 	.word	0x08004aec
 800461c:	08004aac 	.word	0x08004aac
 8004620:	08004c6c 	.word	0x08004c6c
 8004624:	08004c76 	.word	0x08004c76
 8004628:	08002081 	.word	0x08002081
 800462c:	080043af 	.word	0x080043af
 8004630:	08004c72 	.word	0x08004c72

08004634 <_sbrk_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4d06      	ldr	r5, [pc, #24]	; (8004650 <_sbrk_r+0x1c>)
 8004638:	2300      	movs	r3, #0
 800463a:	4604      	mov	r4, r0
 800463c:	4608      	mov	r0, r1
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	f000 f992 	bl	8004968 <_sbrk>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_sbrk_r+0x1a>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_sbrk_r+0x1a>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	20000264 	.word	0x20000264

08004654 <__sread>:
 8004654:	b510      	push	{r4, lr}
 8004656:	460c      	mov	r4, r1
 8004658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465c:	f000 f8e2 	bl	8004824 <_read_r>
 8004660:	2800      	cmp	r0, #0
 8004662:	bfab      	itete	ge
 8004664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004666:	89a3      	ldrhlt	r3, [r4, #12]
 8004668:	181b      	addge	r3, r3, r0
 800466a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800466e:	bfac      	ite	ge
 8004670:	6563      	strge	r3, [r4, #84]	; 0x54
 8004672:	81a3      	strhlt	r3, [r4, #12]
 8004674:	bd10      	pop	{r4, pc}

08004676 <__swrite>:
 8004676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467a:	461f      	mov	r7, r3
 800467c:	898b      	ldrh	r3, [r1, #12]
 800467e:	05db      	lsls	r3, r3, #23
 8004680:	4605      	mov	r5, r0
 8004682:	460c      	mov	r4, r1
 8004684:	4616      	mov	r6, r2
 8004686:	d505      	bpl.n	8004694 <__swrite+0x1e>
 8004688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468c:	2302      	movs	r3, #2
 800468e:	2200      	movs	r2, #0
 8004690:	f000 f898 	bl	80047c4 <_lseek_r>
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800469a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800469e:	81a3      	strh	r3, [r4, #12]
 80046a0:	4632      	mov	r2, r6
 80046a2:	463b      	mov	r3, r7
 80046a4:	4628      	mov	r0, r5
 80046a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046aa:	f000 b817 	b.w	80046dc <_write_r>

080046ae <__sseek>:
 80046ae:	b510      	push	{r4, lr}
 80046b0:	460c      	mov	r4, r1
 80046b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b6:	f000 f885 	bl	80047c4 <_lseek_r>
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	bf15      	itete	ne
 80046c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80046c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046ca:	81a3      	strheq	r3, [r4, #12]
 80046cc:	bf18      	it	ne
 80046ce:	81a3      	strhne	r3, [r4, #12]
 80046d0:	bd10      	pop	{r4, pc}

080046d2 <__sclose>:
 80046d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d6:	f000 b831 	b.w	800473c <_close_r>
	...

080046dc <_write_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	4d07      	ldr	r5, [pc, #28]	; (80046fc <_write_r+0x20>)
 80046e0:	4604      	mov	r4, r0
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	602a      	str	r2, [r5, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f7fb ff7c 	bl	80005e8 <_write>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_write_r+0x1e>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_write_r+0x1e>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	20000264 	.word	0x20000264

08004700 <__assert_func>:
 8004700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004702:	4614      	mov	r4, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <__assert_func+0x2c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4605      	mov	r5, r0
 800470c:	68d8      	ldr	r0, [r3, #12]
 800470e:	b14c      	cbz	r4, 8004724 <__assert_func+0x24>
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <__assert_func+0x30>)
 8004712:	9100      	str	r1, [sp, #0]
 8004714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004718:	4906      	ldr	r1, [pc, #24]	; (8004734 <__assert_func+0x34>)
 800471a:	462b      	mov	r3, r5
 800471c:	f000 f81e 	bl	800475c <fiprintf>
 8004720:	f000 f89f 	bl	8004862 <abort>
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <__assert_func+0x38>)
 8004726:	461c      	mov	r4, r3
 8004728:	e7f3      	b.n	8004712 <__assert_func+0x12>
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c
 8004730:	08004c7d 	.word	0x08004c7d
 8004734:	08004c8a 	.word	0x08004c8a
 8004738:	08004cb8 	.word	0x08004cb8

0800473c <_close_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d06      	ldr	r5, [pc, #24]	; (8004758 <_close_r+0x1c>)
 8004740:	2300      	movs	r3, #0
 8004742:	4604      	mov	r4, r0
 8004744:	4608      	mov	r0, r1
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	f000 f8d6 	bl	80048f8 <_close>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_close_r+0x1a>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_close_r+0x1a>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	20000264 	.word	0x20000264

0800475c <fiprintf>:
 800475c:	b40e      	push	{r1, r2, r3}
 800475e:	b503      	push	{r0, r1, lr}
 8004760:	4601      	mov	r1, r0
 8004762:	ab03      	add	r3, sp, #12
 8004764:	4805      	ldr	r0, [pc, #20]	; (800477c <fiprintf+0x20>)
 8004766:	f853 2b04 	ldr.w	r2, [r3], #4
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	f7ff fe31 	bl	80043d4 <_vfiprintf_r>
 8004772:	b002      	add	sp, #8
 8004774:	f85d eb04 	ldr.w	lr, [sp], #4
 8004778:	b003      	add	sp, #12
 800477a:	4770      	bx	lr
 800477c:	2000000c 	.word	0x2000000c

08004780 <_fstat_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	; (80047a0 <_fstat_r+0x20>)
 8004784:	2300      	movs	r3, #0
 8004786:	4604      	mov	r4, r0
 8004788:	4608      	mov	r0, r1
 800478a:	4611      	mov	r1, r2
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	f000 f8bb 	bl	8004908 <_fstat>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	d102      	bne.n	800479c <_fstat_r+0x1c>
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	b103      	cbz	r3, 800479c <_fstat_r+0x1c>
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	bd38      	pop	{r3, r4, r5, pc}
 800479e:	bf00      	nop
 80047a0:	20000264 	.word	0x20000264

080047a4 <_isatty_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d06      	ldr	r5, [pc, #24]	; (80047c0 <_isatty_r+0x1c>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f000 f8ba 	bl	8004928 <_isatty>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_isatty_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_isatty_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	20000264 	.word	0x20000264

080047c4 <_lseek_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	; (80047e4 <_lseek_r+0x20>)
 80047c8:	4604      	mov	r4, r0
 80047ca:	4608      	mov	r0, r1
 80047cc:	4611      	mov	r1, r2
 80047ce:	2200      	movs	r2, #0
 80047d0:	602a      	str	r2, [r5, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f000 f8b8 	bl	8004948 <_lseek>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_lseek_r+0x1e>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_lseek_r+0x1e>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	20000264 	.word	0x20000264

080047e8 <__ascii_mbtowc>:
 80047e8:	b082      	sub	sp, #8
 80047ea:	b901      	cbnz	r1, 80047ee <__ascii_mbtowc+0x6>
 80047ec:	a901      	add	r1, sp, #4
 80047ee:	b142      	cbz	r2, 8004802 <__ascii_mbtowc+0x1a>
 80047f0:	b14b      	cbz	r3, 8004806 <__ascii_mbtowc+0x1e>
 80047f2:	7813      	ldrb	r3, [r2, #0]
 80047f4:	600b      	str	r3, [r1, #0]
 80047f6:	7812      	ldrb	r2, [r2, #0]
 80047f8:	1e10      	subs	r0, r2, #0
 80047fa:	bf18      	it	ne
 80047fc:	2001      	movne	r0, #1
 80047fe:	b002      	add	sp, #8
 8004800:	4770      	bx	lr
 8004802:	4610      	mov	r0, r2
 8004804:	e7fb      	b.n	80047fe <__ascii_mbtowc+0x16>
 8004806:	f06f 0001 	mvn.w	r0, #1
 800480a:	e7f8      	b.n	80047fe <__ascii_mbtowc+0x16>

0800480c <__malloc_lock>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__malloc_lock+0x8>)
 800480e:	f7ff b902 	b.w	8003a16 <__retarget_lock_acquire_recursive>
 8004812:	bf00      	nop
 8004814:	2000025c 	.word	0x2000025c

08004818 <__malloc_unlock>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__malloc_unlock+0x8>)
 800481a:	f7ff b8fd 	b.w	8003a18 <__retarget_lock_release_recursive>
 800481e:	bf00      	nop
 8004820:	2000025c 	.word	0x2000025c

08004824 <_read_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d07      	ldr	r5, [pc, #28]	; (8004844 <_read_r+0x20>)
 8004828:	4604      	mov	r4, r0
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	2200      	movs	r2, #0
 8004830:	602a      	str	r2, [r5, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f000 f890 	bl	8004958 <_read>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_read_r+0x1e>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_read_r+0x1e>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	20000264 	.word	0x20000264

08004848 <__ascii_wctomb>:
 8004848:	b149      	cbz	r1, 800485e <__ascii_wctomb+0x16>
 800484a:	2aff      	cmp	r2, #255	; 0xff
 800484c:	bf85      	ittet	hi
 800484e:	238a      	movhi	r3, #138	; 0x8a
 8004850:	6003      	strhi	r3, [r0, #0]
 8004852:	700a      	strbls	r2, [r1, #0]
 8004854:	f04f 30ff 	movhi.w	r0, #4294967295
 8004858:	bf98      	it	ls
 800485a:	2001      	movls	r0, #1
 800485c:	4770      	bx	lr
 800485e:	4608      	mov	r0, r1
 8004860:	4770      	bx	lr

08004862 <abort>:
 8004862:	b508      	push	{r3, lr}
 8004864:	2006      	movs	r0, #6
 8004866:	f000 f82b 	bl	80048c0 <raise>
 800486a:	2001      	movs	r0, #1
 800486c:	f000 f88a 	bl	8004984 <_exit>

08004870 <_raise_r>:
 8004870:	291f      	cmp	r1, #31
 8004872:	b538      	push	{r3, r4, r5, lr}
 8004874:	4604      	mov	r4, r0
 8004876:	460d      	mov	r5, r1
 8004878:	d904      	bls.n	8004884 <_raise_r+0x14>
 800487a:	2316      	movs	r3, #22
 800487c:	6003      	str	r3, [r0, #0]
 800487e:	f04f 30ff 	mov.w	r0, #4294967295
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004886:	b112      	cbz	r2, 800488e <_raise_r+0x1e>
 8004888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800488c:	b94b      	cbnz	r3, 80048a2 <_raise_r+0x32>
 800488e:	4620      	mov	r0, r4
 8004890:	f000 f830 	bl	80048f4 <_getpid_r>
 8004894:	462a      	mov	r2, r5
 8004896:	4601      	mov	r1, r0
 8004898:	4620      	mov	r0, r4
 800489a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800489e:	f000 b817 	b.w	80048d0 <_kill_r>
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d00a      	beq.n	80048bc <_raise_r+0x4c>
 80048a6:	1c59      	adds	r1, r3, #1
 80048a8:	d103      	bne.n	80048b2 <_raise_r+0x42>
 80048aa:	2316      	movs	r3, #22
 80048ac:	6003      	str	r3, [r0, #0]
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7e7      	b.n	8004882 <_raise_r+0x12>
 80048b2:	2400      	movs	r4, #0
 80048b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80048b8:	4628      	mov	r0, r5
 80048ba:	4798      	blx	r3
 80048bc:	2000      	movs	r0, #0
 80048be:	e7e0      	b.n	8004882 <_raise_r+0x12>

080048c0 <raise>:
 80048c0:	4b02      	ldr	r3, [pc, #8]	; (80048cc <raise+0xc>)
 80048c2:	4601      	mov	r1, r0
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	f7ff bfd3 	b.w	8004870 <_raise_r>
 80048ca:	bf00      	nop
 80048cc:	2000000c 	.word	0x2000000c

080048d0 <_kill_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4d07      	ldr	r5, [pc, #28]	; (80048f0 <_kill_r+0x20>)
 80048d4:	2300      	movs	r3, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	602b      	str	r3, [r5, #0]
 80048de:	f000 f82b 	bl	8004938 <_kill>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	d102      	bne.n	80048ec <_kill_r+0x1c>
 80048e6:	682b      	ldr	r3, [r5, #0]
 80048e8:	b103      	cbz	r3, 80048ec <_kill_r+0x1c>
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	20000264 	.word	0x20000264

080048f4 <_getpid_r>:
 80048f4:	f000 b810 	b.w	8004918 <_getpid>

080048f8 <_close>:
 80048f8:	4b02      	ldr	r3, [pc, #8]	; (8004904 <_close+0xc>)
 80048fa:	2258      	movs	r2, #88	; 0x58
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004902:	4770      	bx	lr
 8004904:	20000264 	.word	0x20000264

08004908 <_fstat>:
 8004908:	4b02      	ldr	r3, [pc, #8]	; (8004914 <_fstat+0xc>)
 800490a:	2258      	movs	r2, #88	; 0x58
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f04f 30ff 	mov.w	r0, #4294967295
 8004912:	4770      	bx	lr
 8004914:	20000264 	.word	0x20000264

08004918 <_getpid>:
 8004918:	4b02      	ldr	r3, [pc, #8]	; (8004924 <_getpid+0xc>)
 800491a:	2258      	movs	r2, #88	; 0x58
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	f04f 30ff 	mov.w	r0, #4294967295
 8004922:	4770      	bx	lr
 8004924:	20000264 	.word	0x20000264

08004928 <_isatty>:
 8004928:	4b02      	ldr	r3, [pc, #8]	; (8004934 <_isatty+0xc>)
 800492a:	2258      	movs	r2, #88	; 0x58
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	2000      	movs	r0, #0
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000264 	.word	0x20000264

08004938 <_kill>:
 8004938:	4b02      	ldr	r3, [pc, #8]	; (8004944 <_kill+0xc>)
 800493a:	2258      	movs	r2, #88	; 0x58
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	f04f 30ff 	mov.w	r0, #4294967295
 8004942:	4770      	bx	lr
 8004944:	20000264 	.word	0x20000264

08004948 <_lseek>:
 8004948:	4b02      	ldr	r3, [pc, #8]	; (8004954 <_lseek+0xc>)
 800494a:	2258      	movs	r2, #88	; 0x58
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f04f 30ff 	mov.w	r0, #4294967295
 8004952:	4770      	bx	lr
 8004954:	20000264 	.word	0x20000264

08004958 <_read>:
 8004958:	4b02      	ldr	r3, [pc, #8]	; (8004964 <_read+0xc>)
 800495a:	2258      	movs	r2, #88	; 0x58
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	f04f 30ff 	mov.w	r0, #4294967295
 8004962:	4770      	bx	lr
 8004964:	20000264 	.word	0x20000264

08004968 <_sbrk>:
 8004968:	4b04      	ldr	r3, [pc, #16]	; (800497c <_sbrk+0x14>)
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	4602      	mov	r2, r0
 800496e:	b909      	cbnz	r1, 8004974 <_sbrk+0xc>
 8004970:	4903      	ldr	r1, [pc, #12]	; (8004980 <_sbrk+0x18>)
 8004972:	6019      	str	r1, [r3, #0]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	4402      	add	r2, r0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	4770      	bx	lr
 800497c:	20000200 	.word	0x20000200
 8004980:	20000268 	.word	0x20000268

08004984 <_exit>:
 8004984:	e7fe      	b.n	8004984 <_exit>
	...

08004988 <_init>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr

08004994 <_fini>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr
